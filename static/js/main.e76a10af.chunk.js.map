{"version":3,"sources":["images/logo.svg","images/icon-github.svg","setup/SetupScreen.tsx","home/Welcome.tsx","home/Settings.tsx","home/Home.tsx","participants/SpeakerRow.tsx","participants/Speakers.tsx","participants/TeamCell.tsx","participants/TeamSpeakerSelect.tsx","participants/TeamWinSelector.tsx","participants/TeamRow.tsx","participants/TeamTable.tsx","participants/Teams.tsx","participants/Ranking.tsx","participants/Participants.tsx","judges/JudgeRow.tsx","judges/Judges.tsx","draws/JudgePill.tsx","draws/RoundRow.tsx","draws/Round.tsx","draws/Draws.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SetupScreen","props","state","setupForm","tournamentName","numDivisions","divisionOneName","divisionTwoName","handleSetupFormChange","bind","handleSetupFormSubmit","importData","event","name","target","value","Number","setupFormState","this","setState","preventDefault","divisionNames","initializeTournament","files","document","getElementById","importTournament","Modal","show","init","backdrop","animation","className","dialogClassName","backdropClassName","aria-labelledby","Header","Title","id","src","logo","alt","Body","href","rel","Tabs","defaultActiveKey","Tab","eventKey","title","Form","onSubmit","Group","controlId","Control","type","placeholder","onChange","Label","Check","inline","custom","label","checked","Collapse","in","Row","Col","md","Button","variant","htmlFor","React","Component","Welcome","Settings","nameForm","handleNameFormChange","handleNameFormSubmit","exportData","clearData","bsCustomFileInput","updateTournamentName","data","encodeURIComponent","localStorage","getItem","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","window","confirm","clear","location","reload","lg","sm","xl","xs","onClick","GitHubLogo","Home","Container","Nav","Item","Link","Content","Pane","config","updateConfig","SpeakerRow","speaker","disqualified","trashFill","handleSpeakerNameEdit","handleSpeakerNameUpdate","handleDisqUpdate","trashOnMouseEnter","trashOnMouseLeave","updateSpeaker","key","speakerID","rows","cols","autoComplete","spellCheck","onBlur","school","role","onMouseEnter","onMouseLeave","deleteSpeaker","Speakers","addSpeakerForm","speakerName","handleAddSpeakerFormChange","handleAddSpeakerFormSubmit","addSpeakerFormState","speakers","counter","JSON","parse","newSpeaker","scores","ranks","wins","push","setItem","stringify","updateSpeakers","blankForm","index","indexOf","teams","team","round1","includes","round2","round3","alert","splice","table","length","Table","hover","bordered","OverlayTrigger","placement","overlay","Tooltip","map","TeamCell","round","toString","handleEdit","handleUpdate","isNaN","fn","maxLength","TeamSpeakerSelect","roundKey","speakerPos","handleFormChange","parseInt","handleUpdateTeamFormChange","teamID","as","speakerPicker","TeamWinSelector","win","handleWinFormUpdate","totalWins","updateTeam","TeamRow","getDistinctSpeakers","updateTeamForm","showModal","peopleFill","setScore","setRank","modalShow","modalHide","handleTeamUpdate","peopleOnMouseEnter","peopleOnMouseLeave","sp","s","Set","no","find","el","updateTeamFormState","speakerRows","isInR1","isInR2","isInR3","totalScores","totalRanks","isInR","i","t","scores1","forEach","scores2","scores3","ranks1","ranks2","ranks3","totalPoints","findIndex","div","teamSpeakerSelects","rowSpan","deleteTeam","colSpan","size","onHide","closeButton","TeamTable","Teams","addTeamForm","teamName","speaker1","speaker2","speaker3","handleAddTeamFormChange","handleAddTeamFormSubmit","addTeamFormState","memberList","newTeam","sideRound1","opponents","updateTeams","draws","rooms","roomsOne","roomsTwo","pair","prop","opp","filter","teamTable","Ranking","speaker_ranking","slice","sort","a","b","a_sum","reduce","x","y","b_sum","a_ranks","b_ranks","a_team","b_team","a_wins","undefined","b_wins","a_tpoints","b_tpoints","team_ranking","striped","Participants","JudgeRow","judge","canChair","atRound1","atRound2","atRound3","handleJudgeNameEdit","handleJudgeNameUpdate","handleJudgeToggle","updateJudge","judgeID","deleteJudge","Judges","addJudgeForm","judgeName","handleAddJudgeFormChange","handleAddJudgeFormSubmit","judgeAddFormState","judges","newJudge","hasChaired","updateJudges","inRound","chair","wings","totalRooms","Math","getTotalTeams","chairsR1","chairsR2","chairsR3","JudgePill","roomName","room","handleRoomFormChange","handleRoomFormSubmit","updateRoom","isChair","popover","Popover","draw","floor","random","trigger","rootClose","hasConflict","RoundRow","handleRoomChange","prevProps","updateRooms","newRoomName","nextDiv","r","newPair","swapChair","j","oldIndex","chairConflict","speakersInTeams","speakerSchools","team_conflict","wing","Round","pairings","generated","fullScreen","generateDraw","fullScreenDraw","teamsOne","teamsTwo","len1","len2","chairs","totalTeams","pop","currProp","currOpp","roomCounter","t1","t2","newRoom","roomID","drawr","documentElement","requestFullscreen","fullscreenElement","exitFullscreen","tables","speakersOne","speakersTwo","Draws","App","updateStorage","updateInit","updateSpeakersOne","updateSpeakersTwo","updateTeamsOne","updateTeamsTwo","version","pkg","fr","FileReader","onload","result","speakerCounter","teamCounter","judgeCounter","tournament_name","importConfig","divisions","importSpeakersOne","speakers_one","debaterID","importTeamsOne","teams_one","sideR1","importSpeakersTwo","speakers_two","importTeamsTwo","teams_two","speakers_counter","teams_counter","importJudges","r1","r2","r3","judges_counter","importDraws","newDraw","pairings_one","pairing","pairings_two","readAsText","item","showMenu","toggleMenu","participants_nav","participants_panes","fluid","aria-controls","aria-expanded","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e76a10af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.15863a1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-github.026cb8cd.svg\";","import React, { ChangeEvent, FormEvent } from 'react';\nimport './SetupScreen.scss';\nimport logo from '../images/logo.svg';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\n\ntype SetupScreenProps = {\n    init: boolean,\n    initializeTournament: (tournamentName: string, numDivisions: number, divisionNames: string[]) => void,\n    importTournament: (files: FileList) => void\n}\n\ntype SetupScreenState = {\n    setupForm: {\n        tournamentName: string,\n        numDivisions: number,\n        divisionOneName: string,\n        divisionTwoName: string,\n        [key: string]: string|number\n    }\n}\n\nclass SetupScreen extends React.Component<SetupScreenProps, SetupScreenState> {\n    constructor(props: SetupScreenProps) {\n        super(props);\n\n        this.state = {\n            setupForm: {\n                tournamentName: \"\",\n                numDivisions: 1,\n                divisionOneName: \"\",\n                divisionTwoName: \"\"\n            }\n        }\n\n        this.handleSetupFormChange = this.handleSetupFormChange.bind(this);\n        this.handleSetupFormSubmit = this.handleSetupFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n    }\n\n\n    handleSetupFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name === \"numDivisions\") value = Number(value);\n        let setupFormState = {...this.state.setupForm};\n        setupFormState[name] = value;\n        this.setState({ setupForm: setupFormState });\n    }\n\n    handleSetupFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const name = this.state.setupForm.tournamentName;\n        if (name === \"\") return false;\n\n        const numDivisions = this.state.setupForm.numDivisions;\n        const divisionNames =[this.state.setupForm.divisionOneName, this.state.setupForm.divisionTwoName];\n        if(numDivisions === 2 && (divisionNames[0] === \"\" || divisionNames[1] === \"\")) return false;\n\n        this.props.initializeTournament(name, numDivisions, divisionNames);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const files = (document.getElementById(\"import-setup\") as HTMLInputElement).files;\n        if(files === null) return false;\n        this.props.importTournament(files);\n    }\n\n\n    render() {\n        return (\n            <Modal\n                show={!this.props.init}\n                backdrop=\"static\"\n                animation={false}\n                className=\"setup-modal\"\n                dialogClassName=\"setup-modal-dialog\"\n                backdropClassName=\"setup-modal-backdrop\"\n                aria-labelledby=\"setup-modal-title\" >\n                <Modal.Header>\n                    <Modal.Title id=\"setup-modal-title\">\n                        <img src={logo} alt=\"TacoTab logo\" id=\"setup-logo\" />\n                        Welcome to TacoTab!\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk&mdash;this app might bite.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                    <p>You can create a new tournament from scratch, or import data from a previous TacoTab tournament.</p>\n                    \n                    <Tabs defaultActiveKey=\"createnew\" id=\"setup-tabs\">\n                        <Tab eventKey=\"createnew\" title=\"New tournament\">\n                            <Form onSubmit={this.handleSetupFormSubmit}>\n                                <h5>Tournament name</h5>\n                                <Form.Group controlId=\"setupFormTournamentName\">\n                                    <Form.Control\n                                        name=\"tournamentName\"\n                                        type=\"text\"\n                                        placeholder=\"e.g. 'Bard MS-HS 2020'\"\n                                        value={this.state.setupForm.name}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <h5 id=\"setup-form-div-h5\">Speaker divisions</h5>\n                                <Form.Group controlId=\"setupFormNumDivisions\" id=\"setup-form-num-div\">\n                                    <Form.Label>Number of speaker divisions:&nbsp;&nbsp;</Form.Label>\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"1\"\n                                        value={1}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-1\"\n                                        checked={this.state.setupForm.numDivisions === 1}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"2\"\n                                        value={2}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-2\"\n                                        checked={this.state.setupForm.numDivisions === 2}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <Collapse in={this.state.setupForm.numDivisions === 2}>\n                                    <div>\n                                        <Form.Group controlId=\"setupFormDivisionNames\">\n                                            <Form.Label>Give both divisions a name for easy identification.</Form.Label>\n                                            <Form.Row>\n                                                <Col md={6}>\n                                                    <Form.Control\n                                                        name=\"divisionOneName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Novice'\"\n                                                        value={this.state.setupForm.divisionOneName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                </Col>\n                                                <Col md={6}>\n                                                    <Form.Control\n                                                        name=\"divisionTwoName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Open'\"\n                                                        value={this.state.setupForm.divisionTwoName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                </Col>\n                                            </Form.Row>\n                                        </Form.Group>\n                                    </div>\n                                </Collapse>\n\n                                <Button variant=\"primary\" type=\"submit\" id=\"setup-form-submit\">\n                                    Create the tournament\n                                </Button>\n                            </Form>\n                        </Tab>\n\n                        <Tab eventKey=\"importnew\" title=\"Import tournament\">\n                            <p>Open files generated with the Export function.</p>\n                            <Form onSubmit={this.importData}>\n                                <Form.Row>\n                                    <Col md={9}>\n                                        <div className=\"custom-file\">\n                                            <Form.Control\n                                                name=\"import\"\n                                                id=\"import-setup\"\n                                                className=\"custom-file-input\"\n                                                type=\"file\" />\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                        </div>\n                                    </Col>\n                                    <Col md={3}>\n                                        <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default SetupScreen;","import React from 'react';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass Welcome extends React.Component {\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <h2>Welcome!</h2>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default Welcome;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Settings.scss';\nimport GitHubLogo from '../images/icon-github.svg';\nimport { Config } from '../types/Config';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport { Download, TrashFill } from 'react-bootstrap-icons';\n\n\ntype SettingsProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void,\n    importTournament: (files: FileList) => void\n}\n\ntype SettingsState = {\n    nameForm: string\n}\n\nclass Settings extends React.Component<SettingsProps, SettingsState> {\n    constructor(props: SettingsProps) {\n        super(props);\n\n        this.state = {\n            nameForm: this.props.tournamentName\n        }\n\n        this.handleNameFormChange = this.handleNameFormChange.bind(this);\n        this.handleNameFormSubmit = this.handleNameFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n        this.exportData = this.exportData.bind(this);\n        this.clearData = this.clearData.bind(this);\n    }\n\n    componentDidMount() {\n        bsCustomFileInput.init();\n    }\n\n\n    handleNameFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({nameForm: event.target.value});\n    }\n\n    handleNameFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const name = this.state.nameForm;\n        this.props.updateTournamentName(name);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const files = (document.getElementById(\"import-settings\") as HTMLInputElement).files;\n        if (files === null) return false;\n        this.props.importTournament(files);\n    }\n\n    exportData() {\n        let data = \"data:text/json;charset=utf-8,\";\n        data += encodeURIComponent(\"{\");\n        data += encodeURIComponent('\"init\": ' + localStorage.getItem(\"init\") + \",\");\n        data += encodeURIComponent('\"tournamentName\": ' + localStorage.getItem(\"tournamentName\") + \",\");\n        data += encodeURIComponent('\"config\": ' + localStorage.getItem(\"config\") + \",\");\n        data += encodeURIComponent('\"speakersOne\": ' + localStorage.getItem(\"speakersOne\") + \",\");\n        data += encodeURIComponent('\"teamsOne\": ' + localStorage.getItem(\"teamsOne\") + \",\");\n        data += encodeURIComponent('\"speakersTwo\": ' + localStorage.getItem(\"speakersTwo\") + \",\");\n        data += encodeURIComponent('\"teamsTwo\": ' + localStorage.getItem(\"teamsTwo\") + \",\");\n        data += encodeURIComponent('\"speakerCounter\": ' + localStorage.getItem(\"speakerCounter\") + \",\");\n        data += encodeURIComponent('\"teamCounter\": ' + localStorage.getItem(\"teamCounter\") + \",\");\n        data += encodeURIComponent('\"judges\": ' + localStorage.getItem(\"judges\") + \",\");\n        data += encodeURIComponent('\"judgeCounter\": ' + localStorage.getItem(\"judgeCounter\") + \",\");\n        data += encodeURIComponent('\"draws\": ' + localStorage.getItem(\"draws\"));\n        data += encodeURIComponent(\"}\");\n        \n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", data);\n        downloadAnchorNode.setAttribute(\"download\", \"tournament.json\");\n        document.body.appendChild(downloadAnchorNode);\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n \n    clearData() {\n        const conf = window.confirm(\"Are you sure you want to delete all data?\");\n        if(!conf) return false;\n        localStorage.clear();\n        window.location.reload();\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col lg={8}>\n                        <h2>Settings</h2>\n                        <p>Manage your tournament.</p>\n                        <section>\n                            <h3>Change tournament name</h3>\n                            <Form onSubmit={this.handleNameFormSubmit}>\n                                <Form.Row>\n                                    <Col sm={9} xl={6}>\n                                        <Form.Control\n                                            name=\"tournament-name\"\n                                            type=\"text\"\n                                            placeholder=\"New name\"\n                                            value={this.state.nameForm}\n                                            onChange={this.handleNameFormChange} />\n                                    </Col>\n                                    <Col>\n                                        <Button\n                                            variant=\"primary\"\n                                            type=\"submit\">\n                                            Save\n                                        </Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </section>\n                        <section>\n                            <h3>Import tournament data</h3>\n                            <p>Open files generated with the Export function below. <strong>Note:</strong> this will override all current data!</p>\n                            <Form onSubmit={this.importData}>\n                                <Form.Row>\n                                    <Col xs={9} xl={6}>\n                                        <div className=\"custom-file\">\n                                            <Form.Control\n                                                name=\"import\"\n                                                id=\"import-settings\"\n                                                className=\"custom-file-input\"\n                                                type=\"file\" />\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                        </div>\n                                    </Col>\n                                    <Col>\n                                        <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </section>\n                        <section>\n                            <h3>Export tournament data</h3>\n                            <p>Save all tournament data to a file on your PC.</p>\n                            <Button\n                                variant=\"primary\"\n                                onClick={this.exportData}>\n                                <Download className=\"btn-icon\" />\n                                Export data\n                            </Button>\n                        </section>\n                        <section id=\"section-cleardata\">\n                            <h3>Clear tournament data</h3>\n                            <p>Warning: this will delete <strong>all</strong> entered data. Save your data using the Export function first.</p>\n                            <Button\n                                variant=\"danger\"\n                                onClick={this.clearData}>\n                                <TrashFill className=\"btn-icon\" />\n                                Clear data\n                            </Button>\n                        </section>\n                    </Col>\n                    <Col lg={4}>\n                        <section id=\"section-about\">\n                            <h3>About</h3>\n                            <p>\n                                TacoTab β version 0.3.0<br />\n                                <img src={GitHubLogo} alt=\"GitHub logo\" id=\"logo-github\"/>&nbsp;\n                                <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                    GitHub\n                                </a>\n                            </p>\n                            <p>\n                                Built by <a href=\"https://rayo.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Rayo Verweij</a> for the <a href=\"https://debate.bard.edu\" rel=\"noopener noreferrer\" target=\"_blank\">Bard Debate Union</a>&mdash;Bard's best sports team.\n                            </p>\n                        </section>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Settings;","import React from 'react';\nimport Welcome from './Welcome';\nimport Settings from './Settings';\nimport { Config } from '../types/Config';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { HouseDoorFill, GearWideConnected } from 'react-bootstrap-icons';\n\n\ntype HomeProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void,\n    importTournament: (files: FileList) => void\n}\n\nclass Home extends React.Component<HomeProps> {\n    render() {\n        return (\n            <Tab.Container id=\"home-view\" defaultActiveKey=\"welcome\">\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"welcome\" className=\"sub-nav-link\">\n                                    <HouseDoorFill className=\"btn-icon\"/>\n                                    Welcome\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"settings\" className=\"sub-nav-link\">\n                                    <GearWideConnected className=\"btn-icon\"/>\n                                    Settings\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"welcome\">\n                                <Welcome />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"settings\">\n                                <Settings\n                                    config={this.props.config}\n                                    tournamentName={this.props.tournamentName}\n                                    updateTournamentName={this.props.updateTournamentName}\n                                    updateConfig={this.props.updateConfig}\n                                    importTournament={this.props.importTournament} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Home;","import React, { ChangeEvent, FocusEvent } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { Trash, TrashFill } from 'react-bootstrap-icons';\nimport { Speaker } from '../types/Speaker';\n\n\ntype SpeakerRowProps = {\n    speaker: Speaker,\n    updateSpeaker: (speaker: Speaker) => void,\n    deleteSpeaker: (speaker: Speaker) => void\n}\n\ntype SpeakerRowState = {\n    name: string,\n    disqualified: boolean,\n    trashFill: boolean\n}\n\nclass SpeakerRow extends React.Component<SpeakerRowProps, SpeakerRowState> {\n    constructor(props: SpeakerRowProps) {\n        super(props);\n\n        this.state = {\n            name: this.props.speaker.name,\n            disqualified: this.props.speaker.disqualified,\n            trashFill: false\n        }\n\n        this.handleSpeakerNameEdit = this.handleSpeakerNameEdit.bind(this);\n        this.handleSpeakerNameUpdate = this.handleSpeakerNameUpdate.bind(this);\n        this.handleDisqUpdate = this.handleDisqUpdate.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n    }\n\n    handleSpeakerNameEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({name: event.target.value});\n    }\n    \n    handleSpeakerNameUpdate(event: FocusEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        const name = this.state.name;\n        const speaker = this.props.speaker;\n        speaker.name = name;\n        this.props.updateSpeaker(speaker);\n    }\n\n    handleDisqUpdate(event: ChangeEvent<HTMLInputElement>) {\n        const checked = event.target.checked;\n        const speaker = this.props.speaker;\n        speaker.disqualified = checked;\n        this.setState({disqualified: checked});\n        this.props.updateSpeaker(speaker);\n    }\n\n    trashOnMouseEnter() {\n        this.setState({trashFill: true});\n    }\n\n    trashOnMouseLeave() {\n        this.setState({trashFill: false});\n    }\n    \n    render() {\n        const speaker = this.props.speaker;\n\n        return (\n            <tr key={`speaker-row-${speaker.speakerID}`}>\n                <td className=\"editable\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        rows={1}\n                        cols={25}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.name}\n                        onChange={this.handleSpeakerNameEdit}\n                        onBlur={this.handleSpeakerNameUpdate} />\n                </td>\n                <td>\n                    {speaker.school}\n                </td>\n                <td className=\"cell-low-padding\">\n                    <Form.Check\n                        id={`speaker-disq-${speaker.speakerID}`}\n                        type=\"switch\"\n                        name=\"disqualified\"\n                        label=\"\"\n                        onChange={this.handleDisqUpdate}\n                        checked={this.state.disqualified}\n                        className={this.state.disqualified ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"table-delete\">\n                    {this.state.trashFill ? \n                        <TrashFill\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteSpeaker(speaker)} />\n                        :\n                        <Trash\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteSpeaker(speaker)} />\n                    }\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default SpeakerRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Speakers.scss';\nimport SpeakerRow from './SpeakerRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { TrashFill } from 'react-bootstrap-icons';\n\n\ntype SpeakersProps = {\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void\n}\n\ntype SpeakersState = {\n    addSpeakerForm: {\n        speakerName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Speakers extends React.Component<SpeakersProps, SpeakersState> {\n    constructor(props: SpeakersProps) {\n        super(props);\n\n        this.state = {\n            addSpeakerForm: {\n                speakerName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddSpeakerFormChange = this.handleAddSpeakerFormChange.bind(this);\n        this.handleAddSpeakerFormSubmit = this.handleAddSpeakerFormSubmit.bind(this);\n        this.updateSpeaker = this.updateSpeaker.bind(this);\n        this.deleteSpeaker = this.deleteSpeaker.bind(this);\n    }\n\n\n    handleAddSpeakerFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target;\n        let addSpeakerFormState = {...this.state.addSpeakerForm};\n        addSpeakerFormState[name] = value;\n        this.setState({addSpeakerForm: addSpeakerFormState});\n    }\n\n    handleAddSpeakerFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let speakers = this.props.speakers;\n        let counter = JSON.parse(localStorage.getItem(\"speakerCounter\")!);\n\n        const newSpeaker: Speaker = {\n            speakerID: counter++,\n            name: this.state.addSpeakerForm.speakerName,\n            school: this.state.addSpeakerForm.school,\n            scores: [0, 0, 0],\n            ranks: [0, 0, 0],\n            wins: 0,\n            disqualified: false\n        };\n        speakers.push(newSpeaker);\n\n        localStorage.setItem(\"speakerCounter\", JSON.stringify(counter));\n        this.props.updateSpeakers(speakers);\n\n        let blankForm = {...this.state.addSpeakerForm};\n        blankForm.speakerName = \"\";\n        this.setState({addSpeakerForm: blankForm});\n    }\n\n    updateSpeaker(speaker: Speaker) {\n        let speakers = this.props.speakers;\n        const index = speakers.indexOf(speaker);\n        speakers[index] = speaker;\n        this.props.updateSpeakers(speakers);\n    }\n\n    deleteSpeaker(speaker: Speaker) {\n        for(const team of this.props.teams) {\n            if(team.round1.includes(speaker.speakerID) || team.round2.includes(speaker.speakerID) || team.round3.includes(speaker.speakerID)) {\n                window.alert(`This speaker is still part of team ${team.name}. You need to remove them from the team before you can delete them.`);\n                return;\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete speaker ${speaker.name}?`);\n        if(conf) {\n            let speakers = this.props.speakers;\n            const index = speakers.indexOf(speaker);\n            speakers.splice(index, 1);\n            this.props.updateSpeakers(speakers);\n        }\n    }\n\n\n    render() {\n        let table;\n        if(this.props.speakers.length === 0) {\n            table = <p className=\"none-yet\">No speakers yet!</p>;\n        } else {\n            table = (\n                <Table className=\"speaker-table\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>School</th>\n                            <th>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disqualify-info\">\n                                            Disqualified speakers can still be added to teams and receive scores, but won't be listed in the ranking\n                                        </Tooltip>\n                                    }>\n                                    <abbr title=\"\">Disq</abbr>\n                                </OverlayTrigger>\n                            </th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.speakers.map(speaker => {\n                            return (\n                                <SpeakerRow \n                                    key={`speaker-row-${speaker.speakerID}`}\n                                    speaker={speaker}\n                                    updateSpeaker={this.updateSpeaker}\n                                    deleteSpeaker={this.deleteSpeaker} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n            \n            \n        }\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                    <h2>Speakers</h2>\n                    \n                        <Form onSubmit={this.handleAddSpeakerFormSubmit}>\n                            <Form.Row>\n                                <Col md={4}>\n                                    <Form.Control\n                                        name=\"name\"\n                                        type=\"text\"\n                                        placeholder=\"Name\"\n                                        value={this.state.addSpeakerForm.speakerName}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Control\n                                        name=\"school\"\n                                        type=\"text\"\n                                        placeholder=\"School\"\n                                        value={this.state.addSpeakerForm.school}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col>\n                                    <Button\n                                        variant=\"primary\"\n                                        className=\"btn-submit\"\n                                        type=\"submit\">\n                                        Add speaker\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={10} xl={8} className=\"table-col\">\n                        {table}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Speakers;","import React, { ChangeEvent } from 'react';\nimport { Speaker } from '../types/Speaker';\n\n\ntype TeamCellProps = {\n    type: string,\n    speaker: Speaker,\n    round: number,\n    fn: (speaker: Speaker, no: number, value: number) => void\n}\n\ntype TeamCellState = {\n    value: string\n}\n\nclass TeamCell extends React.Component<TeamCellProps, TeamCellState> {\n    constructor(props: TeamCellProps) {\n        super(props);\n\n        this.state = {\n            value: this.props.type === \"score\" ? this.props.speaker.scores[this.props.round].toString() : this.props.speaker.ranks[this.props.round].toString()\n        }\n\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n\n\n    handleEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({value: event.target.value});\n    }\n\n    handleUpdate(event: ChangeEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        let value: string = this.state.value;\n        if(!value || isNaN(Number(value))) {\n            value = \"0\";\n        }\n        this.props.fn(this.props.speaker, this.props.round, Number(value));\n    }\n\n\n    render() {\n        return (\n            <textarea\n                rows={1}\n                cols={this.props.type === \"score\" ? 2 : 1}\n                maxLength={this.props.type === \"score\" ? 2 : 1}\n                autoComplete=\"off\"\n                value={this.state.value}\n                onChange={this.handleEdit}\n                onBlur={this.handleUpdate} />\n        );\n    }\n}\n\nexport default TeamCell;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamSpeakerSelectProps = {\n    team: Team,\n    speakerPos: number,\n    round: number,\n    value: Array<number[]>,\n    handleUpdateTeamFormChange: (value: number, speaker: number, round: number) => void,\n    speakerPicker: JSX.Element[]\n}\n\ntype TeamSpeakerSelectState = {\n    value: number\n}\n\nclass TeamSpeakerSelect extends React.Component<TeamSpeakerSelectProps, TeamSpeakerSelectState> {\n    constructor(props: TeamSpeakerSelectProps) {\n        super(props);\n\n        let roundKey: keyof Team;\n        if(this.props.round === 1) {\n            roundKey = \"round1\";\n        } else if(this.props.round === 2) {\n            roundKey = \"round2\";\n        } else {\n            roundKey = \"round3\";\n        }\n\n        this.state = {\n            value: this.props.team[roundKey][this.props.speakerPos]\n        }\n\n        this.handleFormChange = this.handleFormChange.bind(this);\n    }\n\n\n    handleFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = parseInt(event.target.value);\n        this.setState({value: value});\n        this.props.handleUpdateTeamFormChange(value, this.props.speakerPos, this.props.round);\n    }\n\n\n    render() {\n        return (\n            <Col>\n                <Form.Group controlId={`form-update-team-${this.props.team.teamID}-speaker-${this.props.speakerPos}-round-${this.props.round}`}>\n                    <Form.Label>Round {this.props.round}</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        name={`speaker-${this.props.speakerPos}-round-${this.props.round}`}\n                        value={this.state.value}\n                        onChange={this.handleFormChange}>\n                            {this.props.speakerPos === 2 ? <option value={-1}>[no third speaker]</option> : \"\"}\n                            {this.props.speakerPicker}\n                    </Form.Control>\n                </Form.Group>\n            </Col>\n        );\n    }\n}\n\nexport default TeamSpeakerSelect;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamWinSelectorProps = {\n    team: Team,\n    round: number,\n    updateTeam: (team: Team) => void\n}\n\ntype TeamWinSelectorState = {\n    win: boolean\n}\n\nclass TeamWinSelector extends React.Component<TeamWinSelectorProps, TeamWinSelectorState> {\n    constructor(props: TeamWinSelectorProps){\n        super(props);\n\n        this.state = {\n            win: this.props.team.wins[this.props.round - 1]\n        }\n\n        this.handleWinFormUpdate = this.handleWinFormUpdate.bind(this);\n    }\n\n\n    handleWinFormUpdate(event: ChangeEvent<HTMLInputElement>) {\n        let team = this.props.team;\n\n        if(event.target.value === \"true\") {\n            team.wins[this.props.round - 1] = true;\n            team.totalWins += 1;\n            this.setState({win: true});\n        } else {\n            team.wins[this.props.round - 1] = false;\n            team.totalWins -= 1;\n            this.setState({win: false});\n        }\n\n        this.props.updateTeam(team);\n    }\n\n\n    render() {\n        return (\n            <Form>\n                <Form.Control\n                    as=\"select\"\n                    name={`win-form-${this.props.team.teamID}-round-${this.props.round}`}\n                    value={this.state.win.toString()}\n                    onChange={this.handleWinFormUpdate}>\n                        <option value=\"true\">Win</option>\n                        <option value=\"false\">Loss</option>\n                </Form.Control>\n            </Form>\n        );\n    }\n}\n\nexport default TeamWinSelector;","import React, { FormEvent } from 'react';\nimport TeamCell from './TeamCell';\nimport TeamSpeakerSelect from './TeamSpeakerSelect';\nimport TeamWinSelector from './TeamWinSelector';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Trash, TrashFill, People, PeopleFill } from 'react-bootstrap-icons';\n\n\ntype TeamRowProps = {\n    team: Team,\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void,\n    speakerPicker: JSX.Element[]\n}\n\ntype TeamRowState = {\n    speakers: number[],\n    updateTeamForm: Array<number[]>,\n    showModal: boolean,\n    trashFill: boolean,\n    peopleFill: boolean\n}\n\nclass TeamRow extends React.Component<TeamRowProps, TeamRowState> {\n    constructor(props: TeamRowProps) {\n        super(props);\n        \n        this.state = {\n            speakers: this.getDistinctSpeakers(),\n            updateTeamForm: [\n                [this.props.team.round1[0], this.props.team.round2[0], this.props.team.round3[0]],\n                [this.props.team.round1[1], this.props.team.round2[1], this.props.team.round3[1]],\n                [this.props.team.round1[2], this.props.team.round2[2], this.props.team.round3[2]]\n            ],\n            showModal: false,\n            trashFill: false,\n            peopleFill: false\n        }\n\n        this.setScore = this.setScore.bind(this);\n        this.setRank = this.setRank.bind(this);\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleUpdateTeamFormChange = this.handleUpdateTeamFormChange.bind(this);\n        this.handleTeamUpdate = this.handleTeamUpdate.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n        this.peopleOnMouseEnter = this.peopleOnMouseEnter.bind(this);\n        this.peopleOnMouseLeave = this.peopleOnMouseLeave.bind(this);\n    }\n\n\n    getDistinctSpeakers() {\n        let sp = []\n        for(let s = 0; s < 3; s++) {\n            sp.push(this.props.team.round1[s]);\n            sp.push(this.props.team.round2[s]);\n            sp.push(this.props.team.round3[s]);\n        }\n        return [...new Set(sp)];\n    }\n    \n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n    \n    setScore(speaker: Speaker, no: number, value: number) {\n        let speakers = this.props.speakers;\n        speakers\n            .find(el => el.speakerID.toString() === speaker.speakerID.toString())!\n            .scores[no] = value;\n\n        this.props.updateSpeakers(speakers);\n    }\n\n    setRank(speaker: Speaker, no: number, value: number) {\n        let speakers = this.props.speakers;\n        speakers\n            .find(el => el.speakerID.toString() === speaker.speakerID.toString())!\n            .ranks[no] = value;\n        \n        this.props.updateSpeakers(speakers);\n    }\n\n    handleUpdateTeamFormChange(value: number, speakerPos: number, round: number) {\n        let updateTeamFormState = this.state.updateTeamForm;\n        updateTeamFormState[speakerPos][round - 1] = value;\n        this.setState({updateTeamForm: updateTeamFormState});\n    }\n\n    handleTeamUpdate(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let team = this.props.team;\n        team.round1 = [this.state.updateTeamForm[0][0], this.state.updateTeamForm[1][0], this.state.updateTeamForm[2][0]];\n        team.round2 = [this.state.updateTeamForm[0][1], this.state.updateTeamForm[1][1], this.state.updateTeamForm[2][1]];\n        team.round3 = [this.state.updateTeamForm[0][2], this.state.updateTeamForm[1][2], this.state.updateTeamForm[2][2]];\n\n        this.props.updateTeam(team);\n        this.setState({speakers: this.getDistinctSpeakers()});\n        this.modalHide();\n    }\n\n    trashOnMouseEnter() { this.setState({trashFill: true}); }\n    trashOnMouseLeave() { this.setState({trashFill: false}); }\n    peopleOnMouseEnter() { this.setState({peopleFill: true}); }\n    peopleOnMouseLeave() { this.setState({peopleFill: false}); }\n\n\n    render() {\n        const team = this.props.team;\n        const speakers = this.state.speakers.map(sp => {\n            if(sp === -1) {\n                return null;\n            } else {\n                return this.props.speakers.find(el => el.speakerID === sp)!;\n            }\n        });\n        \n        // Calculate average scores\n        if(speakers.includes(null)) {\n            const index = speakers.indexOf(null);\n\n            speakers[index] = {\n                speakerID: -1,\n                name: \"[averaged third speaker]\",\n                school: \"\",\n                scores: [\n                    (speakers[0]!.scores[0] + speakers[1]!.scores[0]) / 2,\n                    (speakers[0]!.scores[1] + speakers[1]!.scores[1]) / 2,\n                    (speakers[0]!.scores[2] + speakers[1]!.scores[2]) / 2\n                ],\n                ranks: [\n                    (speakers[0]!.ranks[0] + speakers[1]!.ranks[0]) / 2,\n                    (speakers[0]!.ranks[1] + speakers[1]!.ranks[1]) / 2,\n                    (speakers[0]!.ranks[2] + speakers[1]!.ranks[2]) / 2\n                ],\n                wins: 0,\n                disqualified: true\n            }\n        }\n\n        // Generate the table rows\n        const speakerRows = speakers.map(speaker => {\n            speaker = speaker!\n\n            if(speaker.speakerID === -1) {\n                return <tr key={`${team.teamID}-average-third`}></tr>;\n            }\n\n            const isInR1 = this.props.team.round1.includes(speaker.speakerID);\n            const isInR2 = this.props.team.round2.includes(speaker.speakerID);\n            const isInR3 = this.props.team.round3.includes(speaker.speakerID);\n\n            let totalScores = 0;\n            if (isInR1) totalScores += speaker.scores[0];\n            if (isInR2) totalScores += speaker.scores[1];\n            if (isInR3) totalScores += speaker.scores[2];\n\n            let totalRanks = 0;\n            if (isInR1) totalRanks += speaker.ranks[0];\n            if (isInR2) totalRanks += speaker.ranks[1];\n            if (isInR3) totalRanks += speaker.ranks[2];\n\n            return (\n                <tr key={`${speaker.name}_row`}>\n                    <td>{speaker.name}</td>\n                    {\n                        [isInR1, isInR2, isInR3].map((isInR, i) => {\n                            return [\"score\", \"rank\"].map(t => {\n                                return (\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <TeamCell\n                                            key={`teamcell-${speaker!.speakerID}-${i}-${t}`}\n                                            type={t}\n                                            speaker={speaker!}\n                                            round={i}\n                                            fn={t === \"score\" ? this.setScore : this.setRank} />\n                                    </td>\n                                );\n                            })\n                        })\n                    }\n                    <td>{totalScores}</td>\n                    <td>{totalRanks}</td>\n                </tr>\n            );\n        });\n\n        // Calculate total scores\n        let scores1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                scores1 += speaker!.scores[0]\n            }\n        });\n        let scores2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                scores2 += speaker!.scores[1]\n            }\n        });\n        let scores3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                scores3 += speaker!.scores[2]\n            }\n        });\n\n        // Calculate total ranks\n        let ranks1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                ranks1 += speaker!.ranks[0]\n            }\n        });\n        let ranks2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                ranks2 += speaker!.ranks[1]\n            }\n        });\n        let ranks3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                ranks3 += speaker!.ranks[2]\n            }\n        });\n\n\n        // Update team scores\n        team.totalPoints = scores1 + scores2 + scores3;\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => {\n            return el.teamID === team.teamID;\n        });\n        teams[index] = team;\n        if(this.props.div === 1) {\n            localStorage.setItem(\"teamsOne\", JSON.stringify(teams));\n        } else {\n            localStorage.setItem(\"teamsTwo\", JSON.stringify(teams));\n        }\n\n        // Update the people selection picker\n        const teamSpeakerSelects = [0, 1, 2].map(speakerPos => {\n            return (\n                <div key={`teamSpeakerSelectRow-team-${team.teamID}-speaker-${speakerPos}`} className=\"form-update-team-speaker\">\n                    <p>Speaker {speakerPos + 1}</p>\n                    <Form.Row>\n                        {\n                            [1, 2, 3].map(round => {\n                                return (\n                                    <TeamSpeakerSelect\n                                        key={`teamSpeakerSelect-team-${team.teamID}-speaker-${round}-round-${round}`}\n                                        team={team}\n                                        speakerPos={speakerPos}\n                                        round={round}\n                                        value={this.state.updateTeamForm}\n                                        handleUpdateTeamFormChange={this.handleUpdateTeamFormChange}\n                                        speakerPicker={this.props.speakerPicker} />\n                                );\n                            })\n                        }\n                    </Form.Row>\n                </div>\n            );\n        });\n\n\n        return (\n            <tbody>\n                <tr>\n                    <th rowSpan={this.state.speakers.length + 3} className=\"cell-teamname\">\n                        {team.name}\n                        <br />\n                        {this.state.peopleFill ?\n                            <PeopleFill\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.peopleOnMouseEnter}\n                                onMouseLeave={this.peopleOnMouseLeave}\n                                onClick={this.modalShow} />\n                            :\n                            <People\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.peopleOnMouseEnter}\n                                onMouseLeave={this.peopleOnMouseLeave}\n                                onClick={this.modalShow} />\n                        }\n                        {this.state.trashFill ? \n                            <TrashFill\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.trashOnMouseEnter}\n                                onMouseLeave={this.trashOnMouseLeave}\n                                onClick={() => this.props.deleteTeam(team)} />\n                            :\n                            <Trash\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.trashOnMouseEnter}\n                                onMouseLeave={this.trashOnMouseLeave}\n                                onClick={() => this.props.deleteTeam(team)} />\n                        }\n                    </th>\n                </tr>\n                {speakerRows}\n                <tr className=\"row-total\">\n                    <td>Team total</td>\n                    <td>{scores1}</td>\n                    <td>{ranks1}</td>\n                    <td>{scores2}</td>\n                    <td>{ranks2}</td>\n                    <td>{scores3}</td>\n                    <td>{ranks3}</td>\n                    <td>{scores1 + scores2 + scores3}</td>\n                    <td>{ranks1 + ranks2 + ranks3}</td>\n                </tr>\n                <tr className=\"row-wins\">\n                    <td>Team wins</td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={1} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={2} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={3} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2} className=\"cell-totalwins\">\n                        Total wins: {team.totalWins}\n                    </td>\n                </tr>\n\n                <Modal show={this.state.showModal} size=\"lg\" onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Specify team members per round</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleTeamUpdate}>\n                            {teamSpeakerSelects}\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Save\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </tbody>\n        );\n    }\n}\n\nexport default TeamRow;","import React from 'react';\nimport './TeamTable.scss';\nimport TeamRow from './TeamRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Table from 'react-bootstrap/Table';\n\n\ntype TeamTableProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void,\n    speakerPicker: JSX.Element[]\n}\n\nclass TeamTable extends React.Component<TeamTableProps> {\n    render() {\n        return (\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th>Team Name</th>\n                        <th>Speakers</th>\n                        <th>R1 Score</th>\n                        <th>R1 Rank</th>\n                        <th>R2 Score</th>\n                        <th>R2 Rank</th>\n                        <th>R3 Score</th>\n                        <th>R3 Rank</th>\n                        <th>Total Score</th>\n                        <th>Total Rank</th>\n                    </tr>\n                </thead>\n                {this.props.teams.map(team => {\n                    return <TeamRow\n                                key={`${team.name}-row`}\n                                team={team}\n                                div={this.props.div}\n                                speakers={this.props.speakers}\n                                teams={this.props.teams}\n                                updateSpeakers={this.props.updateSpeakers}\n                                updateTeam={this.props.updateTeam}\n                                deleteTeam={this.props.deleteTeam}\n                                speakerPicker={this.props.speakerPicker} />;\n                })}\n            </Table>\n        );\n    }\n}\n\nexport default TeamTable;","import React, { ChangeEvent, FormEvent } from 'react';\nimport TeamTable from './TeamTable';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\ntype TeamsState = {\n    addTeamForm: {\n        teamName: string,\n        speaker1: number,\n        speaker2: number,\n        speaker3: number,\n        [key: string]: string|number\n    },\n    showModal: boolean\n}\n\nclass Teams extends React.Component<TeamsProps, TeamsState> {\n    constructor(props: TeamsProps) {\n        super(props);\n\n        this.state = {\n            addTeamForm: {\n                teamName: \"\",\n                speaker1: 0,\n                speaker2: 0,\n                speaker3: 0\n            },\n            showModal: false\n        }\n\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleAddTeamFormChange = this.handleAddTeamFormChange.bind(this);\n        this.handleAddTeamFormSubmit = this.handleAddTeamFormSubmit.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n        this.deleteTeam = this.deleteTeam.bind(this);\n    }\n\n\n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleAddTeamFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name !== \"teamName\") value = Number(value);\n        let addTeamFormState = {...this.state.addTeamForm};\n        addTeamFormState[name] = value;\n        this.setState({addTeamForm: addTeamFormState});\n    }\n\n    handleAddTeamFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let teams = this.props.teams;\n        let counter = JSON.parse(localStorage.getItem(\"teamCounter\")!);\n\n        const memberList = [this.state.addTeamForm.speaker1, this.state.addTeamForm.speaker2, this.state.addTeamForm.speaker3]\n        const newTeam: Team = {\n            teamID: counter++,\n            name: this.state.addTeamForm.teamName,\n            round1: memberList,\n            round2: memberList,\n            round3: memberList,\n            totalPoints: 0,\n            wins: [false, false, false],\n            totalWins: 0,\n            sideRound1: \"\",\n            opponents: []\n            };\n        teams.push(newTeam);\n\n        localStorage.setItem(\"teamCounter\", JSON.stringify(counter));\n        this.props.updateTeams(teams);\n\n        this.modalHide();\n    }\n\n    updateTeam(team: Team) {\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => el.teamID === team.teamID);\n        teams[index] = team;\n        this.props.updateTeams(teams);\n    }\n\n    deleteTeam(team: Team) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        for (const round in draws) {\n            let rooms;\n\n            if(this.props.div === 1) rooms = draws[round].roomsOne;\n            else rooms = draws[round].roomsTwo;\n\n            for (const pair of rooms) {\n                if(pair.prop === team.teamID || pair.opp === team.teamID) {\n                    alert(\"This team has already started the tournament. You can't delete it anymore. You can still replace its speakers.\");\n                    return;\n                }\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete team ${team.name}?`);\n        if(conf) {\n            let teams = this.props.teams;\n            teams = teams.filter(el => el.teamID !== team.teamID);  \n            this.props.updateTeams(teams);\n        }\n    }\n\n    \n    render() {\n        let speakerPicker = this.props.speakers.map(speaker => {\n            return (\n                <option value={speaker.speakerID} key={`option-${speaker.speakerID}`}>{speaker.name}</option>\n            );\n        });\n\n        let teamTable;\n        if(this.props.teams.length === 0) {\n            teamTable = <p className=\"none-yet\">No teams yet!</p>;\n        } else {\n            teamTable = <TeamTable\n                            div={this.props.div}\n                            speakers={this.props.speakers}\n                            teams={this.props.teams}\n                            updateSpeakers={this.props.updateSpeakers}\n                            updateTeam={this.updateTeam}\n                            deleteTeam={this.deleteTeam}\n                            speakerPicker={speakerPicker} />\n        }\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h2>Teams</h2>\n                        <Button onClick={this.modalShow}>Add team</Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {teamTable}\n                    </Col>\n                </Row>\n\n                <Modal show={this.state.showModal} onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add a team</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleAddTeamFormSubmit}>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-name`}>\n                                <Form.Label>Team name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"teamName\"\n                                    value={this.state.addTeamForm.teamName}\n                                    onChange={this.handleAddTeamFormChange} />\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-1`}>\n                                <Form.Label>Speaker 1</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker1\"\n                                    value={this.state.addTeamForm.speaker1}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-2`}>\n                                <Form.Label>Speaker 2</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker2\"\n                                    value={this.state.addTeamForm.speaker2}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-3`}>\n                                <Form.Label>Speaker 3</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker3\"\n                                    value={this.state.addTeamForm.speaker3}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        <option value=\"avg\">[no third speaker]</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Add\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Teams;","import React from 'react';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\n\ntype RankingProps = {\n    speakers: Speaker[],\n    teams: Team[]\n}\n\nclass Ranking extends React.Component<RankingProps> {\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n\n        const speakers_ranked = speakers\n                                .slice(0)\n                                .filter(el => el.disqualified === false)\n                                .sort((a, b) => {\n            // First sort on total speaker scores\n            const a_sum = a.scores.reduce((x, y) => x + y, 0);\n            const b_sum = b.scores.reduce((x, y) => x + y, 0);\n\n            if(a_sum > b_sum) {\n                return -1;\n            } else if(a_sum < b_sum) {\n                return 1;\n            } else {\n                // Secondly sort on speaker ranks\n                const a_ranks = a.ranks.reduce((x, y) => x + y, 0);\n                const b_ranks = b.ranks.reduce((x, y) => x + y, 0);\n\n                if(a_ranks < b_ranks) {\n                    return -1;\n                } else if(a_ranks > b_ranks) {\n                    return 1;\n                } else {\n                    // Thirdly sort on team wins\n                    const a_team = teams.find(el => el.round1.includes(a.speakerID));\n                    const b_team = teams.find(el => el.round1.includes(b.speakerID));\n                    const a_wins = a_team === undefined ? 0 : a_team.totalWins;\n                    const b_wins = b_team === undefined ? 0 : b_team.totalWins;\n\n                    if(a_wins > b_wins) {\n                        return -1;\n                    } else if(a_wins < b_wins) {\n                        return 1;\n                    } else {\n                        // Fourthly sort on team points\n                        const a_tpoints = a_team === undefined ? 0 : a_team.totalPoints;\n                        const b_tpoints = b_team === undefined ? 0 : b_team.totalPoints;\n\n                        if(a_tpoints > b_tpoints) {\n                            return -1;\n                        } else if(a_tpoints < b_tpoints) {\n                            return 1;\n                        } else {\n                            return 1;\n                        }\n                    }\n                }\n            }\n        });\n\n        const speaker_ranking = speakers_ranked.map((speaker, index) => {\n            let team = teams.find(el => el.round1.includes(speaker.speakerID));\n            if (team === undefined) {\n                team = {\n                    teamID: -1,\n                    name: \"\",\n                    round1: [],\n                    round2: [],\n                    round3: [],\n                    totalPoints: 0,\n                    wins: [],\n                    totalWins: 0,\n                    sideRound1: \"\",\n                    opponents: []\n                }\n            }\n            return (\n                <tr key={`speaker_rank_${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>{speaker.name}</td>\n                    <td>{speaker.school}</td>\n                    <td>{speaker.scores.reduce((x, y) => x + y, 0)}</td>\n                    <td>{speaker.ranks.reduce((x, y) => x + y, 0)}</td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n\n\n        const teams_ranked = teams.slice(0).sort((a, b) => {\n            // First sort on team wins\n            const a_wins = a.totalWins;\n            const b_wins = b.totalWins;\n\n            if(a_wins > b_wins) {\n                return -1;\n            } else if(a_wins < b_wins) {\n                return 1;\n            } else {\n                // Secondlyly sort on team points\n                const a_tpoints = a.totalPoints;\n                const b_tpoints = b.totalPoints;\n\n                if(a_tpoints > b_tpoints) {\n                    return -1;\n                } else if(a_tpoints < b_tpoints) {\n                    return 1;\n                } else {\n                    return 1;\n                }\n            }\n        });\n\n        const team_ranking = teams_ranked.map((team, index) => {\n            return (\n                <tr key={`team_rank_${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>{team.name}</td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n        \n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h2>Ranking</h2>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={7} className=\"table-col\">\n                        <h3>Speakers</h3>\n                        <Table striped className=\"speaker-ranking-table table-no-top-margin table-less-bottom-margin-sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>School</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerpoints\">\n                                                    Total speaker points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣSP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerranks\">\n                                                    Total speaker ranks (lower is better)\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣSR</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {speaker_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col lg={5} className=\"table-col table-col-margin-lg\">\n                        <h3>Teams</h3>\n                        <Table striped className=\"table-no-top-margin\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {team_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Ranking;","import React from 'react';\nimport Speakers from './Speakers';\nimport Teams from './Teams';\nimport Ranking from './Ranking';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { PersonFill, PeopleFill, Trophy } from 'react-bootstrap-icons';\n\n\ntype ParticipantsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\nclass Participants extends React.Component<ParticipantsProps> {\n    render() {\n        return (\n            <Tab.Container id={`part-view-${this.props.div}`} defaultActiveKey=\"speakers\">\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"speakers\" className=\"sub-nav-link\">\n                                    <PersonFill className=\"btn-icon\" />\n                                    Speakers\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"teams\" className=\"sub-nav-link\">\n                                    <PeopleFill className=\"btn-icon\" />\n                                    Teams\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"ranking\" className=\"sub-nav-link\">\n                                    <Trophy className=\"btn-icon\" />\n                                    Ranking\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"speakers\">\n                                <Speakers\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"teams\">\n                                <Teams\n                                    div={this.props.div}\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers}\n                                    updateTeams={this.props.updateTeams} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"ranking\">\n                                <Ranking\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Participants;","import React, { ChangeEvent, FocusEvent } from 'react';\nimport { Judge } from '../types/Judge';\nimport Form from 'react-bootstrap/Form';\nimport { Trash, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgeRowProps = {\n    judge: Judge,\n    updateJudge: (judge: Judge) => void,\n    deleteJudge: (judge: Judge) => void\n}\n\ntype JudgeRowState = {\n    name: string,\n    canChair: boolean,\n    atRound1: boolean,\n    atRound2: boolean,\n    atRound3: boolean,\n    trashFill: boolean,\n    [key: string]: string|boolean\n}\n\nclass JudgeRow extends React.Component<JudgeRowProps, JudgeRowState> {\n    constructor(props: JudgeRowProps) {\n        super(props);\n\n        this.state = {\n            name: this.props.judge.name,\n            canChair: this.props.judge.canChair,\n            atRound1: this.props.judge.atRound1,\n            atRound2: this.props.judge.atRound2,\n            atRound3: this.props.judge.atRound3,\n            trashFill: false\n        }\n\n        this.handleJudgeNameEdit = this.handleJudgeNameEdit.bind(this);\n        this.handleJudgeNameUpdate = this.handleJudgeNameUpdate.bind(this);\n        this.handleJudgeToggle = this.handleJudgeToggle.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n    }\n\n    handleJudgeNameEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({name: event.target.value});\n    }\n\n    handleJudgeNameUpdate(event: FocusEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        const name = this.state.name;\n        const judge = this.props.judge;\n        judge.name = name;\n        this.props.updateJudge(judge);\n    }\n\n    handleJudgeToggle(event: ChangeEvent<HTMLInputElement>) {\n        const name: keyof Judge = event.target.name;\n        const checked = event.target.checked;\n        const judge = this.props.judge;\n\n        judge[name] = checked;\n        this.setState({[name]: checked});\n\n        this.props.updateJudge(judge);\n    }\n\n    trashOnMouseEnter() {\n        this.setState({trashFill: true});\n    }\n\n    trashOnMouseLeave() {\n        this.setState({trashFill: false});\n    }\n\n    \n    render() {\n        const judge = this.props.judge;\n\n        return (\n            <tr>\n                <td className=\"judge-table-name editable\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        rows={1}\n                        cols={25}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.name}\n                        onChange={this.handleJudgeNameEdit}\n                        onBlur={this.handleJudgeNameUpdate} />\n                </td>\n                <td className=\"judge-table-school\">{judge.school}</td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-canchair-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"canChair\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.canChair}\n                        className={this.state.canChair ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r1-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound1\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound1}\n                        className={this.state.atRound1 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r2-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound2\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound2}\n                        className={this.state.atRound2 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r3-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound3\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound3}\n                        className={this.state.atRound3 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"table-delete\">\n                    {this.state.trashFill ? \n                        <TrashFill\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteJudge(judge)} />\n                        :\n                        <Trash\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteJudge(judge)} />\n                    }\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default JudgeRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Judges.scss';\nimport JudgeRow from './JudgeRow';\nimport { Judge } from '../types/Judge';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { AwardFill, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgesProps = {\n    judges: Judge[],\n    updateJudges: (judges: Judge[]) => void,\n    getTotalTeams: () => number\n}\n\ntype JudgesState = {\n    addJudgeForm: {\n        judgeName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Judges extends React.Component<JudgesProps, JudgesState> {\n    constructor(props: JudgesProps) {\n        super(props);\n\n        this.state = {\n            addJudgeForm: {\n                judgeName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddJudgeFormChange = this.handleAddJudgeFormChange.bind(this);\n        this.handleAddJudgeFormSubmit = this.handleAddJudgeFormSubmit.bind(this);\n        this.updateJudge = this.updateJudge.bind(this);\n        this.deleteJudge = this.deleteJudge.bind(this);\n    }\n\n\n    handleAddJudgeFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const {name, value} = event.target;\n        let judgeAddFormState = {...this.state.addJudgeForm};\n        judgeAddFormState[name] = value;\n        this.setState({addJudgeForm: judgeAddFormState});\n    }\n\n    handleAddJudgeFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let judges = this.props.judges;\n        let counter = JSON.parse(localStorage.getItem(\"judgeCounter\")!);\n\n        const newJudge: Judge = {\n            judgeID: counter++,\n            name: this.state.addJudgeForm.judgeName,\n            school: this.state.addJudgeForm.school,\n            canChair: false,\n            atRound1: true, atRound2: true, atRound3: true,\n            hasChaired: []\n        }\n        judges.push(newJudge);\n\n        this.props.updateJudges(judges);\n        localStorage.setItem(\"judgeCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addJudgeForm};\n        blankForm.name = \"\";\n        this.setState({addJudgeForm: blankForm});\n    }\n\n    updateJudge(judge: Judge) {\n        let judges = this.props.judges;\n\n        const index = judges.indexOf(judge);\n        judges[index] = judge;\n\n        this.props.updateJudges(judges);\n    }\n\n    deleteJudge(judge: Judge) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        \n        // Check if the judge has already been part of a round\n        let inRound = false;\n        for (const round of draws) {\n            for(const pair of round.roomsOne) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n            for(const pair of round.roomsTwo) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n        }\n        if(inRound) {\n            alert(\"This judge has already taken part in a round. You can't delete them anymore. You can still change their availability for each round.\");\n            return false;\n        }\n\n        // Confirm deletion\n        const conf = window.confirm(`Are you sure you want to delete judge ${judge.name}?`);\n        if(conf) {\n            let judges = this.props.judges;\n\n            const index = judges.indexOf(judge);\n            judges.splice(index, 1);\n\n            this.props.updateJudges(judges);\n        }\n    }\n\n\n    render() {\n        const judges = this.props.judges;\n\n        let table;\n        if(this.props.judges.length !== 0) {\n            table = (\n                <Table className=\"judge-table table-no-top-margin\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"judge-table-name\">Name</th>\n                            <th>School</th>\n                            <th className=\"judge-table-toggle\">Chair?</th>\n                            <th className=\"judge-table-toggle\">Round 1?</th>\n                            <th className=\"judge-table-toggle\">Round 2?</th>\n                            <th className=\"judge-table-toggle\">Round 3?</th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.judges.map(judge => {\n                            return (\n                                <JudgeRow\n                                    key={`judge-row-${judge.name}`}\n                                    judge={judge}\n                                    updateJudge={this.updateJudge}\n                                    deleteJudge={this.deleteJudge} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n        }\n\n        const totalRooms = Math.round(this.props.getTotalTeams() / 2);\n        const chairsR1 = judges.filter(el => el.canChair && el.atRound1).length;\n        const chairsR2 = judges.filter(el => el.canChair && el.atRound2).length;\n        const chairsR3 = judges.filter(el => el.canChair && el.atRound3).length;\n\n        return (\n            <Tab.Container id={`judges-view`} defaultActiveKey=\"judges\">\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"no-show-sm\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" className=\"sub-nav-link\">\n                                    <AwardFill className=\"btn-icon\" />\n                                    Judges\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"judges\">\n                                <Row>\n                                    <Col>\n                                        <h2>Judges</h2>\n                                        <Form onSubmit={this.handleAddJudgeFormSubmit}>\n                                            <Form.Row>\n                                                <Col md={4}>\n                                                    <Form.Control\n                                                        name=\"judgeName\"\n                                                        type=\"text\"\n                                                        placeholder=\"Name\"\n                                                        value={this.state.addJudgeForm.judgeName}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col md={4}>\n                                                    <Form.Control\n                                                        name=\"school\"\n                                                        type=\"text\"\n                                                        placeholder=\"School\"\n                                                        value={this.state.addJudgeForm.school}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col>\n                                                    <Button\n                                                        variant=\"primary\"\n                                                        className=\"btn-submit\"\n                                                        type=\"submit\">\n                                                        Add judge\n                                                    </Button>\n                                                </Col>\n                                            </Form.Row>\n                                        </Form>\n                                        <div id=\"total-judges\">\n                                            <p>\n                                                Total judges each round: {this.props.judges.filter(el => el.atRound1).length} &middot; {this.props.judges.filter(el => el.atRound2).length} &middot; {this.props.judges.filter(el => el.atRound3).length}\n                                                <br />\n                                                Total chairs each round: {chairsR1} &middot; {chairsR2} &middot; {chairsR3}\n                                                <br />\n                                                <span className={(totalRooms > chairsR1 || totalRooms > chairsR2 || totalRooms > chairsR3) ? \"red\" : \"\"}>\n                                                    Total chairs needed: {totalRooms}\n                                                </span>\n                                            </p>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col lg={10} xl={9} className=\"table-col\">\n                                        {table}\n                                    </Col>\n                                </Row>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Judges;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './JudgePill.scss';\nimport { Judge } from '../types/Judge';\nimport { Room } from '../types/Room';\nimport { Draw } from '../types/Draw';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype JudgePillProps = {\n    judge: Judge,\n    isChair: boolean,\n    hasConflict: boolean,\n    room: Room,\n    draw: Draw,\n    updateRoom: (room: Room, judgeID: number, isChair: boolean, newRoomName: string) => void\n}\n\ntype JudgePillState = {\n    roomName: string\n}\n\nclass JudgePill extends React.Component<JudgePillProps, JudgePillState> {\n    constructor(props: JudgePillProps) {\n        super(props);\n\n        this.state = {\n            roomName: this.props.room.name\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({roomName: event.target.value});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.room, this.props.judge.judgeID, this.props.isChair, this.state.roomName);\n        document.body.click();\n    }\n\n\n    render() {\n        const popover = (\n            <Popover id=\"judgepill-popover\">\n                <Popover.Title as=\"h3\">Switch rooms</Popover.Title>\n                <Popover.Content>\n                    {(this.props.draw.roomsOne.map(room => room.name).includes(\"\") ||\n                      this.props.draw.roomsTwo.map(room => room.name).includes(\"\") )\n                        ?\n                        <p>You need to assign each round to a room before you can switch judges.</p>\n                        :\n                        <Form onSubmit={this.handleRoomFormSubmit}>\n                            {this.props.draw.roomsOne.map((room, index) => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${index}`}\n                                        id={`room-check-${Math.floor(Math.random() * 1000000)}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.name}\n                                        checked={this.state.roomName === room.name}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            {this.props.draw.roomsTwo.map((room, index) => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${index}`}\n                                        id={`room-check-${Math.floor(Math.random() * 1000000)}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.name}\n                                        checked={this.state.roomName === room.name}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">Change</Button>\n                        </Form>}\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                <div className={`judgepill ${this.props.hasConflict ? \"red\" : \"\"}`}>\n                    {this.props.judge.name}{this.props.isChair ? \"\\u00A9\" : \"\"}\n                </div>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default JudgePill;","import React, { ChangeEvent } from 'react';\nimport JudgePill from './JudgePill';\nimport { Room } from '../types/Room';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\n\n\ntype RoundRowProps = {\n    room: Room,\n    div: number,\n    round: number,\n    speakers: Speaker[],\n    teams: Team[],\n    judges: Judge[],\n    draw: Draw,\n    updateRooms: (room: Room, div: number) => void\n}\n\ntype RoundRowState = {\n    roomName: string\n}\n\nclass RoundRow extends React.Component<RoundRowProps, RoundRowState> {\n    constructor(props: RoundRowProps) {\n        super(props);\n\n        this.state = {\n            roomName: this.props.room.name\n        }\n\n        this.handleRoomChange = this.handleRoomChange.bind(this);\n        this.updateRoom = this.updateRoom.bind(this);\n    }\n\n    componentDidUpdate(prevProps: RoundRowProps) {\n        if(this.props.room.name !== prevProps.room.name) {\n            this.setState({roomName: this.props.room.name});\n        }\n    }\n\n\n    handleRoomChange(event: ChangeEvent<HTMLTextAreaElement>) {\n        const value = event.target.value;\n        const room = this.props.room;\n        this.setState({roomName: value});\n        room.name = value;\n        this.props.updateRooms(room, this.props.div);\n    }\n\n    updateRoom(room: Room, judgeID: number, isChair: boolean, newRoomName: string) {\n        let draw = this.props.draw;\n        const roomlistOne = draw.roomsOne.map(r => r.name);\n        const nextDiv = roomlistOne.includes(newRoomName) ? 1 : 2;\n\n        let rooms;\n        if(nextDiv === 1) {\n            rooms = draw.roomsOne;\n        } else {\n            rooms = draw.roomsTwo;\n        }\n        const newPair = rooms.findIndex(r => r.name === newRoomName);\n\n        if(!isChair) {\n            rooms[newPair].wings.push(judgeID);\n            const oldIndex = room.wings.indexOf(judgeID);\n            room.wings.splice(oldIndex, 1);\n        } else {\n            const swapChair = rooms[newPair].chair;\n            if(swapChair === judgeID) return false;\n            const conf = window.confirm(`You are about to swap the chairs ${this.props.judges.find(j => j.judgeID === judgeID)!.name} and ${this.props.judges.find(j => j.judgeID === swapChair)!.name}. Do you wish to continue?`);\n            if(conf) {\n                rooms[newPair].chair = judgeID;\n                room.chair = swapChair;\n            } else return false;\n        }\n        this.props.updateRooms(rooms[newPair], nextDiv);\n        this.props.updateRooms(room, this.props.div);\n    }\n\n\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n        const judges = this.props.judges;\n        const room = this.props.room;\n        const round = this.props.round;\n\n        const prop = teams.find(el => el.teamID === room.prop)!;\n        const opp = teams.find(el => el.teamID === room.opp)!;\n        const chair = judges.find(el => el.judgeID === room.chair)!;\n\n        // Look for institutional judge conflicts\n        let chairConflict = false;\n        let speakersInTeams: Speaker[] = [];\n        if(round === 1) {\n            prop.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else if(round === 2) {\n            prop.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else {\n            prop.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        }\n        let speakerSchools: string[] = [];\n        speakersInTeams\n            .filter(sp => sp !== undefined)\n            .forEach(sp => speakerSchools.push(sp.school));\n        if(speakerSchools.includes(chair.school)) chairConflict = true;\n\n        // Check whether the teams have met before\n        let team_conflict = false;\n        if(round === 2) {\n            if(prop.opponents[0] === opp.teamID) team_conflict = true;\n        }\n        if(round === 3) {\n            if(prop.opponents[0] === opp.teamID || prop.opponents[1] === opp.teamID) team_conflict = true;\n        }\n\n\n        return (\n            <tr>\n                <td className=\"editable draw-table-room-cell\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        rows={1}\n                        cols={12}\n                        autoComplete=\"off\"\n                        placeholder=\"room\"\n                        value={this.state.roomName}\n                        onChange={this.handleRoomChange} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <span className={team_conflict ? \"orange\" : \"\"}>\n                        {prop.name}\n                    </span>\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <span className={team_conflict ? \"orange\" : \"\"}>\n                        {opp.name}\n                    </span>\n                </td>\n                <td>\n                    <div className=\"judgepill-container\">\n                        <JudgePill\n                            judge={chair}\n                            isChair={true}\n                            hasConflict={chairConflict}\n                            room={room}\n                            draw={this.props.draw}\n                            updateRoom={this.updateRoom} />\n                    </div>\n                    {room.wings.length !== 0 ? \",\\u00A0\" : \"\"}\n                    {room.wings.map((el, index) => {\n                        let wing = judges.find(j => j.judgeID === el)!;\n                        return (\n                            <div key={`judgepil-${index}`} className=\"judgepill-container\">\n                                <JudgePill\n                                    judge={wing}\n                                    isChair={false}\n                                    hasConflict={speakerSchools.includes(wing.school)}\n                                    room={room}\n                                    draw={this.props.draw}\n                                    updateRoom={this.updateRoom} />\n                                {index < room.wings.length - 1 ? \",\\u00A0\" : \"\"}\n                            </div>\n                        );\n                    })}\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default RoundRow;","import React from 'react';\nimport './Round.scss';\nimport RoundRow from './RoundRow';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport { Room } from '../types/Room';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport { Bullseye, ArrowRepeat, ArrowsAngleExpand } from 'react-bootstrap-icons';\n\n\ntype RoundProps = {\n    round: number,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\ntype RoundState = {\n    generated: boolean,\n    roomsOne: Room[],\n    roomsTwo: Room[],\n    fullScreen: boolean\n}\n\nclass Round extends React.Component<RoundProps, RoundState> {\n    constructor(props: RoundProps) {\n        super(props);\n\n        const pairings = this.props.draws[this.props.round - 1];\n\n        this.state = {\n            generated: pairings.generated,\n            roomsOne: pairings.roomsOne,\n            roomsTwo: pairings.roomsTwo,\n            fullScreen: false\n        }\n\n        this.generateDraw = this.generateDraw.bind(this);\n        this.updateRooms = this.updateRooms.bind(this);\n        this.fullScreenDraw = this.fullScreenDraw.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n    }\n\n\n    generateDraw() {\n        const round = this.props.round;\n        let draws = this.props.draws;\n\n        // Check whether previous or next draws have happened\n        if(round === 1) {\n            if(draws[1].generated === true || draws[2].generated === true) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 2) {\n            if(draws[0].generated !== true) {\n                alert(\"You can't generate the draw for round 2 before generating the draw for round 1.\");\n                return false;\n            } else if(draws[2].generated === true) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 3) {\n            if(draws[0].generated !== true || draws[1].generated !== true) {\n                alert(\"You can't generate the draw for round 3 before generating the draws for rounds 1 and 2.\");\n                return false;\n            }\n        }\n\n        // Check if regenerating\n        if(this.state.generated) {\n            const confGen = window.confirm(\"Do you really want to regenerate the draw?\");\n            if(!confGen) {\n                return false;\n            }\n        }\n\n        // Initialize values\n        let teamsOne = this.props.teamsOne;\n        let teamsTwo = this.props.teamsTwo;\n        let judges = this.props.judges;\n        const len1 = teamsOne.length;\n        const len2 = teamsTwo.length;\n\n        // Don't run the draw if division one has no teams\n        if(len1 === 0) {\n            alert(\"Add some teams to generate the draw.\");\n            return;\n        }\n\n        // Check for an even number of teams\n        if(len1 % 2 !== 0 && len2 % 2 !== 0) {\n            alert(\"Both divisions have an odd number of teams. A team from one division debating a team from the other division is not currently supported. Please add or remove a team to/from both in order to continue.\")\n            return false;\n        } else if(len1 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![0]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        } else if(len2 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![1]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        }\n\n        // Select only the judges that are available this round\n        if(round === 1) {\n            judges = judges.filter(el => el.atRound1 === true);\n        } else if(round === 2) {\n            judges = judges.filter(el => el.atRound2 === true);\n        } else {\n            judges = judges.filter(el => el.atRound3 === true);\n        }\n\n        // Split chairs and wings\n        const chairs = judges.filter(el => el.canChair === true);\n        let wings = judges.filter(el => el.canChair === false);\n\n        // Check whether there are enough chairs\n        const totalTeams = len1 + len2;\n        if(chairs.length < totalTeams / 2) {\n            alert(\"There are not enough chairs to adjudicate every room. Please add some more.\");\n            return false;\n        }\n\n        // Shuffle chairs for random picking\n        for (let i = chairs.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [chairs[i], chairs[j]] = [chairs[j], chairs[i]];\n        }\n\n        // Select chairs and put the rest as wings\n        while(chairs.length > totalTeams / 2) {\n            wings.push(chairs.pop()!);\n        }\n\n        // Generate pairings\n        let roomCounter = JSON.parse(localStorage.getItem(\"roomCounter\")!);\n        let roomsOne = [];\n        let roomsTwo = [];\n        let t1 = teamsOne.slice(0);\n        let t2 = teamsTwo.slice(0);\n\n        if(round === 1) {\n            // Generate lists of teams in random order\n            for (let i = len1 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t1[i], t1[j]] = [t1[j], t1[i]];\n            }\n            for (let i = len2 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t2[i], t2[j]] = [t2[j], t2[i]];\n            }\n        } else {\n            // Generate lists of teams in order of team wins, then total team points\n            t1.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n            t2.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n        }\n\n        // For round 2, make sure everyone is on another side\n        if(round === 2) {\n            t1.forEach((team, index) => {\n                if(index % 2 === 0 && team.sideRound1 === \"prop\") {\n                    for(let i = index + 1; i < len1; i++) {\n                        if(t1[i].sideRound1 === \"opp\") {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && team.sideRound1 === \"opp\") {\n                    for(let i = index + 1; i < len1; i++) {\n                        if(t1[i].sideRound1 === \"prop\") {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n            t2.forEach((team, index) => {\n                if(index % 2 === 0 && team.sideRound1 === \"prop\") {\n                    for(let i = index + 1; i < len2; i++) {\n                        if(t2[i].sideRound1 === \"opp\") {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && team.sideRound1 === \"opp\") {\n                    for(let i = index + 1; i < len2; i++) {\n                        if(t2[i].sideRound1 === \"prop\") {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n\n        // For round 3, make sure teams don't get the same opponent\n        // CURRENTLY MAKES THE DRAW CRASH <3\n        // if(round === 3) {\n        //     for(let i = 0; i < t1.length; i += 2) {\n        //         if(t1[i].opponents[1] === t1[i + 1].teamID) {\n        //             [t1[i], t1[i - 1]] = [t1[i - 1], t1[i]];\n        //             break;\n        //         }\n        //     }\n        //     for(let i = 1; i < t2.length; i += 2) {\n        //         if(t2[i].opponents[1] === t2[i + 1].teamID) {\n        //             [t2[i], t2[i - 1]] = [t2[i - 1], t2[i]];\n        //             break;\n        //         }\n        //     }\n        // }\n\n        // Distribute teams and chairs\n        let currProp, currOpp, currChair;\n        for (let i = 0; i < len1; i += 2) {\n            if(round === 1) {\n                t1[i].sideRound1 = \"prop\";\n                t1[i + 1].sideRound1 = \"opp\";\n            }\n\n            currProp = t1[i].teamID;\n            currOpp = t1[i + 1].teamID;\n\n            t1[i].opponents[round - 1] = currOpp;\n            t1[i + 1].opponents[round - 1] = currProp;\n\n            currChair = chairs.pop()!.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currProp,\n                opp: currOpp,\n                chair: currChair,\n                wings: []\n            }\n            roomsOne[i / 2] = newRoom;\n        }\n        for (let i = 0; i < len2; i += 2) {\n            if(round === 1) {\n                t2[i].sideRound1 = \"prop\";\n                t2[i + 1].sideRound1 = \"opp\";\n            }\n\n            currProp = t2[i].teamID;\n            currOpp = t2[i + 1].teamID;\n\n            t2[i].opponents[round - 1] = currOpp;\n            t2[i + 1].opponents[round - 1] = currProp;\n\n            currChair = chairs.pop()!.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currProp,\n                opp: currOpp,\n                chair: currChair,\n                wings: []\n            }\n            roomsTwo[i / 2] = newRoom;\n        }\n\n        // Add wings\n        while(wings.length > 0) {\n            for (let i = 0; i < roomsOne.length; i++) {\n                roomsOne[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n            if(wings.length === 0) {\n                break;\n            }\n            for (let i = 0; i < roomsTwo.length; i++) {\n                roomsTwo[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n        }\n\n        // Randomize row order\n        for (let i = roomsOne.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsOne[i], roomsOne[j]] = [roomsOne[j], roomsOne[i]];\n        }\n        for (let i = roomsTwo.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsTwo[i], roomsTwo[j]] = [roomsTwo[j], roomsTwo[i]];\n        }\n\n        // Save in storage\n        const drawr: Draw = {\n            generated: true,\n            roomsOne: roomsOne,\n            roomsTwo: roomsTwo\n        }\n        if(round === 1) {\n            draws[0] = drawr;\n        } else if(round === 2) {\n            draws[1] = drawr;\n        } else {\n            draws[2] = drawr;\n        }\n        localStorage.setItem(\"draws\", JSON.stringify(draws));\n\n        // Update team values\n        t1.forEach(team => {\n            const i = teamsOne.indexOf(team);\n            teamsOne[i] = team;\n        });\n        localStorage.setItem(\"teams_one\", JSON.stringify(teamsOne));\n        t2.forEach(team => {\n            const i = teamsTwo.indexOf(team);\n            teamsTwo[i] = team;\n        });\n        localStorage.setItem(\"teams_two\", JSON.stringify(teamsTwo));\n\n        // Update local state\n        this.setState({roomsOne: roomsOne});\n        this.setState({roomsTwo: roomsTwo});\n        this.setState({generated: true});\n\n        localStorage.setItem(\"roomCounter\", JSON.stringify(roomCounter));\n    }\n\n\n    updateRooms(room: Room, div: number) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        let rooms;\n        if(div === 1) {\n            rooms = this.state.roomsOne;\n        } else {\n            rooms = this.state.roomsTwo;\n        }\n\n        const index = rooms.indexOf(room);\n        rooms[index] = room;\n\n        if(div === 1) {\n            this.setState({roomsOne: rooms});\n            draws[this.props.round - 1].roomsOne = rooms;\n        } else {\n            this.setState({roomsTwo: rooms});\n            draws[this.props.round - 1].roomsTwo = rooms;\n        }\n        localStorage.setItem(\"draws\", JSON.stringify(draws));\n    }\n\n\n    fullScreenDraw() {\n        this.setState({fullScreen: true});\n        document.documentElement.requestFullscreen();\n    }\n\n    modalHide() {\n        this.setState({fullScreen: false});\n        if(document.fullscreenElement !== null) {\n            document.exitFullscreen();\n        }\n    }\n\n\n    render() {\n        let tables;\n        if(!this.state.generated) {\n            tables = <div className=\"draw-placeholder\"></div>;\n        } else {\n            tables = (\n                <div>\n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![0] : \"Draw\"}</h3>\n                    <Table className=\"table-no-top-margin draw-table-one\" hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roomsOne.map((room, index) => {\n                                    return <RoundRow \n                                            key={`one-room-${index}`}\n                                            room={room}\n                                            div={1}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersOne}\n                                            teams={this.props.teamsOne}\n                                            judges={this.props.judges}\n                                            draw={this.props.draws[this.props.round - 1]}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                    \n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![1] : \"\"}</h3>\n                    <Table className={`table-no-top-margin ${this.props.config.numDivisions === 1 ? \"hidden\" : \"\"}`} hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roomsTwo.map((room, index) => {\n                                    return <RoundRow \n                                            key={`two-room-${index}`}\n                                            room={room}\n                                            div={2}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersTwo}\n                                            teams={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draw={this.props.draws[this.props.round - 1]}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <Row className=\"draw-header\">\n                    <Col>\n                        <h2>Round {this.props.round}</h2>\n                        <Button\n                            onClick={this.generateDraw}\n                            className={this.state.generated ? \"hidden\" : \"\"}>\n                            <Bullseye className=\"btn-icon\"/>\n                            Generate draw\n                        </Button>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={this.generateDraw}\n                            className={!this.state.generated ? \"hidden\" : \"\"}>\n                            <ArrowRepeat className=\"btn-icon\" />\n                            Regenerate draw\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.fullScreenDraw}\n                            className={!this.state.generated ? \"hidden\" : \"\"}>\n                            <ArrowsAngleExpand className=\"btn-icon\" />\n                            Display fullscreen\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={10} xl={9} className=\"table-col\">\n                        {tables}\n                    </Col>\n                </Row>\n\n                <Modal\n                    show={this.state.fullScreen}\n                    onHide={this.modalHide}\n                    backdrop=\"static\"\n                    size=\"xl\"\n                    className=\"draw-modal\"\n                    dialogClassName=\"draw-modal-dialog\"\n                    backdropClassName=\"draw-modal-backdrop\">\n                    <Modal.Header closeButton>\n                        Draw Round {this.props.round}\n                    </Modal.Header>\n                    <Modal.Body>\n                        {tables}\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Round;","import React from 'react';\nimport Round from './Round';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { CircleHalf } from 'react-bootstrap-icons';\n\n\ntype DrawsProps = {\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nclass Draws extends React.Component<DrawsProps> {\n    render() {\n        return (\n            <Tab.Container id={`draw-view`} defaultActiveKey=\"round-1\">\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\">\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Nav.Item key={`draw-nav-${round}`}>\n                                        <Nav.Link eventKey={`round-${round}`} className=\"sub-nav-link\">\n                                            <CircleHalf className=\"btn-icon\" />\n                                            Round {round}\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                );\n                            })}\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Tab.Pane key={`draw-pane-${round}`} eventKey={`round-${round}`}>\n                                        <Round\n                                            round={round}\n                                            config={this.props.config}\n                                            speakersOne={this.props.speakersOne}\n                                            speakersTwo={this.props.speakersTwo}\n                                            teamsOne={this.props.teamsOne}\n                                            teamsTwo={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws} />\n                                    </Tab.Pane>\n                                )\n                            })}\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Draws;","import React from 'react';\nimport './App.scss';\nimport logo from './images/logo.svg';\nimport pkg from '../package.json';\nimport SetupScreen from './setup/SetupScreen';\nimport Home from './home/Home';\nimport Participants from './participants/Participants';\nimport Judges from './judges/Judges';\nimport Draws from './draws/Draws';\nimport { Speaker } from './types/Speaker';\nimport { Team } from './types/Team';\nimport { Judge } from './types/Judge';\nimport { Draw } from './types/Draw';\nimport { Config } from './types/Config';\nimport Container from 'react-bootstrap/Container';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Collapse from 'react-bootstrap/Collapse';\nimport { List } from 'react-bootstrap-icons';\n\n\ntype AppProps = {}\n\ntype AppState = {\n    showMenu: boolean,\n    init: boolean,\n    tournamentName: string,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nconst s = JSON.stringify;\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        if(!localStorage.getItem(\"init\")) {\n            localStorage.setItem(\"init\", s(false));\n        }\n        if(!localStorage.getItem(\"tournamentName\")) {\n            localStorage.setItem(\"tournamentName\", s(\"New tournament\"));\n        }\n        if(!localStorage.getItem(\"config\")) {\n            localStorage.setItem(\"config\", s({version: pkg.version, numDivisions: 0}));\n        }\n        if(!localStorage.getItem(\"speakersOne\")) {\n            localStorage.setItem(\"speakersOne\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsOne\")) {\n            localStorage.setItem(\"teamsOne\", s([]));\n        }\n        if(!localStorage.getItem(\"speakersTwo\")) {\n            localStorage.setItem(\"speakersTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsTwo\")) {\n            localStorage.setItem(\"teamsTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"speakerCounter\")) {\n            localStorage.setItem(\"speakerCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"teamCounter\")) {\n            localStorage.setItem(\"teamCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"judges\")) {\n            localStorage.setItem(\"judges\", s([]));\n        }\n        if(!localStorage.getItem(\"judgeCounter\")) {\n            localStorage.setItem(\"judgeCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"draws\")) {\n            localStorage.setItem(\"draws\", s([\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []}\n            ]));\n        }\n        if(!localStorage.getItem(\"roomCounter\")) {\n            localStorage.setItem(\"roomCounter\", s(0));\n        }\n\n        this.state = {\n            showMenu: false,\n            init: JSON.parse(localStorage.getItem(\"init\")!),\n            tournamentName: JSON.parse(localStorage.getItem(\"tournamentName\")!),\n            config: JSON.parse(localStorage.getItem(\"config\")!),\n            speakersOne: JSON.parse(localStorage.getItem(\"speakersOne\")!),\n            speakersTwo: JSON.parse(localStorage.getItem(\"speakersTwo\")!),\n            teamsOne: JSON.parse(localStorage.getItem(\"teamsOne\")!),\n            teamsTwo: JSON.parse(localStorage.getItem(\"teamsTwo\")!),\n            judges: JSON.parse(localStorage.getItem(\"judges\")!),\n            draws: JSON.parse(localStorage.getItem(\"draws\")!)\n        }\n\n        this.toggleMenu = this.toggleMenu.bind(this);\n\n        this.updateStorage = this.updateStorage.bind(this);\n        this.updateTournamentName = this.updateTournamentName.bind(this);\n        this.updateInit = this.updateInit.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n        this.updateSpeakersOne = this.updateSpeakersOne.bind(this);\n        this.updateSpeakersTwo = this.updateSpeakersTwo.bind(this);\n        this.updateTeamsOne = this.updateTeamsOne.bind(this);\n        this.updateTeamsTwo = this.updateTeamsTwo.bind(this);\n        this.updateJudges = this.updateJudges.bind(this);\n\n        this.initializeTournament = this.initializeTournament.bind(this);\n        this.importTournament = this.importTournament.bind(this);\n        this.getTotalTeams = this.getTotalTeams.bind(this);\n\n        document.title = `${JSON.parse(localStorage.getItem(\"tournamentName\")!)} - TacoTab`;\n    }\n\n\n    // Toggle menu\n    toggleMenu() {\n        if(this.state.showMenu) {\n            this.setState({ showMenu: false });\n        } else {\n            this.setState({ showMenu: true });\n        }\n    }\n\n\n    // Global methods to update local storage and state\n    updateStorage = (key: string) => {\n        return (value: any) => {\n            localStorage.setItem(key, JSON.stringify(value));\n            this.setState<never>({ [key]: value })\n        }\n    };\n\n    updateTournamentName = (name: string) => {\n        this.updateStorage(\"tournamentName\")(name)\n        document.title = `${name} - TacoTab`;\n    }\n\n    updateInit = this.updateStorage(\"init\");\n    updateConfig = this.updateStorage(\"config\");\n    updateSpeakersOne = this.updateStorage(\"speakersOne\");\n    updateSpeakersTwo = this.updateStorage(\"speakersTwo\");\n    updateTeamsOne = this.updateStorage(\"teamsOne\");\n    updateTeamsTwo = this.updateStorage(\"teamsTwo\");\n    updateJudges = this.updateStorage(\"judges\");\n\n\n    // Global helper methods\n    initializeTournament = (\n        tournamentName: string,\n        numDivisions: number,\n        divisionNames: string[]) => {\n\n            this.updateTournamentName(tournamentName);\n            \n            let config: Config = {\n                version: pkg.version,\n                numDivisions: numDivisions\n            }\n            if(numDivisions !== 1) {\n                config.divisionNames = [...divisionNames];\n            }\n            this.updateConfig(config);\n\n            this.updateInit(true);\n    }\n\n    importTournament = (files: FileList) => {\n        if(files.length <= 0) return false;\n\n        const fr = new FileReader();\n        fr.onload = event => {\n            const result = JSON.parse(event.target!.result as string);\n\n            localStorage.setItem(\"init\", s(result.init));\n            // COMPATIBILITY WITH EXPORTS BEFORE VERSION 0.3.0\n            if(!result.config.version) {\n                localStorage.setItem(\"tournamentName\", s(result.tournament_name));\n\n                let importConfig = result.config;\n                importConfig.version = this.state.config.version;\n                if(importConfig.divisions === \"1\") {\n                    importConfig.numDivisions = 1\n                } else {\n                    importConfig.numDivisions = 2\n                }\n                delete importConfig.divisions\n                localStorage.setItem(\"config\", s(importConfig));\n\n                let importSpeakersOne = result.speakers_one.map((speaker: any) => {\n                    let newSpeaker = {\n                        ...speaker,\n                        speakerID: speaker.debaterID\n                    }\n                    delete newSpeaker.debaterID\n                    return newSpeaker\n                });\n                localStorage.setItem(\"speakersOne\", s(importSpeakersOne));\n\n                let importTeamsOne = result.teams_one.map((team: any) => {\n                    let newTeam = {\n                        ...team,\n                        name: team.teamName,\n                        round1: team.round1.map((sp: string) => parseInt(sp)),\n                        round2: team.round2.map((sp: string) => parseInt(sp)),\n                        round3: team.round2.map((sp: string) => parseInt(sp)),\n                        sideRound1: team.sideR1\n                    }\n                    delete newTeam.teamName\n                    delete newTeam.sideR1\n                    return newTeam\n                });\n                localStorage.setItem(\"teamsOne\", s(importTeamsOne));\n\n                let importSpeakersTwo = result.speakers_two.map((speaker: any) => {\n                    let newSpeaker = {\n                        ...speaker,\n                        speakerID: speaker.debaterID\n                    }\n                    delete newSpeaker.debaterID\n                    return newSpeaker\n                });\n                localStorage.setItem(\"speakersTwo\", s(importSpeakersTwo));\n\n                let importTeamsTwo = result.teams_two.map((team: any) => {\n                    let newTeam = {\n                        ...team,\n                        name: team.teamName,\n                        round1: team.round1.map((sp: string) => parseInt(sp)),\n                        round2: team.round2.map((sp: string) => parseInt(sp)),\n                        round3: team.round2.map((sp: string) => parseInt(sp)),\n                        sideRound1: team.sideR1\n                    }\n                    delete newTeam.teamName\n                    delete newTeam.sideR1\n                    return newTeam\n                });\n                localStorage.setItem(\"teamsTwo\", s(importTeamsTwo));\n\n                localStorage.setItem(\"speakerCounter\", s(result.speakers_counter));\n                localStorage.setItem(\"teamCounter\", s(result.teams_counter));\n\n                let importJudges = result.judges.map((judge: any) => {\n                    let newJudge = {\n                        ...judge,\n                        atRound1: judge.r1,\n                        atRound2: judge.r2,\n                        atRound3: judge.r3\n                    }\n                    delete newJudge.r1\n                    delete newJudge.r2\n                    delete newJudge.r3\n                    return newJudge\n                });\n                localStorage.setItem(\"judges\", s(importJudges));\n\n                localStorage.setItem(\"judgeCounter\", s(result.judges_counter));\n\n                let roomCounter = 0;\n                let importDraws = result.draws.map((draw: any) => {\n                    let newDraw = {\n                        ...draw,\n                        roomsOne: draw.pairings_one.map((pairing: any) => {\n                            let newRoom = {\n                                ...pairing,\n                                roomID: roomCounter++,\n                                name: pairing.room\n                            }\n                            delete newRoom.room\n                            return newRoom\n                        }),\n                        roomsTwo: draw.pairings_two.map((pairing: any) => {\n                            let newRoom = {\n                                ...pairing,\n                                roomID: roomCounter++,\n                                name: pairing.room\n                            }\n                            delete newRoom.room\n                            return newRoom\n                        })\n                    }\n                    delete newDraw.pairings_one\n                    delete newDraw.pairings_two\n                    return newDraw\n                });\n                localStorage.setItem(\"draws\", s(importDraws));\n                localStorage.setItem(\"roomCounter\", s(roomCounter));\n\n            // CURRENT EXPORTS\n            } else {\n                localStorage.setItem(\"tournamentName\", s(result.tournamentName));\n                localStorage.setItem(\"config\", s(result.config));\n                localStorage.setItem(\"speakersOne\", s(result.speakersOne));\n                localStorage.setItem(\"teamsOne\", s(result.teamsOne));\n                localStorage.setItem(\"speakersTwo\", s(result.speakersTwo));\n                localStorage.setItem(\"teamsTwo\", s(result.teamsTwo));\n                localStorage.setItem(\"speakerCounter\", s(result.speakerCounter));\n                localStorage.setItem(\"teamCounter\", s(result.teamCounter));\n                localStorage.setItem(\"judges\", s(result.judges));\n                localStorage.setItem(\"judgeCounter\", s(result.judgeCounter));\n                localStorage.setItem(\"draws\", s(result.draws));\n                localStorage.setItem(\"roomCounter\", s(result.roomCounter));\n            }\n\n        }\n        fr.readAsText(files.item(0) as File);\n\n        window.location.reload();\n    }\n\n    getTotalTeams() {\n        return this.state.teamsOne.length + this.state.teamsTwo.length;\n    }\n\n\n\n    render() {\n        let participants_nav, participants_panes;\n        if(this.state.config.numDivisions !== 2) {\n            participants_nav = (\n                <Nav.Item>\n                    <Nav.Link eventKey=\"participants\">Participants</Nav.Link>\n                </Nav.Item>\n            );\n            participants_panes = (\n                <Tab.Pane eventKey=\"participants\">\n                    <Participants\n                        div={1}\n                        speakers={this.state.speakersOne}\n                        teams={this.state.teamsOne}\n                        updateSpeakers={this.updateSpeakersOne}\n                        updateTeams={this.updateTeamsOne} />\n                </Tab.Pane>\n            );\n        } else {\n            participants_nav = (\n                <>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divone\">{this.state.config.divisionNames![0]}</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divtwo\">{this.state.config.divisionNames![1]}</Nav.Link>\n                    </Nav.Item>\n                </>\n            );\n            participants_panes = (\n                <>\n                    <Tab.Pane eventKey=\"divone\">\n                        <Participants\n                            div={1}\n                            speakers={this.state.speakersOne}\n                            teams={this.state.teamsOne}\n                            updateSpeakers={this.updateSpeakersOne}\n                            updateTeams={this.updateTeamsOne} />\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"divtwo\">\n                        <Participants\n                            div={2}\n                            speakers={this.state.speakersTwo}\n                            teams={this.state.teamsTwo}\n                            updateSpeakers={this.updateSpeakersTwo}\n                            updateTeams={this.updateTeamsTwo} />\n                    </Tab.Pane>\n                </>\n            );\n        }\n\n\n        return (\n            <>\n            <Container fluid className=\"app\">\n                <div id=\"logo\">\n                    <img src={logo} alt=\"TacoTab logo\" />\n                    <h1>TacoTab</h1>\n                </div>\n\n                <div id=\"hamburger\">\n                    <List \n                        onClick={this.toggleMenu}\n                        role=\"button\"\n                        aria-controls=\"app-nav\"\n                        aria-expanded={this.state.showMenu} />\n                </div>\n\n                <Tab.Container id=\"app-nav\" defaultActiveKey=\"home\">\n                    <Collapse in={this.state.showMenu}>\n                        <Nav className=\"main-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"home\">Home</Nav.Link>\n                            </Nav.Item>\n                            {participants_nav}\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\">Judges</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"draw\">Draw</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Collapse>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"home\">\n                            <Home\n                                tournamentName={this.state.tournamentName}\n                                config={this.state.config}\n                                updateTournamentName={this.updateTournamentName}\n                                updateConfig={this.updateConfig}\n                                importTournament={this.importTournament} />\n                        </Tab.Pane>\n                        {participants_panes}\n                        <Tab.Pane eventKey=\"judges\">\n                            <Judges\n                                judges={this.state.judges}\n                                updateJudges={this.updateJudges}\n                                getTotalTeams={this.getTotalTeams} />\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"draw\">\n                            <Draws\n                                config={this.state.config}\n                                speakersOne={this.state.speakersOne}\n                                speakersTwo={this.state.speakersTwo}\n                                teamsOne={this.state.teamsOne}\n                                teamsTwo={this.state.teamsTwo}\n                                judges={this.state.judges}\n                                draws={this.state.draws} />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Tab.Container>\n            </Container>\n\n            <SetupScreen\n                init={this.state.init}\n                initializeTournament={this.initializeTournament}\n                importTournament={this.importTournament} />\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}