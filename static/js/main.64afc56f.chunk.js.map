{"version":3,"sources":["images/logo.svg","images/icon-github.svg","utils/importTournament.ts","setup/SetupScreen.tsx","home/Welcome.tsx","home/Settings.tsx","home/Home.tsx","utils/EditText.tsx","utils/Toggle.tsx","participants/SpeakerRow.tsx","participants/Speakers.tsx","participants/TeamSpeakerSelect.tsx","participants/TeamWinSelector.tsx","participants/TwoPersonTeamTooltip.tsx","participants/SpeakerDropDown.tsx","utils/getDistinctSpeakers.ts","participants/TeamRow.tsx","participants/TeamTable.tsx","participants/Teams.tsx","participants/Ranking.tsx","participants/Participants.tsx","judges/JudgeRow.tsx","judges/Judges.tsx","draws/TeamPill.tsx","draws/JudgePill.tsx","draws/RoundRow.tsx","draws/Round.tsx","draws/Draws.tsx","App.tsx","serviceWorker.ts","ServiceWorkerWrapper.tsx","index.tsx"],"names":["module","exports","s","JSON","stringify","importTournament","files","length","fr","FileReader","onload","event","result","parse","target","localStorage","setItem","init","config","version","tournamentName","speakersOne","teamsOne","speakersTwo","teamsTwo","speakerCounter","teamCounter","judges","judgeCounter","draws","roomCounter","tournament_name","importConfig","pkg","divisions","numDivisions","importSpeakersOne","speakers_one","map","speaker","newSpeaker","speakerID","debaterID","importTeamsOne","teams_one","team","newTeam","name","teamName","round1","sp","parseInt","round2","round3","sideR1","importSpeakersTwo","speakers_two","importTeamsTwo","teams_two","speakers_counter","teams_counter","importJudges","judge","newJudge","atRound1","r1","atRound2","r2","atRound3","r3","judges_counter","importDraws","draw","newDraw","roomsOne","pairings_one","pairing","newRoom","roomID","room","roomsTwo","pairings_two","readAsText","item","window","location","reload","SetupScreen","props","state","setupForm","divisionOneName","divisionTwoName","setupFormValidated","importFormValidated","handleSetupFormChange","bind","handleSetupFormSubmit","importData","value","Number","setupFormState","this","setState","preventDefault","currentTarget","checkValidity","stopPropagation","divisionNames","initializeTournament","document","getElementById","Modal","show","backdrop","animation","className","dialogClassName","backdropClassName","aria-labelledby","Header","Title","id","src","logo","alt","Body","href","rel","Tabs","defaultActiveKey","Tab","eventKey","title","Form","noValidate","validated","onSubmit","Group","controlId","Label","Control","type","required","placeholder","onChange","Feedback","Check","inline","custom","label","checked","Collapse","in","Row","Col","md","srOnly","Button","variant","accept","htmlFor","React","Component","Welcome","PureComponent","Settings","nameForm","nameFormValidated","nameSaved","showWhatsNew","showPrivacy","handleNameFormChange","handleNameFormSubmit","exportData","clearData","hideWhatsNew","hidePrivacy","bsCustomFileInput","updateTournamentName","setTimeout","data","encodeURIComponent","getItem","replace","toLowerCase","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","confirm","clear","lg","sm","xl","disabled","xs","onClick","Date","getFullYear","GitHubLogo","onHide","closeButton","Home","Container","transition","Nav","Item","Link","Content","Pane","updateConfig","EditText","cols","maxLength","fn","baggage","useState","setValue","rows","autoComplete","spellCheck","onKeyDown","which","blur","onBlur","Toggle","on","setOn","SpeakerRow","handleSpeakerUpdate","updateSpeaker","key","school","disqualified","deleteSpeaker","Speakers","addSpeakerForm","speakerName","handleAddSpeakerFormChange","handleAddSpeakerFormSubmit","addSpeakerFormState","counter","scores","ranks","wins","newSpeakers","speakers","updateSpeakers","blankForm","index","findIndex","el","teams","includes","alert","splice","table","Table","hover","bordered","OverlayTrigger","placement","overlay","Tooltip","TeamSpeakerSelect","roundKey","round","speakerPos","handleFormChange","handleUpdateTeamFormChange","teamID","as","children","TeamWinSelector","win","handleWinFormUpdate","totalWins","updateTeam","toString","TwoPersonTeamTooltip","Popover","tabIndex","SpeakerDropDown","getDistinctSpeakers","push","Set","TeamRow","updateTeamForm","showModal","showWarning","handleTeamUpdate","modalShow","modalHide","handleTeamMembersUpdate","isNaN","numValue","find","updateTeamFormState","indexOf","speakerRows","isInR1","isInR2","isInR3","totalScores","totalRanks","div","isInR","r","Fragment","scores1","forEach","scores2","scores3","ranks1","ranks2","ranks3","totalPoints","teamSpeakerSelects","rowSpan","deleteTeam","colSpan","size","TeamTable","Teams","addTeamForm","speaker1","speaker2","speaker3","addTeamFormValidated","handleAddTeamFormChange","handleAddTeamFormSubmit","addTeamFormState","memberList","newTeams","updateTeams","rooms","pair","prop","opp","filter","teamTable","noTeams","hidden","Ranking","speaker_ranking","slice","sort","a","b","a_sum","reduce","x","y","b_sum","a_ranks","b_ranks","a_team","b_team","a_wins","undefined","b_wins","a_tpoints","b_tpoints","team_ranking","speakerIDs","speakerNames","currSpeaker","speakerElements","striped","Participants","JudgeRow","handleJudgeUpdate","updateJudge","judgeID","canChair","deleteJudge","Judges","addJudgeForm","judgeName","handleAddJudgeFormChange","handleAddJudgeFormSubmit","judgeAddFormState","newJudges","updateJudges","inRound","chair","wings","totalRooms","Math","getTotalTeams","chairsR1","chairsR2","chairsR3","TeamPill","swapTeamID","handleRoomFormChange","handleRoomFormSubmit","popFocus","returnFocus","updateRoom","focus","popover","mappedTeam","trigger","onEntered","onExited","rootClose","hasConflict","JudgePill","isChair","hasChairedBefore","RoundRow","handleRoomUpdate","updateRoomTeam","updateRoomJudge","updateRooms","thisTeamID","thisRoom","thisTeamPos","checkRoom","newRoomID","nextDiv","swapChairID","j","oldIndex","speakersInTeams","roomNum","speakerSchools","teamConflict","roomR1","wing","Round","fullScreen","generateDraw","regenerateDraw","deleteDraw","fullScreenDraw","generated","len1","len2","availableJudges","chairs","totalTeams","i","floor","random","pop","t1","t2","roundOneRoomsOne","roundOneRoomsTwo","propsOne","propsTwo","wasProp","iWasProp","drawr","updateDraws","documentElement","requestFullscreen","fullscreenElement","exitFullscreen","tables","Draws","App","updateStorage","updateInit","updateSpeakersOne","updateSpeakersTwo","updateTeamsOne","updateTeamsTwo","showMenu","toggleMenu","participants_nav","participants_panes","fluid","role","aria-controls","aria-expanded","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","serviceWorker","ready","registration","unregister","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","useEffect","Alert","postMessage","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64afc56f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.15863a1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-github.026cb8cd.svg\";","import pkg from '../../package.json';\nconst s = JSON.stringify;\n\nexport const importTournament = (files: FileList) => {\n    if(files.length <= 0) return false;\n\n    const fr = new FileReader();\n    fr.onload = event => {\n        const result = JSON.parse(event.target!.result as string);\n\n        // CHECK IF PROPER TOURNAMENT EXPORT\n        if(!(\"init\" in result)\n            || !((\"tournamentName\" in result) || (\"tournament_name\" in result))\n            || !(\"config\" in result)\n            || !((\"speakersOne\" in result) || (\"speakers_one\" in result))\n            || !((\"speakersTwo\" in result) || (\"speakers_two\" in result))\n            || !((\"teamsOne\" in result) || (\"teams_one\" in result))\n            || !((\"teamsTwo\" in result) || (\"teams_two\" in result))\n            || !((\"speakerCounter\" in result) || (\"speakers_counter\" in result))\n            || !(\"judges\" in result)\n            || !((\"judgeCounter\" in result) || (\"judges_counter\" in result))\n            || !(\"draws\" in result))\n            {\n                return false;\n            }\n\n        localStorage.setItem(\"init\", s(result.init));\n        // COMPATIBILITY WITH EXPORTS BEFORE VERSION 0.3.0\n        if(!result.config.version) {\n            localStorage.setItem(\"tournamentName\", s(result.tournament_name));\n\n            let importConfig = result.config;\n            importConfig.version = pkg.version;\n            if(importConfig.divisions === \"1\") {\n                importConfig.numDivisions = 1\n            } else {\n                importConfig.numDivisions = 2\n            }\n            delete importConfig.divisions\n            localStorage.setItem(\"config\", s(importConfig));\n\n            let importSpeakersOne = result.speakers_one.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersOne\", s(importSpeakersOne));\n\n            let importTeamsOne = result.teams_one.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsOne\", s(importTeamsOne));\n\n            let importSpeakersTwo = result.speakers_two.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersTwo\", s(importSpeakersTwo));\n\n            let importTeamsTwo = result.teams_two.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsTwo\", s(importTeamsTwo));\n\n            localStorage.setItem(\"speakerCounter\", s(result.speakers_counter));\n            localStorage.setItem(\"teamCounter\", s(result.teams_counter));\n\n            let importJudges = result.judges.map((judge: any) => {\n                let newJudge = {\n                    ...judge,\n                    atRound1: judge.r1,\n                    atRound2: judge.r2,\n                    atRound3: judge.r3\n                }\n                delete newJudge.r1\n                delete newJudge.r2\n                delete newJudge.r3\n                return newJudge\n            });\n            localStorage.setItem(\"judges\", s(importJudges));\n\n            localStorage.setItem(\"judgeCounter\", s(result.judges_counter));\n\n            let roomCounter = 0;\n            let importDraws = result.draws.map((draw: any) => {\n                let newDraw = {\n                    ...draw,\n                    roomsOne: draw.pairings_one.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    }),\n                    roomsTwo: draw.pairings_two.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    })\n                }\n                delete newDraw.pairings_one\n                delete newDraw.pairings_two\n                return newDraw\n            });\n            localStorage.setItem(\"draws\", s(importDraws));\n            localStorage.setItem(\"roomCounter\", s(roomCounter));\n\n        // CURRENT EXPORTS\n        } else {\n            localStorage.setItem(\"tournamentName\", s(result.tournamentName));\n            localStorage.setItem(\"config\", s(result.config));\n            localStorage.setItem(\"speakersOne\", s(result.speakersOne));\n            localStorage.setItem(\"teamsOne\", s(result.teamsOne));\n            localStorage.setItem(\"speakersTwo\", s(result.speakersTwo));\n            localStorage.setItem(\"teamsTwo\", s(result.teamsTwo));\n            localStorage.setItem(\"speakerCounter\", s(result.speakerCounter));\n            localStorage.setItem(\"teamCounter\", s(result.teamCounter));\n            localStorage.setItem(\"judges\", s(result.judges));\n            localStorage.setItem(\"judgeCounter\", s(result.judgeCounter));\n            localStorage.setItem(\"draws\", s(result.draws));\n            localStorage.setItem(\"roomCounter\", s(result.roomCounter));\n        }\n\n    }\n    fr.readAsText(files.item(0) as File);\n\n    window.location.reload();\n}","import React, { ChangeEvent, FormEvent } from 'react';\nimport './SetupScreen.scss';\nimport logo from '../images/logo.svg';\nimport { importTournament } from '../utils/importTournament';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\n\ntype SetupScreenProps = {\n    init: boolean,\n    initializeTournament: (tournamentName: string, numDivisions: number, divisionNames: string[]) => void\n}\n\ntype SetupScreenState = {\n    setupForm: {\n        tournamentName: string,\n        numDivisions: number,\n        divisionOneName: string,\n        divisionTwoName: string,\n        [key: string]: string|number\n    },\n    setupFormValidated: boolean,\n    importFormValidated: boolean\n}\n\nclass SetupScreen extends React.Component<SetupScreenProps, SetupScreenState> {\n    constructor(props: SetupScreenProps) {\n        super(props);\n\n        this.state = {\n            setupForm: {\n                tournamentName: \"\",\n                numDivisions: 1,\n                divisionOneName: \"\",\n                divisionTwoName: \"\"\n            },\n            setupFormValidated: false,\n            importFormValidated: false\n        }\n\n        this.handleSetupFormChange = this.handleSetupFormChange.bind(this);\n        this.handleSetupFormSubmit = this.handleSetupFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n    }\n\n\n    handleSetupFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name === \"numDivisions\") value = Number(value);\n        let setupFormState = {...this.state.setupForm};\n        setupFormState[name] = value;\n        this.setState({ setupForm: setupFormState });\n    }\n\n    handleSetupFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({setupFormValidated: true});\n            return false;\n        }\n\n        const numDivisions = this.state.setupForm.numDivisions;\n        const divisionNames =[this.state.setupForm.divisionOneName, this.state.setupForm.divisionTwoName];\n        if(numDivisions === 2 && (divisionNames[0] === \"\" || divisionNames[1] === \"\")) return false;\n\n        this.setState({setupFormValidated: false});\n        this.props.initializeTournament(this.state.setupForm.tournamentName, numDivisions, divisionNames);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({importFormValidated: true});\n            return false;\n        }\n\n        const files = (document.getElementById(\"importSetup\") as HTMLInputElement).files;\n        if (files === null) return false;\n\n        this.setState({importFormValidated: false});\n        importTournament(files);\n    }\n\n\n    render() {\n        return (\n            <Modal\n                show={!this.props.init}\n                backdrop=\"static\"\n                animation={false}\n                className=\"setup-modal\"\n                dialogClassName=\"setup-modal-dialog\"\n                backdropClassName=\"setup-modal-backdrop\"\n                aria-labelledby=\"setup-modal-title\" >\n                <Modal.Header>\n                    <Modal.Title id=\"setup-modal-title\">\n                        <img src={logo} alt=\"TacoTab logo\" id=\"setup-logo\" />\n                        Welcome to TacoTab!\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk&mdash;this app might bite.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                    <p>You can create a new tournament from scratch, or import data from a previous TacoTab tournament.</p>\n                    \n                    <Tabs defaultActiveKey=\"createnew\" id=\"setup-tabs\">\n                        <Tab eventKey=\"createnew\" title=\"New tournament\">\n                            <Form\n                                noValidate\n                                validated={this.state.setupFormValidated}\n                                onSubmit={this.handleSetupFormSubmit}>\n                                <Form.Group controlId=\"setupFormTournamentName\">\n                                    <Form.Label className=\"h5\">Tournament name</Form.Label>\n                                    <Form.Control\n                                        name=\"tournamentName\"\n                                        type=\"text\"\n                                        required\n                                        placeholder=\"e.g. 'Bard MS-HS 2020'\"\n                                        value={this.state.setupForm.name}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please enter a name for the tournament.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <h5 id=\"setup-form-div-h5\">Speaker divisions</h5>\n                                <Form.Group controlId=\"setupFormNumDivisions\" id=\"setup-form-num-div\">\n                                    <Form.Label>Number of speaker divisions:&nbsp;&nbsp;</Form.Label>\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"1\"\n                                        value={1}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-1\"\n                                        checked={this.state.setupForm.numDivisions === 1}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"2\"\n                                        value={2}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-2\"\n                                        checked={this.state.setupForm.numDivisions === 2}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <Collapse in={this.state.setupForm.numDivisions === 2}>\n                                    <div>\n                                        <Form.Group controlId=\"setupFormDivisionNames\">\n                                            <Form.Label>Give both divisions a name for easy identification.</Form.Label>\n                                            <Form.Row>\n                                                <Col md={6}>\n                                                    <Form.Label srOnly>Name for division one</Form.Label>\n                                                    <Form.Control\n                                                        name=\"divisionOneName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Novice'\"\n                                                        required={this.state.setupForm.numDivisions === 2}\n                                                        value={this.state.setupForm.divisionOneName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please enter a name.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <Form.Label srOnly>Name for division two</Form.Label>\n                                                    <Form.Control\n                                                        name=\"divisionTwoName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Open'\"\n                                                        required={this.state.setupForm.numDivisions === 2}\n                                                        value={this.state.setupForm.divisionTwoName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please enter a name.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Row>\n                                        </Form.Group>\n                                    </div>\n                                </Collapse>\n\n                                <Button variant=\"primary\" type=\"submit\" id=\"setup-form-submit\">\n                                    Create the tournament\n                                </Button>\n                            </Form>\n                        </Tab>\n\n                        <Tab eventKey=\"importnew\" title=\"Import tournament\">\n                            <p>Open files generated with the Export function.</p>\n                            <Form\n                                noValidate\n                                validated={this.state.importFormValidated}\n                                onSubmit={this.importData}>\n                                <Form.Row>\n                                    <Col md={9}>\n                                        <div className=\"custom-file\">\n                                            <Form.Control\n                                                name=\"import\"\n                                                id=\"importSetup\"\n                                                className=\"custom-file-input\"\n                                                type=\"file\"\n                                                required\n                                                accept=\".tournament,.json\" />\n                                            <label className=\"custom-file-label\" htmlFor=\"importSetup\">Choose file</label>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please select a file from your computer.\n                                            </Form.Control.Feedback>\n                                        </div>\n                                    </Col>\n                                    <Col md={3}>\n                                        <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default SetupScreen;","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nclass Welcome extends React.PureComponent {\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <h2>Welcome!</h2>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default Welcome;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Settings.scss';\nimport GitHubLogo from '../images/icon-github.svg';\nimport { Config } from '../types/Config';\nimport { importTournament } from '../utils/importTournament';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport { Download, Trash, CheckCircleFill } from 'react-bootstrap-icons';\n\n\ntype SettingsProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\ntype SettingsState = {\n    nameForm: string,\n    nameFormValidated: boolean,\n    nameSaved: boolean,\n    importFormValidated: boolean,\n    showWhatsNew: boolean,\n    showPrivacy: boolean\n}\n\nclass Settings extends React.PureComponent<SettingsProps, SettingsState> {\n    constructor(props: SettingsProps) {\n        super(props);\n\n        this.state = {\n            nameForm: \"\",\n            nameFormValidated: false,\n            nameSaved: false,\n            importFormValidated: false,\n            showWhatsNew: false,\n            showPrivacy: false\n        }\n\n        this.handleNameFormChange = this.handleNameFormChange.bind(this);\n        this.handleNameFormSubmit = this.handleNameFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n        this.exportData = this.exportData.bind(this);\n        this.clearData = this.clearData.bind(this);\n        this.showWhatsNew = this.showWhatsNew.bind(this);\n        this.hideWhatsNew = this.hideWhatsNew.bind(this);\n        this.showPrivacy = this.showPrivacy.bind(this);\n        this.hidePrivacy = this.hidePrivacy.bind(this);\n    }\n\n    componentDidMount() {\n        bsCustomFileInput.init();\n    }\n\n\n    handleNameFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({nameForm: event.target.value});\n    }\n\n    handleNameFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({nameFormValidated: true});\n            return false;\n        }\n\n        const name = this.state.nameForm;\n        this.props.updateTournamentName(name);\n        this.setState({nameForm: \"\"});\n        this.setState({nameFormValidated: false});\n        this.setState({nameSaved: true});\n        setTimeout(() => this.setState({nameSaved: false}), 3000);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({importFormValidated: true});\n            return false;\n        }\n\n        const files = (document.getElementById(\"import-settings\") as HTMLInputElement).files;\n        if (files === null) return false;\n\n        this.setState({importFormValidated: false});\n        importTournament(files);\n    }\n\n    exportData() {\n        let data = \"data:text/json;charset=utf-8,\";\n        data += encodeURIComponent(\"{\");\n        data += encodeURIComponent('\"init\": ' + localStorage.getItem(\"init\") + \",\");\n        data += encodeURIComponent('\"tournamentName\": ' + localStorage.getItem(\"tournamentName\") + \",\");\n        data += encodeURIComponent('\"config\": ' + localStorage.getItem(\"config\") + \",\");\n        data += encodeURIComponent('\"speakersOne\": ' + localStorage.getItem(\"speakersOne\") + \",\");\n        data += encodeURIComponent('\"teamsOne\": ' + localStorage.getItem(\"teamsOne\") + \",\");\n        data += encodeURIComponent('\"speakersTwo\": ' + localStorage.getItem(\"speakersTwo\") + \",\");\n        data += encodeURIComponent('\"teamsTwo\": ' + localStorage.getItem(\"teamsTwo\") + \",\");\n        data += encodeURIComponent('\"speakerCounter\": ' + localStorage.getItem(\"speakerCounter\") + \",\");\n        data += encodeURIComponent('\"teamCounter\": ' + localStorage.getItem(\"teamCounter\") + \",\");\n        data += encodeURIComponent('\"judges\": ' + localStorage.getItem(\"judges\") + \",\");\n        data += encodeURIComponent('\"judgeCounter\": ' + localStorage.getItem(\"judgeCounter\") + \",\");\n        data += encodeURIComponent('\"draws\": ' + localStorage.getItem(\"draws\"));\n        data += encodeURIComponent(\"}\");\n        \n        let name = this.props.tournamentName;\n        name = name.replace(/\\s+/g, '-').toLowerCase();\n        name += \".tournament\";\n\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", data);\n        downloadAnchorNode.setAttribute(\"download\", name);\n        document.body.appendChild(downloadAnchorNode);\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n \n    clearData() {\n        const conf = window.confirm(\"Are you sure you want to delete all data?\");\n        if(!conf) return false;\n        localStorage.clear();\n        window.location.reload();\n    }\n\n    showWhatsNew() { this.setState({showWhatsNew: true}); }\n    hideWhatsNew() { this.setState({showWhatsNew: false}); }\n    showPrivacy() { this.setState({showPrivacy: true}); }\n    hidePrivacy() { this.setState({showPrivacy: false}); }\n\n\n    render() {\n        return (\n            <>\n                <div>\n                    <h2>Settings</h2>\n                    <Row>\n                        <Col lg={8} className=\"col-settings\">\n                            <p>Manage your tournament.</p>\n                            <section>\n                                <h3>Change tournament name</h3>\n                                <Form\n                                    noValidate\n                                    validated={this.state.nameFormValidated}\n                                    onSubmit={this.handleNameFormSubmit}>\n                                    <Form.Row>\n                                        <Col sm={9} xl={6}>\n                                            <Form.Label srOnly>Tournament name</Form.Label>\n                                            <Form.Control\n                                                name=\"tournamentName\"\n                                                type=\"text\"\n                                                placeholder=\"New name\"\n                                                required\n                                                value={this.state.nameForm}\n                                                onChange={this.handleNameFormChange} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please enter a name for the tournament.\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col>\n                                            <Button\n                                                variant={this.state.nameSaved ? \"success\" : \"primary\"}\n                                                disabled={this.state.nameSaved}\n                                                id=\"btn-save-tournament-name\"\n                                                type=\"submit\">\n                                                {this.state.nameSaved ? <CheckCircleFill /> : \"Save\"}\n                                            </Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Import tournament data</h3>\n                                <p>Open files generated with the Export function below. <strong>Note:</strong> this will override all current data!</p>\n                                <Form\n                                    noValidate\n                                    validated={this.state.importFormValidated}\n                                    onSubmit={this.importData}>\n                                    <Form.Row>\n                                        <Col xs={9} xl={6}>\n                                            <div className=\"custom-file\">\n                                                <Form.Label srOnly>Select tournament file</Form.Label>\n                                                <Form.Control\n                                                    name=\"import\"\n                                                    id=\"import-settings\"\n                                                    className=\"custom-file-input\"\n                                                    type=\"file\"\n                                                    required\n                                                    accept=\".tournament,.json\" />\n                                                <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    Please select a file from your computer.\n                                                </Form.Control.Feedback>\n                                            </div>\n                                        </Col>\n                                        <Col>\n                                            <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Export tournament data</h3>\n                                <p>Save all tournament data to a file on your PC.</p>\n                                <Button\n                                    variant=\"primary\"\n                                    onClick={this.exportData}>\n                                    <Download className=\"btn-icon\" />\n                                    Export data\n                                </Button>\n                            </section>\n                            <section id=\"section-cleardata\">\n                                <h3>Clear tournament data</h3>\n                                <p>Warning: this will delete <strong>all</strong> entered data. Save your data using the Export function first.</p>\n                                <Button\n                                    variant=\"danger\"\n                                    onClick={this.clearData}>\n                                    <Trash className=\"btn-icon\" />\n                                    Clear data\n                                </Button>\n                            </section>\n                        </Col>\n                        <Col lg={4} className=\"col-settings\">\n                            <section id=\"section-about\">\n                                <h3>About</h3>\n                                <p>\n                                    TacoTab β version 0.4.3<br />\n                                    &copy; {new Date().getFullYear()} Rayo Verweij<br />\n                                    <img src={GitHubLogo} alt=\"GitHub logo\" id=\"logo-github\"/>&nbsp;\n                                    <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                        GitHub\n                                    </a>\n                                    &nbsp;&middot;&nbsp;<Button variant=\"link\" onClick={this.showWhatsNew}>What's new</Button>\n                                    &nbsp;&middot;&nbsp;<Button variant=\"link\" onClick={this.showPrivacy}>Privacy</Button>\n                                </p>\n                                <p>\n                                    <a href=\"https://rayo.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Check out more of Rayo's work</a> or <a href=\"https://debate.bard.edu\" rel=\"noopener noreferrer\" target=\"_blank\">visit the Bard Debate Union</a>&mdash;Bard's best sports team!\n                                </p>\n                            </section>\n                        </Col>\n                    </Row>\n                </div>\n\n                <Modal\n                    show={this.state.showWhatsNew}\n                    onHide={this.hideWhatsNew}\n                    className=\"whatsnew-modal\"\n                    aria-labelledby=\"whatsnew-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"whatsnew-modal-title\">\n                            What's new\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            New in version 0.4.3:\n                            <ul>\n                                <li>General: from now on, when a new update to TacoTab is available, a message will tell you and let you reload</li>\n                                <li>General: in text fields, pressing 'Enter' now submits your input rather than entering a newline</li>\n                                <li>General: if a form can't be submitted, for example because you left crucial fields empty, the app will now give you feedback</li>\n                                <li>General: many performance improvements, especially around editing text fields</li>\n                                <li>Teams: when trying to add a team without any speakers, now the app tells you this is impossible, instead of simply crashing</li>\n                                <li>Accessibility: removed transitions and animations when prefers-reduced-motion is set</li>\n                                <li>Accessibility: each interactive element is now properly focusable</li>\n                                <li>Accessibility: each form input should now be properly labeled for screen readers</li>\n                                <li>Minor visual tweaks and bug fixes</li>\n                            </ul>\n                            For an overview of changes made in previous versions, see <a href=\"https://github.com/rayoverweij/tacotab/releases\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub</a>.\n                        </p>\n                    </Modal.Body>\n                </Modal>\n\n                <Modal\n                    show={this.state.showPrivacy}\n                    onHide={this.hidePrivacy}\n                    className=\"privacy-modal\"\n                    aria-labelledby=\"privacy-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"privacy-modal-title\">\n                            Privacy Policy\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            We don't collect or store any of your data.\n                        </p>\n                        <p>\n                            It is, quite frankly, impossible for us to do so. There are no servers, no accounts, and no analytics. All data that you enter is stored in the local storage of your browser, and never leaves the instance of the browser you are runnning right now. (In fact, you could download the app and use it without even needing an internet connection!)\n                        </p>\n                        <p>\n                            There are also no third-party services or scripts running in the background that might collect your data, or cookies of any kind. The only way for data to leave this app is if you <em>manually</em> use the \"export\" function on the Settings page.\n                        </p>\n                        <p>\n                            What happens on your computer stays on your computer!\n                        </p>\n                    </Modal.Body>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Settings;","import React from 'react';\nimport Welcome from './Welcome';\nimport Settings from './Settings';\nimport { Config } from '../types/Config';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { HouseDoorFill, GearWideConnected } from 'react-bootstrap-icons';\n\n\ntype HomeProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\nclass Home extends React.PureComponent<HomeProps> {\n    render() {\n        return (\n            <Tab.Container id=\"home-view\" defaultActiveKey=\"welcome\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"welcome\" className=\"sub-nav-link\">\n                                    <HouseDoorFill className=\"btn-icon\"/>\n                                    Welcome\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"settings\" className=\"sub-nav-link\">\n                                    <GearWideConnected className=\"btn-icon\"/>\n                                    Settings\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"welcome\">\n                                <Welcome />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"settings\">\n                                <Settings\n                                    config={this.props.config}\n                                    tournamentName={this.props.tournamentName}\n                                    updateTournamentName={this.props.updateTournamentName}\n                                    updateConfig={this.props.updateConfig} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Home;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\n\n\ntype EditTextProps = {\n    name: string,\n    init: string,\n    cols?: number,\n    maxLength?: number,\n    placeholder?: string,\n    fn: (name: string, value: string, baggage?: any) => void,\n    baggage?: any\n}\n\nexport const EditText = ({name, init, cols, maxLength, placeholder, fn, baggage}: EditTextProps) => {\n    const [value, setValue] = useState(init);\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setValue(event.target.value);\n    }\n\n    const handleLoseFocus = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if(event.which === 13) (event.target as HTMLTextAreaElement).blur();\n    }\n\n    const handleSubmit = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        event.preventDefault();\n        fn(name, value, baggage);\n    }\n\n    return (\n        <textarea\n            className=\"editText\"\n            name={name}\n            rows={1}\n            cols={cols || (value.length > 8 ? value.length : 8)}\n            maxLength={maxLength}\n            value={value}\n            autoComplete=\"off\"\n            spellCheck={false}\n            placeholder={placeholder || name}\n            onChange={handleChange}\n            onKeyDown={handleLoseFocus}\n            onBlur={handleSubmit}\n        />\n    );\n}","import React, { useState, ChangeEvent } from 'react';\nimport Form from 'react-bootstrap/Form';\n\n\ntype ToggleProps = {\n    id: number,\n    name: string,\n    init: boolean,\n    fn: (name: string, on: boolean) => void\n}\n\nexport const Toggle = ({id, name, init, fn}: ToggleProps) => {\n    const [on, setOn] = useState(init);\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setOn(event.target.checked);\n        fn(name, !on); // I have *no idea* why this can't just be fn(name, on) but here we are\n    }\n\n    return (\n        <Form.Check\n            id={`toggle-${name}-${id}`}\n            className={on ? \"on\" : \"off\"}\n            name={name}\n            type=\"switch\"\n            label=\"\"\n            checked={on}\n            onChange={handleChange} />\n    );\n}","import React from 'react';\nimport { EditText } from '../utils/EditText';\nimport { Toggle } from '../utils/Toggle';\nimport { Speaker } from '../types/Speaker';\nimport { Trash } from 'react-bootstrap-icons';\n\n\ntype SpeakerRowProps = {\n    speaker: Speaker,\n    updateSpeaker: (speaker: Speaker) => void,\n    deleteSpeaker: (speaker: Speaker) => void\n}\n\nclass SpeakerRow extends React.PureComponent<SpeakerRowProps> {\n    constructor(props: SpeakerRowProps) {\n        super(props);\n\n        this.handleSpeakerUpdate = this.handleSpeakerUpdate.bind(this);\n    }\n\n    handleSpeakerUpdate(name: string, value: string | boolean) {\n        const speaker = {...this.props.speaker, [name]: value};\n        this.props.updateSpeaker(speaker);\n    }\n\n    render() {\n        const speaker = this.props.speaker;\n\n        return (\n            <tr key={`speaker-row-${speaker.speakerID}`}>\n                <td className=\"editable\">\n                    <EditText\n                        name=\"name\"\n                        init={speaker.name}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"editable\">\n                    <EditText\n                        name=\"school\"\n                        init={speaker.school}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"cell-low-padding\">\n                    <Toggle\n                        id={speaker.speakerID}\n                        name=\"disqualified\"\n                        init={speaker.disqualified}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"table-delete\">\n                    <button className=\"btn-none\"\n                        title={`Remove ${speaker.name}`}\n                        onClick={() => this.props.deleteSpeaker(speaker)}>\n                        <Trash className=\"icon trash\" />\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default SpeakerRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Speakers.scss';\nimport SpeakerRow from './SpeakerRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { TrashFill } from 'react-bootstrap-icons';\n\n\ntype SpeakersProps = {\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void\n}\n\ntype SpeakersState = {\n    addSpeakerForm: {\n        speakerName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Speakers extends React.PureComponent<SpeakersProps, SpeakersState> {\n    constructor(props: SpeakersProps) {\n        super(props);\n\n        this.state = {\n            addSpeakerForm: {\n                speakerName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddSpeakerFormChange = this.handleAddSpeakerFormChange.bind(this);\n        this.handleAddSpeakerFormSubmit = this.handleAddSpeakerFormSubmit.bind(this);\n        this.updateSpeaker = this.updateSpeaker.bind(this);\n        this.deleteSpeaker = this.deleteSpeaker.bind(this);\n    }\n\n\n    handleAddSpeakerFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target;\n        let addSpeakerFormState = {...this.state.addSpeakerForm};\n        addSpeakerFormState[name] = value;\n        this.setState({addSpeakerForm: addSpeakerFormState});\n    }\n\n    handleAddSpeakerFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let counter = JSON.parse(localStorage.getItem(\"speakerCounter\")!);\n        \n        const newSpeaker: Speaker = {\n            speakerID: counter++,\n            name: this.state.addSpeakerForm.speakerName,\n            school: this.state.addSpeakerForm.school,\n            scores: [0, 0, 0],\n            ranks: [0, 0, 0],\n            wins: 0,\n            disqualified: false\n        };\n        \n        const newSpeakers = [...this.props.speakers, newSpeaker];\n        this.props.updateSpeakers(newSpeakers);\n        \n        localStorage.setItem(\"speakerCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addSpeakerForm};\n        blankForm.speakerName = \"\";\n        this.setState({addSpeakerForm: blankForm});\n    }\n\n    updateSpeaker(speaker: Speaker) {\n        let speakers = [...this.props.speakers];\n        const index = speakers.findIndex(el => el.speakerID === speaker.speakerID);\n        speakers[index] = speaker;\n        this.props.updateSpeakers(speakers);\n    }\n\n    deleteSpeaker(speaker: Speaker) {\n        for(const team of this.props.teams) {\n            if(team.round1.includes(speaker.speakerID) || team.round2.includes(speaker.speakerID) || team.round3.includes(speaker.speakerID)) {\n                window.alert(`This speaker is still part of team ${team.name}. You need to remove them from the team before you can delete them.`);\n                return;\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete speaker ${speaker.name}?`);\n        if(conf) {\n            let speakers = [...this.props.speakers];\n            const index = speakers.findIndex(el => el.speakerID === speaker.speakerID);\n            speakers.splice(index, 1);\n            this.props.updateSpeakers(speakers);\n        }\n    }\n\n\n    render() {\n        let table;\n        if(this.props.speakers.length === 0) {\n            table = <p className=\"none-yet\">No speakers yet!</p>;\n        } else {\n            table = (\n                <Table className=\"speaker-table\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>School</th>\n                            <th>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disqualify-info\">\n                                            Disqualified speakers can still be added to teams and receive scores, but won't be listed in the ranking\n                                        </Tooltip>\n                                    }>\n                                    <abbr title=\"\">Disq</abbr>\n                                </OverlayTrigger>\n                            </th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.speakers.map(speaker => {\n                            return (\n                                <SpeakerRow \n                                    key={`speaker-row-${speaker.speakerID}`}\n                                    speaker={speaker}\n                                    updateSpeaker={this.updateSpeaker}\n                                    deleteSpeaker={this.deleteSpeaker} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n            \n            \n        }\n\n        return (\n            <div>\n                <h2>Speakers</h2>\n                <Row>\n                    <Col>\n                    \n                        <Form onSubmit={this.handleAddSpeakerFormSubmit}>\n                            <Form.Row>\n                                <Col md={4}>\n                                    <Form.Label srOnly>Speaker name</Form.Label>\n                                    <Form.Control\n                                        name=\"speakerName\"\n                                        type=\"text\"\n                                        placeholder=\"Name\"\n                                        value={this.state.addSpeakerForm.speakerName}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Label srOnly>Speaker school</Form.Label>\n                                    <Form.Control\n                                        name=\"school\"\n                                        type=\"text\"\n                                        placeholder=\"School\"\n                                        value={this.state.addSpeakerForm.school}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col>\n                                    <Button\n                                        variant=\"primary\"\n                                        className=\"btn-submit\"\n                                        type=\"submit\">\n                                        Add speaker\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={10} xl={8} className=\"table-col\">\n                        {table}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Speakers;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamSpeakerSelectProps = {\n    team: Team,\n    speakerPos: number,\n    round: number,\n    value: Array<number[]>,\n    handleUpdateTeamFormChange: (value: number, speaker: number, round: number) => void\n}\n\ntype TeamSpeakerSelectState = {\n    value: number\n}\n\nclass TeamSpeakerSelect extends React.PureComponent<TeamSpeakerSelectProps, TeamSpeakerSelectState> {\n    constructor(props: TeamSpeakerSelectProps) {\n        super(props);\n\n        let roundKey: keyof Team;\n        if(this.props.round === 1) {\n            roundKey = \"round1\";\n        } else if(this.props.round === 2) {\n            roundKey = \"round2\";\n        } else {\n            roundKey = \"round3\";\n        }\n\n        this.state = {\n            value: this.props.team[roundKey][this.props.speakerPos]\n        }\n\n        this.handleFormChange = this.handleFormChange.bind(this);\n    }\n\n\n    handleFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = parseInt(event.target.value);\n        this.setState({value: value});\n        this.props.handleUpdateTeamFormChange(value, this.props.speakerPos, this.props.round);\n    }\n\n\n    render() {\n        return (\n            <Col>\n                <Form.Group controlId={`form-update-team-${this.props.team.teamID}-speaker-${this.props.speakerPos}-round-${this.props.round}`}>\n                    <Form.Label>Round {this.props.round}</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        name={`speaker-${this.props.speakerPos}-round-${this.props.round}`}\n                        value={this.state.value}\n                        onChange={this.handleFormChange}>\n                            {this.props.speakerPos === 2 ? <option value={-1}>[averaged third speaker]</option> : \"\"}\n                            {this.props.children}\n                    </Form.Control>\n                </Form.Group>\n            </Col>\n        );\n    }\n}\n\nexport default TeamSpeakerSelect;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamWinSelectorProps = {\n    team: Team,\n    round: number,\n    updateTeam: (team: Team) => void\n}\n\ntype TeamWinSelectorState = {\n    win: boolean\n}\n\nclass TeamWinSelector extends React.PureComponent<TeamWinSelectorProps, TeamWinSelectorState> {\n    constructor(props: TeamWinSelectorProps){\n        super(props);\n\n        this.state = {\n            win: this.props.team.wins[this.props.round - 1]\n        }\n\n        this.handleWinFormUpdate = this.handleWinFormUpdate.bind(this);\n    }\n\n\n    handleWinFormUpdate(event: ChangeEvent<HTMLInputElement>) {\n        let team = {...this.props.team};\n\n        if(event.target.value === \"true\") {\n            team.wins[this.props.round - 1] = true;\n            team.totalWins += 1;\n            this.setState({win: true});\n        } else {\n            team.wins[this.props.round - 1] = false;\n            team.totalWins -= 1;\n            this.setState({win: false});\n        }\n\n        this.props.updateTeam(team);\n    }\n\n\n    render() {\n        return (\n            <Form>\n                <Form.Label srOnly>Win or loss round {this.props.round}</Form.Label>\n                <Form.Control\n                    as=\"select\"\n                    name={`win-form-${this.props.team.teamID}-round-${this.props.round}`}\n                    value={this.state.win.toString()}\n                    onChange={this.handleWinFormUpdate}>\n                        <option value=\"true\">Win</option>\n                        <option value=\"false\">Loss</option>\n                </Form.Control>\n            </Form>\n        );\n    }\n}\n\nexport default TeamWinSelector;","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { InfoCircle } from 'react-bootstrap-icons';\n\nclass TwoPersonTeamTooltip extends React.Component {\n    render() {\n        return (\n            <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                    <Popover className=\"popover-explainer\" id=\"tooltip-totalspeakerpoints\">\n                        <Popover.Content>\n                            There are two ways to handle two-person teams. When choosing \"averaged third speaker\",\n                            the points and ranks for both speakers will be averaged. If instead you want the speeches\n                            of one team member to count double, create a new \"ghost\" speaker in the Speakers tab,\n                            disqualify them, and add them here.\n                        </Popover.Content>\n                    </Popover>\n                }>    \n                <InfoCircle tabIndex={0} className=\"icon-info\" />\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TwoPersonTeamTooltip;","import React from 'react';\nimport { Speaker } from '../types/Speaker';\n\ntype SpeakerDropDownProps = {\n    speakers: Speaker[]\n}\n\nexport const SpeakerDropDown = ({speakers}: SpeakerDropDownProps) => <>\n    {\n        speakers.map(speaker => {\n            return (\n                <option value={speaker.speakerID} key={`option-${speaker.speakerID}`}>{speaker.name}</option>\n            );\n        })\n    }\n</>","import { Team } from '../types/Team';\n\nexport function getDistinctSpeakers(team: Team) {\n    let sp = []\n    for(let s = 0; s < 3; s++) {\n        sp.push(team.round1[s]);\n        sp.push(team.round2[s]);\n        sp.push(team.round3[s]);\n    }\n    return [...new Set(sp)];\n}","import React, { FormEvent } from 'react';\nimport TeamSpeakerSelect from './TeamSpeakerSelect';\nimport TeamWinSelector from './TeamWinSelector';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { SpeakerDropDown } from './SpeakerDropDown';\nimport { EditText } from '../utils/EditText';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { People, Trash } from 'react-bootstrap-icons';\n\n\ntype TeamRowProps = {\n    team: Team,\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void\n}\n\ntype TeamRowState = {\n    speakers: number[],\n    updateTeamForm: Array<number[]>,\n    showModal: boolean,\n    showWarning: boolean\n}\n\nclass TeamRow extends React.PureComponent<TeamRowProps, TeamRowState> {\n    constructor(props: TeamRowProps) {\n        super(props);\n        \n        this.state = {\n            speakers: getDistinctSpeakers(this.props.team),\n            updateTeamForm: [\n                [this.props.team.round1[0], this.props.team.round2[0], this.props.team.round3[0]],\n                [this.props.team.round1[1], this.props.team.round2[1], this.props.team.round3[1]],\n                [this.props.team.round1[2], this.props.team.round2[2], this.props.team.round3[2]]\n            ],\n            showModal: false,\n            showWarning: false\n        }\n\n        this.handleTeamUpdate = this.handleTeamUpdate.bind(this);\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleUpdateTeamFormChange = this.handleUpdateTeamFormChange.bind(this);\n        this.handleTeamMembersUpdate = this.handleTeamMembersUpdate.bind(this);\n    }\n\n\n    handleTeamUpdate(name: string, value: string, baggage?: [Speaker, number]) {\n        if(name === \"score\" || \"rank\") {\n            if(!value || isNaN(Number(value))) {\n                value = \"0\";\n            }\n            let numValue = Number(value);\n\n            let speakers = [...this.props.speakers];\n\n            if(name === \"score\") {\n                speakers\n                    .find(el => el.speakerID === baggage![0].speakerID)!\n                    .scores[baggage![1]] = numValue;\n            } else if(name === \"rank\") {\n                speakers\n                    .find(el => el.speakerID === baggage![0].speakerID)!\n                    .ranks[baggage![1]] = numValue;\n            }\n\n            this.props.updateSpeakers(speakers);\n        } else {\n            const team = {...this.props.team, [name]: value};\n            this.props.updateTeam(team);\n        }\n    }\n    \n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleUpdateTeamFormChange(value: number, speakerPos: number, round: number) {\n        let updateTeamFormState = this.state.updateTeamForm;\n        updateTeamFormState[speakerPos][round - 1] = value;\n        this.setState({updateTeamForm: updateTeamFormState});\n    }\n\n    handleTeamMembersUpdate(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const newTeam = [...this.state.updateTeamForm];\n        if((newTeam[0][0] === newTeam[1][0] || newTeam[0][0] === newTeam[2][0] || newTeam[1][0] === newTeam[2][0])\n            || (newTeam[0][1] === newTeam[1][1] || newTeam[0][1] === newTeam[2][1] || newTeam[1][1] === newTeam[2][1])\n            || (newTeam[0][2] === newTeam[1][2] || newTeam[0][2] === newTeam[2][2] || newTeam[1][2] === newTeam[2][2])) {\n                this.setState({showWarning: true});\n                return false;\n            }\n\n        let team = {...this.props.team};\n        team.round1 = [newTeam[0][0], newTeam[1][0], newTeam[2][0]];\n        team.round2 = [newTeam[0][1], newTeam[1][1], newTeam[2][1]];\n        team.round3 = [newTeam[0][2], newTeam[1][2], newTeam[2][2]];\n\n        this.props.updateTeam(team);\n        this.setState({speakers: getDistinctSpeakers(this.props.team)});\n        this.setState({showWarning: false});\n        this.modalHide();\n    }\n\n\n    render() {\n        const team = this.props.team;\n        const speakers = this.state.speakers.map(sp => {\n            if(sp === -1) {\n                return null;\n            } else {\n                return this.props.speakers.find(el => el.speakerID === sp)!;\n            }\n        });\n        \n        // Calculate average scores\n        if(speakers.includes(null)) {\n            const index = speakers.indexOf(null);\n\n            speakers[index] = {\n                speakerID: -1,\n                name: \"[averaged third speaker]\",\n                school: \"\",\n                scores: [\n                    (speakers[0]!.scores[0] + speakers[1]!.scores[0]) / 2,\n                    (speakers[0]!.scores[1] + speakers[1]!.scores[1]) / 2,\n                    (speakers[0]!.scores[2] + speakers[1]!.scores[2]) / 2\n                ],\n                ranks: [\n                    (speakers[0]!.ranks[0] + speakers[1]!.ranks[0]) / 2,\n                    (speakers[0]!.ranks[1] + speakers[1]!.ranks[1]) / 2,\n                    (speakers[0]!.ranks[2] + speakers[1]!.ranks[2]) / 2\n                ],\n                wins: 0,\n                disqualified: true\n            }\n        }\n\n        // Generate the table rows\n        const speakerRows = speakers.map(speaker => {\n            speaker = speaker!\n\n            if(speaker.speakerID === -1) {\n                return <tr key={`${team.teamID}-average-third`}></tr>;\n            }\n\n            const isInR1 = this.props.team.round1.includes(speaker.speakerID);\n            const isInR2 = this.props.team.round2.includes(speaker.speakerID);\n            const isInR3 = this.props.team.round3.includes(speaker.speakerID);\n\n            let totalScores = 0;\n            if (isInR1) totalScores += speaker.scores[0];\n            if (isInR2) totalScores += speaker.scores[1];\n            if (isInR3) totalScores += speaker.scores[2];\n\n            let totalRanks = 0;\n            if (isInR1) totalRanks += speaker.ranks[0];\n            if (isInR2) totalRanks += speaker.ranks[1];\n            if (isInR3) totalRanks += speaker.ranks[2];\n\n            return (\n                <tr key={`${speaker.name}-${this.props.div}-row`}>\n                    <td>{speaker.name}</td>\n                    {\n                        [isInR1, isInR2, isInR3].map((isInR, r) => {\n                            return (\n                                <React.Fragment key={`cells-score-n-rank-${speaker!.speakerID}-${r}`}>\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <EditText\n                                            name=\"score\"\n                                            init={speaker!.scores[r].toString()}\n                                            cols={2}\n                                            maxLength={2}\n                                            placeholder=\"#\"\n                                            fn={this.handleTeamUpdate}\n                                            baggage={[speaker!, r]} />\n                                    </td>\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <EditText\n                                            name=\"rank\" \n                                            init={speaker!.ranks[r].toString()}\n                                            cols={1}\n                                            maxLength={1}\n                                            placeholder=\"#\"\n                                            fn={this.handleTeamUpdate}\n                                            baggage={[speaker!, r]} />\n                                    </td>\n                                </React.Fragment>\n                            );\n                        })\n                    }\n                    <td>{totalScores}</td>\n                    <td>{totalRanks}</td>\n                </tr>\n            );\n        });\n\n        // Calculate total scores\n        let scores1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                scores1 += speaker!.scores[0]\n            }\n        });\n        let scores2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                scores2 += speaker!.scores[1]\n            }\n        });\n        let scores3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                scores3 += speaker!.scores[2]\n            }\n        });\n\n        // Calculate total ranks\n        let ranks1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                ranks1 += speaker!.ranks[0]\n            }\n        });\n        let ranks2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                ranks2 += speaker!.ranks[1]\n            }\n        });\n        let ranks3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                ranks3 += speaker!.ranks[2]\n            }\n        });\n\n\n        // Update team scores\n        team.totalPoints = scores1 + scores2 + scores3;\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => {\n            return el.teamID === team.teamID;\n        });\n        teams[index] = team;\n        if(this.props.div === 1) {\n            localStorage.setItem(\"teamsOne\", JSON.stringify(teams));\n        } else {\n            localStorage.setItem(\"teamsTwo\", JSON.stringify(teams));\n        }\n\n        // Update the people selection picker\n        const teamSpeakerSelects = [0, 1, 2].map(speakerPos => {\n            return (\n                <div key={`teamSpeakerSelectRow-team-${team.teamID}-speaker-${speakerPos}`} className=\"form-update-team-speaker\">\n                    <p>Speaker {speakerPos + 1}</p>\n                    {speakerPos === 2 ? <TwoPersonTeamTooltip /> : \"\"}\n                    <Form.Row>\n                        {\n                            [1, 2, 3].map(round => {\n                                return (\n                                    <TeamSpeakerSelect\n                                        key={`teamSpeakerSelect-team-${team.teamID}-speaker-${round}-round-${round}`}\n                                        team={team}\n                                        speakerPos={speakerPos}\n                                        round={round}\n                                        value={this.state.updateTeamForm}\n                                        handleUpdateTeamFormChange={this.handleUpdateTeamFormChange}>\n                                            <SpeakerDropDown speakers={this.props.speakers} />\n                                    </TeamSpeakerSelect>\n                                );\n                            })\n                        }\n                    </Form.Row>\n                </div>\n            );\n        });\n\n\n        return (\n            <tbody>\n                <tr>\n                    <td rowSpan={this.state.speakers.length + 3} className=\"cell-teamname\">\n                        <EditText\n                            name=\"name\"\n                            init={team.name}\n                            fn={this.handleTeamUpdate} />\n                        <br />\n                        <button\n                            className=\"icon-wrapper btn-none\"\n                            title={`Change team members of ${team.name}`}\n                            onClick={this.modalShow}>\n                            <People className=\"icon people\" />\n                        </button>\n                        <button\n                            className=\"icon-wrapper btn-none\"\n                            title={`Remove ${team.name}`}\n                            onClick={() => this.props.deleteTeam(team)}>\n                            <Trash className=\"icon trash\" />\n                        </button>\n                    </td>\n                </tr>\n                {speakerRows}\n                <tr className=\"row-total\">\n                    <td>Team total</td>\n                    <td>{scores1}</td>\n                    <td>{ranks1}</td>\n                    <td>{scores2}</td>\n                    <td>{ranks2}</td>\n                    <td>{scores3}</td>\n                    <td>{ranks3}</td>\n                    <td>{scores1 + scores2 + scores3}</td>\n                    <td>{ranks1 + ranks2 + ranks3}</td>\n                </tr>\n                <tr className=\"row-wins\">\n                    <td>Team wins</td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={1} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={2} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={3} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2} className=\"cell-totalwins\">\n                        Total wins: {team.totalWins}\n                    </td>\n                </tr>\n\n                <Modal show={this.state.showModal} size=\"lg\" onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Specify team members per round</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleTeamMembersUpdate}>\n                            {teamSpeakerSelects}\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to the same round more than once.\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Save\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </tbody>\n        );\n    }\n}\n\nexport default TeamRow;","import React from 'react';\nimport './TeamTable.scss';\nimport TeamRow from './TeamRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Table from 'react-bootstrap/Table';\n\n\ntype TeamTableProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void\n}\n\nclass TeamTable extends React.PureComponent<TeamTableProps> {\n    render() {\n        return (\n            <Table hover className=\"team-table table-no-top-margin\">\n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Speakers</th>\n                        <th>R1 Score</th>\n                        <th>R1 Rank</th>\n                        <th>R2 Score</th>\n                        <th>R2 Rank</th>\n                        <th>R3 Score</th>\n                        <th>R3 Rank</th>\n                        <th>Total Score</th>\n                        <th>Total Rank</th>\n                    </tr>\n                </thead>\n                {this.props.teams.map(team => {\n                    return <TeamRow\n                                key={`${team.name}-row`}\n                                team={team}\n                                div={this.props.div}\n                                speakers={this.props.speakers}\n                                teams={this.props.teams}\n                                updateSpeakers={this.props.updateSpeakers}\n                                updateTeam={this.props.updateTeam}\n                                deleteTeam={this.props.deleteTeam} />;\n                })}\n            </Table>\n        );\n    }\n}\n\nexport default TeamTable;","import React, { ChangeEvent, FormEvent } from 'react';\nimport TeamTable from './TeamTable';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { SpeakerDropDown } from './SpeakerDropDown';\n\n\ntype TeamsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\ntype TeamsState = {\n    addTeamForm: {\n        teamName: string,\n        speaker1: number | \"\",\n        speaker2: number | \"\",\n        speaker3: number | \"\",\n        [key: string]: string|number\n    },\n    addTeamFormValidated: boolean,\n    showModal: boolean,\n    showWarning: boolean\n}\n\nclass Teams extends React.PureComponent<TeamsProps, TeamsState> {\n    constructor(props: TeamsProps) {\n        super(props);\n\n        this.state = {\n            addTeamForm: {\n                teamName: \"\",\n                speaker1: \"\",\n                speaker2: \"\",\n                speaker3: \"\"\n            },\n            addTeamFormValidated: false,\n            showModal: false,\n            showWarning: false\n        }\n\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleAddTeamFormChange = this.handleAddTeamFormChange.bind(this);\n        this.handleAddTeamFormSubmit = this.handleAddTeamFormSubmit.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n        this.deleteTeam = this.deleteTeam.bind(this);\n    }\n\n\n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleAddTeamFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name !== \"teamName\") value = Number(value);\n        let addTeamFormState = {...this.state.addTeamForm};\n        addTeamFormState[name] = value;\n        this.setState({addTeamForm: addTeamFormState});\n    }\n\n    handleAddTeamFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({addTeamFormValidated: true});\n            return false;\n        }\n\n        const team = {...this.state.addTeamForm}\n        if (team.speaker1 === team.speaker2 || team.speaker1 === team.speaker3 || team.speaker2 === team.speaker3) {\n            this.setState({showWarning: true});\n            return false;\n        }\n\n        let counter = JSON.parse(localStorage.getItem(\"teamCounter\")!);\n\n        const memberList = [team.speaker1, team.speaker2, team.speaker3] as number[]\n        const newTeam: Team = {\n            teamID: counter++,\n            name: team.teamName,\n            round1: memberList,\n            round2: memberList,\n            round3: memberList,\n            totalPoints: 0,\n            wins: [false, false, false],\n            totalWins: 0\n            };\n        \n        const newTeams = [...this.props.teams, newTeam];\n\n        localStorage.setItem(\"teamCounter\", JSON.stringify(counter));\n        this.props.updateTeams(newTeams);\n\n        this.setState({addTeamForm: {\n            teamName: \"\",\n            speaker1: \"\",\n            speaker2: \"\",\n            speaker3: \"\"\n        }});\n        this.setState({showWarning: false});\n        this.setState({addTeamFormValidated: false});\n        this.modalHide();\n    }\n\n    updateTeam(team: Team) {\n        let teams = [...this.props.teams];\n        const index = teams.findIndex(el => el.teamID === team.teamID);\n        teams[index] = team;\n        this.props.updateTeams(teams);\n    }\n\n    deleteTeam(team: Team) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        for (const round in draws) {\n            let rooms;\n\n            if(this.props.div === 1) rooms = draws[round].roomsOne;\n            else rooms = draws[round].roomsTwo;\n\n            for (const pair of rooms) {\n                if(pair.prop === team.teamID || pair.opp === team.teamID) {\n                    alert(\"This team has already started the tournament. You can't delete it anymore. You can still replace its speakers.\");\n                    return;\n                }\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete team ${team.name}?`);\n        if(conf) {\n            const teams = [...this.props.teams].filter(el => el.teamID !== team.teamID);  \n            this.props.updateTeams(teams);\n        }\n    }\n\n    \n    render() {\n        let noTeams = false;\n        if(this.props.teams.length === 0) {\n            noTeams = true;\n        }\n\n        let teamTable;\n        if(noTeams) {\n            teamTable = <p className=\"none-yet\">No teams yet!</p>;\n        } else {\n            teamTable = <TeamTable\n                            div={this.props.div}\n                            speakers={this.props.speakers}\n                            teams={this.props.teams}\n                            updateSpeakers={this.props.updateSpeakers}\n                            updateTeam={this.updateTeam}\n                            deleteTeam={this.deleteTeam} />\n        }\n\n        return (\n            <div>\n                <h2>\n                    Teams\n                    <Button onClick={this.modalShow}>Add team</Button>\n                    <div className={`hint-add-team ${noTeams ? \"\" : \"hidden\"}`}>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                    </div>\n                </h2>\n                {teamTable}\n\n                <Modal show={this.state.showModal} onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add a team</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form\n                            noValidate\n                            validated={this.state.addTeamFormValidated}\n                            onSubmit={this.handleAddTeamFormSubmit}>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-name`}>\n                                <Form.Label>Team name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"teamName\"\n                                    required\n                                    value={this.state.addTeamForm.teamName}\n                                    onChange={this.handleAddTeamFormChange} />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please give the team a name.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-1`}>\n                                <Form.Label>Speaker 1</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker1\"\n                                    required\n                                    value={this.state.addTeamForm.speaker1}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-2`}>\n                                <Form.Label>Speaker 2</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker2\"\n                                    required\n                                    value={this.state.addTeamForm.speaker2}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-3`}>\n                                <Form.Label>Speaker 3</Form.Label>\n                                <TwoPersonTeamTooltip />\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker3\"\n                                    required\n                                    value={this.state.addTeamForm.speaker3}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <option value=\"avg\">[averaged third speaker]</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list, or select [averaged third speaker] for a two-person team.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to a team more than once.\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Add\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Teams;","import React from 'react';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\n\n\ntype RankingProps = {\n    speakers: Speaker[],\n    teams: Team[]\n}\n\nclass Ranking extends React.PureComponent<RankingProps> {\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n\n        const speakers_ranked = speakers\n                                .slice(0)\n                                .filter(el => el.disqualified === false)\n                                .sort((a, b) => {\n            // First sort on total speaker scores\n            const a_sum = a.scores.reduce((x, y) => x + y, 0);\n            const b_sum = b.scores.reduce((x, y) => x + y, 0);\n\n            if(a_sum > b_sum) {\n                return -1;\n            } else if(a_sum < b_sum) {\n                return 1;\n            } else {\n                // Secondly sort on speaker ranks\n                const a_ranks = a.ranks.reduce((x, y) => x + y, 0);\n                const b_ranks = b.ranks.reduce((x, y) => x + y, 0);\n\n                if(a_ranks < b_ranks) {\n                    return -1;\n                } else if(a_ranks > b_ranks) {\n                    return 1;\n                } else {\n                    // Thirdly sort on team wins\n                    const a_team = teams.find(el => el.round1.includes(a.speakerID));\n                    const b_team = teams.find(el => el.round1.includes(b.speakerID));\n                    const a_wins = a_team === undefined ? 0 : a_team.totalWins;\n                    const b_wins = b_team === undefined ? 0 : b_team.totalWins;\n\n                    if(a_wins > b_wins) {\n                        return -1;\n                    } else if(a_wins < b_wins) {\n                        return 1;\n                    } else {\n                        // Fourthly sort on team points\n                        const a_tpoints = a_team === undefined ? 0 : a_team.totalPoints;\n                        const b_tpoints = b_team === undefined ? 0 : b_team.totalPoints;\n\n                        if(a_tpoints > b_tpoints) {\n                            return -1;\n                        } else if(a_tpoints < b_tpoints) {\n                            return 1;\n                        } else {\n                            return 1;\n                        }\n                    }\n                }\n            }\n        });\n\n        const speaker_ranking = speakers_ranked.map((speaker, index) => {\n            let team = teams.find(el => el.round1.includes(speaker.speakerID));\n            if (team === undefined) {\n                team = {\n                    teamID: -1,\n                    name: \"\",\n                    round1: [],\n                    round2: [],\n                    round3: [],\n                    totalPoints: 0,\n                    wins: [],\n                    totalWins: 0\n                }\n            }\n            return (\n                <tr key={`speaker-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>{speaker.name}</td>\n                    <td>{speaker.school}</td>\n                    <td>{speaker.scores.reduce((x, y) => x + y, 0)}</td>\n                    <td>{speaker.ranks.reduce((x, y) => x + y, 0)}</td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n\n\n        const teams_ranked = teams.slice(0).sort((a, b) => {\n            // First sort on team wins\n            const a_wins = a.totalWins;\n            const b_wins = b.totalWins;\n\n            if(a_wins > b_wins) {\n                return -1;\n            } else if(a_wins < b_wins) {\n                return 1;\n            } else {\n                // Secondlyly sort on team points\n                const a_tpoints = a.totalPoints;\n                const b_tpoints = b.totalPoints;\n\n                if(a_tpoints > b_tpoints) {\n                    return -1;\n                } else if(a_tpoints < b_tpoints) {\n                    return 1;\n                } else {\n                    return 1;\n                }\n            }\n        });\n\n        const team_ranking = teams_ranked.map((team, index) => {\n            const speakerIDs = getDistinctSpeakers(team);\n            const speakerNames: string[] = [];\n            for(let speakerID of speakerIDs) {\n                let currSpeaker = speakers.find(sp => sp.speakerID === speakerID);\n                if(currSpeaker === undefined) continue;\n                if(currSpeaker.disqualified === true) continue;\n                speakerNames.push(currSpeaker.name);\n            }\n            const speakerElements = speakerNames.map((speaker, index) => {\n                if(index < speakerNames.length - 1) {\n                    return (\n                        <React.Fragment key={`speaker-${index}`}>\n                            {speaker},&nbsp;\n                        </React.Fragment>\n                    );\n                } else {\n                    return (\n                        <React.Fragment key={`speaker-${index}`}>\n                            {speaker}\n                        </React.Fragment>\n                    );\n                }\n            });\n\n            return (\n                <tr key={`team-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            overlay={\n                                <Tooltip id={`tooltip-rank-teamName-${index + 1}`}>\n                                    {speakerElements}\n                                </Tooltip>\n                            }>\n                            <abbr title=\"\" tabIndex={0}>{team.name}</abbr>\n                        </OverlayTrigger>\n                    </td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n        \n\n        return (\n            <div>\n                <h2>Ranking</h2>\n                <Row>\n                    <Col lg={7} className=\"table-col\">\n                        <h3>Speakers</h3>\n                        <Table striped className=\"speaker-ranking-table table-no-top-margin table-less-bottom-margin-sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>School</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerpoints\">\n                                                    Total speaker points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣSP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerranks\">\n                                                    Total speaker ranks<br />(lower is better)\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣSR</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {speaker_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col lg={5} className=\"table-col table-col-margin-lg\">\n                        <h3>Teams</h3>\n                        <Table striped className=\"table-no-top-margin\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {team_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Ranking;","import React from 'react';\nimport Speakers from './Speakers';\nimport Teams from './Teams';\nimport Ranking from './Ranking';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { PersonFill, PeopleFill, Trophy } from 'react-bootstrap-icons';\n\n\ntype ParticipantsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\nclass Participants extends React.PureComponent<ParticipantsProps> {\n    render() {\n        return (\n            <Tab.Container id={`part-view-${this.props.div}`} defaultActiveKey=\"speakers\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"speakers\" className=\"sub-nav-link\">\n                                    <PersonFill className=\"btn-icon\" />\n                                    Speakers\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"teams\" className=\"sub-nav-link\">\n                                    <PeopleFill className=\"btn-icon\" />\n                                    Teams\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"ranking\" className=\"sub-nav-link\">\n                                    <Trophy className=\"btn-icon\" />\n                                    Ranking\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"speakers\">\n                                <Speakers\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"teams\">\n                                <Teams\n                                    div={this.props.div}\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers}\n                                    updateTeams={this.props.updateTeams} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"ranking\">\n                                <Ranking\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Participants;","import React from 'react';\nimport { EditText } from '../utils/EditText';\nimport { Toggle } from '../utils/Toggle';\nimport { Judge } from '../types/Judge';\nimport { Trash } from 'react-bootstrap-icons';\n\n\ntype JudgeRowProps = {\n    judge: Judge,\n    updateJudge: (judge: Judge) => void,\n    deleteJudge: (judge: Judge) => void\n}\n\nclass JudgeRow extends React.PureComponent<JudgeRowProps> {\n    constructor(props: JudgeRowProps) {\n        super(props);\n\n        this.handleJudgeUpdate = this.handleJudgeUpdate.bind(this);\n    }\n\n    handleJudgeUpdate(name: string, value: string | boolean) {\n        const judge = {...this.props.judge, [name]: value};\n        this.props.updateJudge(judge);\n    }\n    \n    render() {\n        const judge = this.props.judge;\n\n        return (\n            <tr>\n                <td className=\"judge-table-name editable\">\n                    <EditText\n                        name=\"name\"\n                        init={judge.name}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-school editable\">\n                    <EditText\n                        name=\"school\"\n                        init={judge.school}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"canChair\"\n                        init={judge.canChair}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound1\"\n                        init={judge.atRound1}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound2\"\n                        init={judge.atRound2}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound3\"\n                        init={judge.atRound3}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"table-delete\">\n                    <button className=\"btn-none\"\n                        title={`Remove ${judge.name}`}\n                        onClick={() => this.props.deleteJudge(judge)}>\n                        <Trash className=\"icon trash\" />\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default JudgeRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Judges.scss';\nimport JudgeRow from './JudgeRow';\nimport { Judge } from '../types/Judge';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { AwardFill, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgesProps = {\n    judges: Judge[],\n    updateJudges: (judges: Judge[]) => void,\n    getTotalTeams: () => number\n}\n\ntype JudgesState = {\n    addJudgeForm: {\n        judgeName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Judges extends React.PureComponent<JudgesProps, JudgesState> {\n    constructor(props: JudgesProps) {\n        super(props);\n\n        this.state = {\n            addJudgeForm: {\n                judgeName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddJudgeFormChange = this.handleAddJudgeFormChange.bind(this);\n        this.handleAddJudgeFormSubmit = this.handleAddJudgeFormSubmit.bind(this);\n        this.updateJudge = this.updateJudge.bind(this);\n        this.deleteJudge = this.deleteJudge.bind(this);\n    }\n\n\n    handleAddJudgeFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const {name, value} = event.target;\n        let judgeAddFormState = {...this.state.addJudgeForm};\n        judgeAddFormState[name] = value;\n        this.setState({addJudgeForm: judgeAddFormState});\n    }\n\n    handleAddJudgeFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let counter = JSON.parse(localStorage.getItem(\"judgeCounter\")!);\n\n        const newJudge: Judge = {\n            judgeID: counter++,\n            name: this.state.addJudgeForm.judgeName,\n            school: this.state.addJudgeForm.school,\n            canChair: false,\n            atRound1: true, atRound2: true, atRound3: true\n        }\n        const newJudges = [...this.props.judges, newJudge];\n\n        this.props.updateJudges(newJudges);\n        localStorage.setItem(\"judgeCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addJudgeForm};\n        blankForm.name = \"\";\n        this.setState({addJudgeForm: blankForm});\n    }\n\n    updateJudge(judge: Judge) {\n        let judges = [...this.props.judges];\n        const index = judges.findIndex(el => el.judgeID === judge.judgeID);\n        judges[index] = judge;\n        this.props.updateJudges(judges);\n    }\n\n    deleteJudge(judge: Judge) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        \n        // Check if the judge has already been part of a round\n        let inRound = false;\n        for (const round of draws) {\n            for(const pair of round.roomsOne) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n            for(const pair of round.roomsTwo) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n        }\n        if(inRound) {\n            alert(\"This judge has already taken part in a round. You can't delete them anymore. You can still change their availability for each round.\");\n            return false;\n        }\n\n        // Confirm deletion\n        const conf = window.confirm(`Are you sure you want to delete judge ${judge.name}?`);\n        if(conf) {\n            let judges = [...this.props.judges];\n\n            const index = judges.findIndex(el => el.judgeID === judge.judgeID);\n            judges.splice(index, 1);\n\n            this.props.updateJudges(judges);\n        }\n    }\n\n\n    render() {\n        const judges = this.props.judges;\n\n        let table;\n        if(this.props.judges.length !== 0) {\n            table = (\n                <Table className=\"judge-table table-no-top-margin\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"judge-table-name\">Name</th>\n                            <th>School</th>\n                            <th className=\"judge-table-toggle\">Chair?</th>\n                            <th className=\"judge-table-toggle\">Round 1?</th>\n                            <th className=\"judge-table-toggle\">Round 2?</th>\n                            <th className=\"judge-table-toggle\">Round 3?</th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.judges.map(judge => {\n                            return (\n                                <JudgeRow\n                                    key={`judge-row-${judge.name}`}\n                                    judge={judge}\n                                    updateJudge={this.updateJudge}\n                                    deleteJudge={this.deleteJudge} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n        }\n\n        const totalRooms = Math.round(this.props.getTotalTeams() / 2);\n        const chairsR1 = judges.filter(el => el.canChair && el.atRound1).length;\n        const chairsR2 = judges.filter(el => el.canChair && el.atRound2).length;\n        const chairsR3 = judges.filter(el => el.canChair && el.atRound3).length;\n\n        return (\n            <Tab.Container id={`judges-view`} defaultActiveKey=\"judges\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav no-show-sm\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" className=\"sub-nav-link\">\n                                    <AwardFill className=\"btn-icon\" />\n                                    Judges\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"judges\">\n                                <h2>Judges</h2>\n                                <Row>\n                                    <Col>\n                                        <Form onSubmit={this.handleAddJudgeFormSubmit}>\n                                            <Form.Row>\n                                                <Col md={4}>\n                                                    <Form.Label srOnly>Judge name</Form.Label>\n                                                    <Form.Control\n                                                        name=\"judgeName\"\n                                                        type=\"text\"\n                                                        placeholder=\"Name\"\n                                                        value={this.state.addJudgeForm.judgeName}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col md={4}>\n                                                    <Form.Label srOnly>Judge school</Form.Label>\n                                                    <Form.Control\n                                                        name=\"school\"\n                                                        type=\"text\"\n                                                        placeholder=\"School\"\n                                                        value={this.state.addJudgeForm.school}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col>\n                                                    <Button\n                                                        variant=\"primary\"\n                                                        className=\"btn-submit\"\n                                                        type=\"submit\">\n                                                        Add judge\n                                                    </Button>\n                                                </Col>\n                                            </Form.Row>\n                                        </Form>\n                                        <div id=\"total-judges\">\n                                            <p>\n                                                Total judges each round: {this.props.judges.filter(el => el.atRound1).length} &middot; {this.props.judges.filter(el => el.atRound2).length} &middot; {this.props.judges.filter(el => el.atRound3).length}\n                                                <br />\n                                                Total chairs each round: {chairsR1} &middot; {chairsR2} &middot; {chairsR3}\n                                                <br />\n                                                <span className={(totalRooms > chairsR1 || totalRooms > chairsR2 || totalRooms > chairsR3) ? \"red\" : \"\"}>\n                                                    Total chairs needed: {totalRooms}\n                                                </span>\n                                            </p>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col lg={10} xl={9} className=\"table-col\">\n                                        {table}\n                                    </Col>\n                                </Row>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Judges;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Team } from '../types/Team';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype TeamPillProps = {\n    team: Team,\n    hasConflict: boolean,\n    teams: Team[],\n    updateRoom: (thisTeamID: number, swapTeamID: number) => void\n}\n\ntype TeamPillState = {\n    swapTeamID: number\n}\n\nclass TeamPill extends React.PureComponent<TeamPillProps, TeamPillState> {\n    constructor(props: TeamPillProps) {\n        super(props);\n\n        this.state = {\n            swapTeamID: this.props.team.teamID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n        this.popFocus = this.popFocus.bind(this);\n        this.returnFocus = this.returnFocus.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({swapTeamID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.team.teamID, this.state.swapTeamID);\n        document.body.click();\n    }\n\n    popFocus() {\n        document.getElementById(`team-check-${this.props.team.teamID}`)?.focus();\n    }\n\n    returnFocus() {\n        document.getElementById(`teampill-btn-${this.props.team.teamID}`)?.focus();\n    }\n\n\n    render() {\n        const team = this.props.team;\n\n        const popover = (\n            <Popover id=\"teampill-popover\">\n                <Popover.Title as=\"h3\">Switch teams</Popover.Title>\n                <Popover.Content>\n                    <Form onSubmit={this.handleRoomFormSubmit}>\n                        <Form.Label srOnly>Team to swap with</Form.Label>\n                        {this.props.teams.map(mappedTeam => {\n                            return (\n                                <Form.Check custom\n                                    key={`team-check-${mappedTeam.teamID}`}\n                                    id={`team-check-${mappedTeam.teamID}`}\n                                    name=\"room\"\n                                    type=\"radio\"\n                                    label={mappedTeam.name}\n                                    value={mappedTeam.teamID}\n                                    checked={this.state.swapTeamID === mappedTeam.teamID}\n                                    onChange={this.handleRoomFormChange} />\n                            );\n                        })}\n                        <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">\n                            Change\n                        </Button>\n                    </Form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                trigger=\"click\"\n                placement=\"right\"\n                overlay={popover}\n                onEntered={this.popFocus}\n                onExited={this.returnFocus}\n                rootClose >\n                <button\n                    id={`teampill-btn-${team.teamID}`}\n                    className={`pill btn-none ${this.props.hasConflict ? \"orange\" : \"\"}`}>\n                    {team.name}\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TeamPill;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Judge } from '../types/Judge';\nimport { Room } from '../types/Room';\nimport { Draw } from '../types/Draw';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype JudgePillProps = {\n    judge: Judge,\n    isChair: boolean,\n    hasConflict: boolean,\n    hasChairedBefore: boolean,\n    room: Room,\n    draw: Draw,\n    updateRoom: (judgeID: number, isChair: boolean, newRoomID: number) => void\n}\n\ntype JudgePillState = {\n    roomID: number\n}\n\nclass JudgePill extends React.Component<JudgePillProps, JudgePillState> {\n    constructor(props: JudgePillProps) {\n        super(props);\n\n        this.state = {\n            roomID: this.props.room.roomID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n        this.popFocus = this.popFocus.bind(this);\n        this.returnFocus = this.returnFocus.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({roomID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.judge.judgeID, this.props.isChair, this.state.roomID);\n        document.body.click();\n    }\n\n    popFocus() {\n        document.getElementById(`room-check-${this.props.room.roomID}`)?.focus();\n    }\n\n    returnFocus() {\n        document.getElementById(`judgepill-btn-${this.props.judge.judgeID}`)?.focus();\n    }\n\n\n    render() {\n        const judge = this.props.judge;\n\n        const popover = (\n            <Popover id=\"judgepill-popover\">\n                <Popover.Title as=\"h3\">Switch rooms</Popover.Title>\n                <Popover.Content>\n                    {(this.props.draw.roomsOne.map(room => room.name).includes(\"\") ||\n                      this.props.draw.roomsTwo.map(room => room.name).includes(\"\") )\n                        ?\n                        <p>You need to assign each debate to a room before you can switch judges.</p>\n                        :\n                        <Form onSubmit={this.handleRoomFormSubmit}>\n                            <Form.Label srOnly>Room</Form.Label>\n                            {this.props.draw.roomsOne.map(room => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${room.roomID}`}\n                                        id={`room-check-${room.roomID}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            {this.props.draw.roomsTwo.map(room => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${room.roomID}`}\n                                        id={`room-check-${room.roomID}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">\n                                Change\n                            </Button>\n                        </Form>}\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                trigger=\"click\"\n                placement=\"right\"\n                overlay={popover}\n                onEntered={this.popFocus}\n                onExited={this.returnFocus}\n                rootClose >\n                <button id={`judgepill-btn-${judge.judgeID}`}\n                    className={`pill btn-none\n                        ${this.props.hasConflict ? \"red\" : \"\"}\n                        ${this.props.hasChairedBefore ? \"orange\" : \"\"}`} >\n                    {judge.name}{this.props.isChair ? \"\\u00A9\" : \"\"}\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default JudgePill;","import React from 'react';\nimport TeamPill from './TeamPill';\nimport JudgePill from './JudgePill';\nimport { EditText } from '../utils/EditText';\nimport { Room } from '../types/Room';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\n\n\ntype RoundRowProps = {\n    room: Room,\n    div: number,\n    round: number,\n    speakers: Speaker[],\n    teams: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateRooms: (room: Room, div: number) => void\n}\n\nclass RoundRow extends React.PureComponent<RoundRowProps> {\n    constructor(props: RoundRowProps) {\n        super(props);\n\n        this.handleRoomUpdate = this.handleRoomUpdate.bind(this);\n        this.updateRoomTeam = this.updateRoomTeam.bind(this);\n        this.updateRoomJudge = this.updateRoomJudge.bind(this);\n    }\n\n\n    handleRoomUpdate(name: string, value: string) {\n        const room = {...this.props.room, [name]: value};\n        this.props.updateRooms(room, this.props.div);\n    }\n\n    updateRoomTeam(thisTeamID: number, swapTeamID: number) {\n        const div = this.props.div;\n        const round = this.props.round - 1;\n        let draw = this.props.draws[round];\n        let thisRoom = this.props.room;\n\n        let rooms;\n        if(div === 1) rooms = draw.roomsOne;\n        else rooms = draw.roomsTwo;\n\n        let thisTeamPos = \"prop\";\n        if(thisRoom.opp === thisTeamID) thisTeamPos = \"opp\";\n\n        let newRoom: Room;\n        for(let checkRoom of rooms) {\n            if(checkRoom.prop === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.prop] = [checkRoom.prop, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.prop] = [checkRoom.prop, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n\n            } else if(checkRoom.opp === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.opp] = [checkRoom.opp, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.opp] = [checkRoom.opp, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n            }\n        }\n\n        this.props.updateRooms(newRoom!, div);\n        this.props.updateRooms(thisRoom, div);\n    }\n\n    updateRoomJudge(judgeID: number, isChair: boolean, newRoomID: number) {\n        const round = this.props.round - 1;\n        let room = {...this.props.room};\n        let draw = this.props.draws[round];\n        const roomlistOne = draw.roomsOne.map(r => r.roomID);\n        const nextDiv = roomlistOne.includes(newRoomID) ? 1 : 2;\n\n        let rooms;\n        if(nextDiv === 1) rooms = [...draw.roomsOne];\n        else rooms = [...draw.roomsTwo];\n\n        const newRoom = rooms.findIndex(r => r.roomID === newRoomID);\n\n        if(!isChair) {\n            rooms[newRoom].wings.push(judgeID);\n            const oldIndex = room.wings.indexOf(judgeID);\n            room.wings.splice(oldIndex, 1);\n        } else {\n            const swapChairID = rooms[newRoom].chair;\n            if(swapChairID === judgeID) return false;\n\n            const conf = window.confirm(`You are about to swap the chairs ${this.props.judges.find(j => j.judgeID === judgeID)!.name} and ${this.props.judges.find(j => j.judgeID === swapChairID)!.name}. Do you wish to continue?`);\n            if(conf) {\n                rooms[newRoom].chair = judgeID;\n                room.chair = swapChairID;\n            } else return false;\n        }\n        this.props.updateRooms(rooms[newRoom], nextDiv);\n        this.props.updateRooms(room, this.props.div);\n    }\n\n\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n        const judges = this.props.judges;\n        const room = this.props.room;\n        const round = this.props.round;\n        const draws = this.props.draws;\n        const div = this.props.div;\n\n        const prop = teams.find(el => el.teamID === room.prop)!;\n        const opp = teams.find(el => el.teamID === room.opp)!;\n        const chair = judges.find(el => el.judgeID === room.chair)!;\n\n\n        // Compile a list of speakers' schools for determining judge conflicts\n        let speakersInTeams: Speaker[] = [];\n        if(round === 1) {\n            prop.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else if(round === 2) {\n            prop.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else {\n            prop.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        }\n        let speakerSchools: string[] = [];\n        speakersInTeams\n            .filter(sp => sp !== undefined)\n            .forEach(sp => speakerSchools.push(sp.school));\n\n\n        // Initialize values for next checks\n        let roomNum: string;\n        if(div === 1) roomNum = \"roomsOne\";\n        else roomNum = \"roomsTwo\";\n\n\n        // Check whether the teams have met before\n        let teamConflict = false;\n        if(round === 2 || round === 3) {\n            let propsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            propsR1 = rooms.map(r => r.prop);\n\n            if(propsR1.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n        if(round === 3) {\n            let propsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            propsR2 = rooms.map(r => r.prop);\n\n            if(propsR2.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n\n\n        // Check whether the chair has chaires the teams before\n        let hasChairedBefore = false;\n        if(round === 2 || round === 3) {\n            let chairsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            chairsR1 = rooms.map(r => r.chair);\n\n            if(chairsR1.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n        if(round === 3) {\n            let chairsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            chairsR2 = rooms.map(r => r.chair);\n\n            if(chairsR2.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n\n\n        return (\n            <tr>\n                <td className=\"editable draw-table-room-cell\">\n                    <EditText\n                        name=\"name\"\n                        init={room.name}\n                        placeholder=\"room\"\n                        fn={this.handleRoomUpdate} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={prop}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={opp}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td>\n                    <div className=\"judgepill-container\">\n                        <JudgePill\n                            judge={chair}\n                            isChair={true}\n                            hasConflict={speakerSchools.includes(chair.school)}\n                            hasChairedBefore={hasChairedBefore}\n                            room={room}\n                            draw={draws[round - 1]}\n                            updateRoom={this.updateRoomJudge} />\n                    </div>\n                    {room.wings.length !== 0 ? \",\\u00A0\" : \"\"}\n                    {room.wings.map((el, index) => {\n                        let wing = judges.find(j => j.judgeID === el)!;\n                        return (\n                            <div key={`judgepil-${index}`} className=\"judgepill-container\">\n                                <JudgePill\n                                    judge={wing}\n                                    isChair={false}\n                                    hasConflict={speakerSchools.includes(wing.school)}\n                                    hasChairedBefore={false}\n                                    room={room}\n                                    draw={draws[round - 1]}\n                                    updateRoom={this.updateRoomJudge} />\n                                {index < room.wings.length - 1 ? \",\\u00A0\" : \"\"}\n                            </div>\n                        );\n                    })}\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default RoundRow;","import React from 'react';\nimport './Round.scss';\nimport RoundRow from './RoundRow';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport { Room } from '../types/Room';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { Bullseye, ArrowRepeat, Trash, ArrowsAngleExpand, InfoCircle } from 'react-bootstrap-icons';\n\n\ntype RoundProps = {\n    round: number,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateDraws: (draws: Draw[]) => void\n}\n\ntype RoundState = {\n    fullScreen: boolean\n}\n\nclass Round extends React.PureComponent<RoundProps, RoundState> {\n    constructor(props: RoundProps) {\n        super(props);\n\n        this.state = {\n            fullScreen: false\n        }\n\n        this.generateDraw = this.generateDraw.bind(this);\n        this.regenerateDraw = this.regenerateDraw.bind(this);\n        this.deleteDraw = this.deleteDraw.bind(this);\n        this.updateRooms = this.updateRooms.bind(this);\n        this.fullScreenDraw = this.fullScreenDraw.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n    }\n\n\n    generateDraw() {\n        const round = this.props.round;\n        let draws = [...this.props.draws];\n\n        // Check whether previous or next draws have happened\n        if(round === 1) {\n            if(draws[1].generated || draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 2) {\n            if(!draws[0].generated) {\n                alert(\"You can't generate the draw for round 2 before generating the draw for round 1.\");\n                return false;\n            } else if(draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 3) {\n            if(!draws[0].generated || !draws[1].generated) {\n                alert(\"You can't generate the draw for round 3 before generating the draws for rounds 1 and 2.\");\n                return false;\n            }\n        }\n\n        // Initialize values\n        let teamsOne = this.props.teamsOne;\n        let teamsTwo = this.props.teamsTwo;\n        let judges = this.props.judges;\n        const len1 = teamsOne.length;\n        const len2 = teamsTwo.length;\n\n        // Don't run the draw if division one has no teams\n        if(len1 === 0) {\n            alert(\"Add some teams to generate the draw.\");\n            return;\n        }\n\n        // Check for an even number of teams\n        if(len1 % 2 !== 0 && len2 % 2 !== 0) {\n            alert(\"Both divisions have an odd number of teams. A team from one division debating a team from the other division is not currently supported. Please add or remove a team to/from both in order to continue.\")\n            return false;\n        } else if(len1 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![0]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        } else if(len2 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![1]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        }\n\n        // Select only the judges that are available this round\n        let availableJudges: Judge[];\n        if(round === 1) {\n            availableJudges = judges.filter(el => el.atRound1 === true);\n        } else if(round === 2) {\n            availableJudges = judges.filter(el => el.atRound2 === true);\n        } else {\n            availableJudges = judges.filter(el => el.atRound3 === true);\n        }\n\n        // Split chairs and wings\n        const chairs = availableJudges.filter(el => el.canChair === true);\n        let wings = availableJudges.filter(el => el.canChair === false);\n\n        // Check whether there are enough chairs\n        const totalTeams = len1 + len2;\n        if(chairs.length < totalTeams / 2) {\n            alert(\"There are not enough chairs to adjudicate every room. Please add some more.\");\n            return false;\n        }\n\n        // Shuffle chairs for random picking\n        for (let i = chairs.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [chairs[i], chairs[j]] = [chairs[j], chairs[i]];\n        }\n\n        // Select chairs and put the rest as wings\n        while(chairs.length > totalTeams / 2) {\n            wings.push(chairs.pop()!);\n        }\n\n        // Generate pairings\n        let roomCounter = JSON.parse(localStorage.getItem(\"roomCounter\")!);\n        let roomsOne = [];\n        let roomsTwo = [];\n        let t1 = teamsOne.slice(0);\n        let t2 = teamsTwo.slice(0);\n\n        if(round === 1) {\n            // Generate lists of teams in random order\n            for (let i = len1 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t1[i], t1[j]] = [t1[j], t1[i]];\n            }\n            for (let i = len2 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t2[i], t2[j]] = [t2[j], t2[i]];\n            }\n        } else {\n            // Generate lists of teams in order of team wins, then total team points\n            t1.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n            t2.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n        }\n\n        // For round 2, make sure everyone is on another side\n        if(round === 2) {\n            const roundOneRoomsOne = draws[0].roomsOne;\n            const roundOneRoomsTwo = draws[0].roomsTwo;\n            const propsOne = roundOneRoomsOne.map(r => r.prop);\n            const propsTwo = roundOneRoomsTwo.map(r => r.opp);\n\n            t1.forEach((team, index) => {\n                let wasProp = false;\n                if(propsOne.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n            t2.forEach((team, index) => {\n                let wasProp = false;\n                if(propsTwo.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n\n        // Distribute teams and chairs\n        let currPropID, currOppID, currChair, currChairID;\n        for (let i = 0; i < len1; i += 2) {\n            currPropID = t1[i].teamID;\n            currOppID = t1[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsOne[i / 2] = newRoom;\n        }\n        for (let i = 0; i < len2; i += 2) {\n            currPropID = t2[i].teamID;\n            currOppID = t2[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsTwo[i / 2] = newRoom;\n        }\n\n        // Add wings\n        while(wings.length > 0) {\n            for (let i = 0; i < roomsOne.length; i++) {\n                roomsOne[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n            if(wings.length === 0) {\n                break;\n            }\n            for (let i = 0; i < roomsTwo.length; i++) {\n                roomsTwo[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n        }\n\n        // Randomize row order\n        for (let i = roomsOne.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsOne[i], roomsOne[j]] = [roomsOne[j], roomsOne[i]];\n        }\n        for (let i = roomsTwo.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsTwo[i], roomsTwo[j]] = [roomsTwo[j], roomsTwo[i]];\n        }\n\n        // Save in storage\n        const drawr: Draw = {\n            generated: true,\n            roomsOne: roomsOne,\n            roomsTwo: roomsTwo\n        }\n        if(round === 1) {\n            draws[0] = drawr;\n        } else if(round === 2) {\n            draws[1] = drawr;\n        } else {\n            draws[2] = drawr;\n        }\n        this.props.updateDraws(draws);\n\n        localStorage.setItem(\"roomCounter\", JSON.stringify(roomCounter));\n    }\n\n    regenerateDraw() {\n        const confGen = window.confirm(\"Do you really want to regenerate the draw?\");\n        if(!confGen) {\n            return false;\n        }\n\n        this.generateDraw();\n    }\n\n    deleteDraw() {\n        const round = this.props.round;\n        let draws = [...this.props.draws];\n\n        if(round === 1 && (draws[1].generated || draws[2].generated)) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        } else if(round === 2 && draws[2].generated) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        }\n\n        let conf = window.confirm(`Are you sure you want to delete the draw for round ${round}?`);\n        if(!conf) return false;\n\n        const draw: Draw = {\n            generated: false,\n            roomsOne: [],\n            roomsTwo: []\n        }\n        if(round === 1) {\n            draws[0] = draw;\n        } else if(round === 2) {\n            draws[1] = draw;\n        } else {\n            draws[2] = draw;\n        }\n        this.props.updateDraws(draws);\n    }\n\n\n    updateRooms(room: Room, div: number) {\n        let draws = [...this.props.draws];\n        let rooms;\n        if(div === 1) {\n            rooms = draws[this.props.round - 1].roomsOne;\n        } else {\n            rooms = draws[this.props.round - 1].roomsTwo;\n        }\n\n        const index = rooms.findIndex(r => r.roomID === room.roomID);\n        rooms[index] = room;\n\n        if(div === 1) {\n            draws[this.props.round - 1].roomsOne = rooms;\n        } else {\n            draws[this.props.round - 1].roomsTwo = rooms;\n        }\n        this.props.updateDraws(draws);\n    }\n\n\n    fullScreenDraw() {\n        this.setState({fullScreen: true});\n        document.documentElement.requestFullscreen();\n    }\n\n    modalHide() {\n        this.setState({fullScreen: false});\n        if(document.fullscreenElement !== null) {\n            document.exitFullscreen();\n        }\n    }\n\n\n    render() {\n        const generated = this.props.draws[this.props.round - 1].generated;\n\n        let tables;\n        if(!generated) {\n            tables = <div className=\"draw-placeholder\"></div>;\n        } else {\n            tables = (\n                <div>\n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![0] : \"Draw\"}</h3>\n                    <Table className=\"table-no-top-margin draw-table-one\" hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.props.draws[this.props.round - 1].roomsOne.map((room, index) => {\n                                    return <RoundRow \n                                            key={`one-room-${index}`}\n                                            room={room}\n                                            div={1}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersOne}\n                                            teams={this.props.teamsOne}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                    \n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![1] : \"\"}</h3>\n                    <Table className={`table-no-top-margin ${this.props.config.numDivisions === 1 ? \"hidden\" : \"\"}`} hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.props.draws[this.props.round - 1].roomsTwo.map((room, index) => {\n                                    return <RoundRow \n                                            key={`two-room-${index}`}\n                                            room={room}\n                                            div={2}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersTwo}\n                                            teams={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <h2>Round {this.props.round}</h2>\n                <Row className=\"draw-header\">\n                    <Col>\n                        <Button\n                            onClick={this.generateDraw}\n                            className={generated ? \"hidden\" : \"\"}>\n                            <Bullseye className=\"btn-icon\"/>\n                            Generate draw\n                        </Button>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={this.regenerateDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <ArrowRepeat className=\"btn-icon\" />\n                            Regenerate draw\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={this.deleteDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <Trash className=\"btn-icon\" />\n                            Delete draw\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.fullScreenDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <ArrowsAngleExpand className=\"btn-icon\" />\n                            Display fullscreen\n                        </Button>\n                        <div className={`draw-legend ${!generated ? \"hidden\" : \"\"}`}>\n                            <OverlayTrigger\n                                placement=\"bottom-start\"\n                                overlay={\n                                    <Popover className=\"popover-explainer\" id=\"draw-legend-popover\">\n                                        <Popover.Content>\n                                            Teams in <span className=\"orange\">orange</span> have already debated each other before.<br />\n                                            Chairs in <span className=\"orange\">orange</span> have already chaired one of the teams in their room before.<br />\n                                            Judges in <span className=\"red\">red</span> clash with one of the teams in their room.<br />\n                                            Note that these colors do not show up when the draw is displayed fullscreen.\n                                        </Popover.Content>\n                                    </Popover>\n                                } \n                                rootClose>\n                                <abbr title=\"\" tabIndex={0}><p>\n                                    <InfoCircle className=\"icon-info\" />\n                                    &nbsp;&nbsp;<span>Legend</span>\n                                </p></abbr>\n                            </OverlayTrigger>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={10} xl={9} className=\"table-col\">\n                        {tables}\n                    </Col>\n                </Row>\n\n                <Modal\n                    show={this.state.fullScreen}\n                    onHide={this.modalHide}\n                    backdrop=\"static\"\n                    size=\"xl\"\n                    className=\"draw-modal\"\n                    dialogClassName=\"draw-modal-dialog\"\n                    backdropClassName=\"draw-modal-backdrop\">\n                    <Modal.Header closeButton>\n                        Draw Round {this.props.round}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"draw-modal-table\">\n                            {tables}\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Round;","import React from 'react';\nimport Round from './Round';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { CircleHalf } from 'react-bootstrap-icons';\n\n\ntype DrawsProps = {\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateDraws: (draws: Draw[]) => void\n}\n\nclass Draws extends React.PureComponent<DrawsProps> {\n    render() {\n        return (\n            <Tab.Container id={`draw-view`} defaultActiveKey=\"round-1\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Nav.Item key={`draw-nav-${round}`}>\n                                        <Nav.Link eventKey={`round-${round}`} className=\"sub-nav-link\">\n                                            <CircleHalf className=\"btn-icon\" />\n                                            Round {round}\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                );\n                            })}\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Tab.Pane key={`draw-pane-${round}`} eventKey={`round-${round}`}>\n                                        <Round\n                                            round={round}\n                                            config={this.props.config}\n                                            speakersOne={this.props.speakersOne}\n                                            speakersTwo={this.props.speakersTwo}\n                                            teamsOne={this.props.teamsOne}\n                                            teamsTwo={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateDraws={this.props.updateDraws} />\n                                    </Tab.Pane>\n                                )\n                            })}\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Draws;","import React from 'react';\nimport './App.scss';\nimport logo from './images/logo.svg';\nimport pkg from '../package.json';\nimport SetupScreen from './setup/SetupScreen';\nimport Home from './home/Home';\nimport Participants from './participants/Participants';\nimport Judges from './judges/Judges';\nimport Draws from './draws/Draws';\nimport { Speaker } from './types/Speaker';\nimport { Team } from './types/Team';\nimport { Judge } from './types/Judge';\nimport { Draw } from './types/Draw';\nimport { Config } from './types/Config';\nimport Container from 'react-bootstrap/Container';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Collapse from 'react-bootstrap/Collapse';\nimport { List } from 'react-bootstrap-icons';\n\n\ntype AppProps = {}\n\ntype AppState = {\n    showMenu: boolean,\n    init: boolean,\n    tournamentName: string,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nconst s = JSON.stringify;\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        if(!localStorage.getItem(\"init\")) {\n            localStorage.setItem(\"init\", s(false));\n        }\n        if(!localStorage.getItem(\"tournamentName\")) {\n            localStorage.setItem(\"tournamentName\", s(\"New tournament\"));\n        }\n        if(!localStorage.getItem(\"config\")) {\n            localStorage.setItem(\"config\", s({version: pkg.version, numDivisions: 0}));\n        }\n        if(!localStorage.getItem(\"speakersOne\")) {\n            localStorage.setItem(\"speakersOne\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsOne\")) {\n            localStorage.setItem(\"teamsOne\", s([]));\n        }\n        if(!localStorage.getItem(\"speakersTwo\")) {\n            localStorage.setItem(\"speakersTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsTwo\")) {\n            localStorage.setItem(\"teamsTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"speakerCounter\")) {\n            localStorage.setItem(\"speakerCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"teamCounter\")) {\n            localStorage.setItem(\"teamCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"judges\")) {\n            localStorage.setItem(\"judges\", s([]));\n        }\n        if(!localStorage.getItem(\"judgeCounter\")) {\n            localStorage.setItem(\"judgeCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"draws\")) {\n            localStorage.setItem(\"draws\", s([\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []}\n            ]));\n        }\n        if(!localStorage.getItem(\"roomCounter\")) {\n            localStorage.setItem(\"roomCounter\", s(0));\n        }\n\n        this.state = {\n            showMenu: false,\n            init: JSON.parse(localStorage.getItem(\"init\")!),\n            tournamentName: JSON.parse(localStorage.getItem(\"tournamentName\")!),\n            config: JSON.parse(localStorage.getItem(\"config\")!),\n            speakersOne: JSON.parse(localStorage.getItem(\"speakersOne\")!),\n            speakersTwo: JSON.parse(localStorage.getItem(\"speakersTwo\")!),\n            teamsOne: JSON.parse(localStorage.getItem(\"teamsOne\")!),\n            teamsTwo: JSON.parse(localStorage.getItem(\"teamsTwo\")!),\n            judges: JSON.parse(localStorage.getItem(\"judges\")!),\n            draws: JSON.parse(localStorage.getItem(\"draws\")!)\n        }\n\n        this.toggleMenu = this.toggleMenu.bind(this);\n\n        this.updateStorage = this.updateStorage.bind(this);\n        this.updateTournamentName = this.updateTournamentName.bind(this);\n        this.updateInit = this.updateInit.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n        this.updateSpeakersOne = this.updateSpeakersOne.bind(this);\n        this.updateSpeakersTwo = this.updateSpeakersTwo.bind(this);\n        this.updateTeamsOne = this.updateTeamsOne.bind(this);\n        this.updateTeamsTwo = this.updateTeamsTwo.bind(this);\n        this.updateJudges = this.updateJudges.bind(this);\n        this.updateDraws = this.updateDraws.bind(this);\n\n        this.initializeTournament = this.initializeTournament.bind(this);\n        this.getTotalTeams = this.getTotalTeams.bind(this);\n\n        document.title = `${JSON.parse(localStorage.getItem(\"tournamentName\")!)} - TacoTab`;\n    }\n\n\n    // Toggle menu\n    toggleMenu() {\n        if(this.state.showMenu) {\n            this.setState({ showMenu: false });\n        } else {\n            this.setState({ showMenu: true });\n        }\n    }\n\n\n    // Global methods to update local storage and state\n    updateStorage = (key: string) => {\n        return (value: any) => {\n            localStorage.setItem(key, JSON.stringify(value));\n            this.setState<never>({ [key]: value })\n        }\n    };\n\n    updateTournamentName = (name: string) => {\n        this.updateStorage(\"tournamentName\")(name)\n        document.title = `${name} - TacoTab`;\n    }\n\n    updateInit = this.updateStorage(\"init\");\n    updateConfig = this.updateStorage(\"config\");\n    updateSpeakersOne = this.updateStorage(\"speakersOne\");\n    updateSpeakersTwo = this.updateStorage(\"speakersTwo\");\n    updateTeamsOne = this.updateStorage(\"teamsOne\");\n    updateTeamsTwo = this.updateStorage(\"teamsTwo\");\n    updateJudges = this.updateStorage(\"judges\");\n    updateDraws = this.updateStorage(\"draws\");\n\n\n    // Global helper methods\n    initializeTournament = (\n        tournamentName: string,\n        numDivisions: number,\n        divisionNames: string[]) => {\n\n            this.updateTournamentName(tournamentName);\n            \n            let config: Config = {\n                version: pkg.version,\n                numDivisions: numDivisions\n            }\n            if(numDivisions !== 1) {\n                config.divisionNames = [...divisionNames];\n            }\n            this.updateConfig(config);\n\n            this.updateInit(true);\n    }\n\n    getTotalTeams() {\n        return this.state.teamsOne.length + this.state.teamsTwo.length;\n    }\n\n\n\n    render() {\n        let participants_nav, participants_panes;\n        if(this.state.config.numDivisions !== 2) {\n            participants_nav = (\n                <Nav.Item>\n                    <Nav.Link eventKey=\"participants\" title=\"Participants\">Participants</Nav.Link>\n                </Nav.Item>\n            );\n            participants_panes = (\n                <Tab.Pane eventKey=\"participants\">\n                    <Participants\n                        div={1}\n                        speakers={this.state.speakersOne}\n                        teams={this.state.teamsOne}\n                        updateSpeakers={this.updateSpeakersOne}\n                        updateTeams={this.updateTeamsOne} />\n                </Tab.Pane>\n            );\n        } else {\n            participants_nav = (\n                <>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divone\" title={this.state.config.divisionNames![0]}>{this.state.config.divisionNames![0]}</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divtwo\" title={this.state.config.divisionNames![1]}>{this.state.config.divisionNames![1]}</Nav.Link>\n                    </Nav.Item>\n                </>\n            );\n            participants_panes = (\n                <>\n                    <Tab.Pane eventKey=\"divone\">\n                        <Participants\n                            div={1}\n                            speakers={this.state.speakersOne}\n                            teams={this.state.teamsOne}\n                            updateSpeakers={this.updateSpeakersOne}\n                            updateTeams={this.updateTeamsOne} />\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"divtwo\">\n                        <Participants\n                            div={2}\n                            speakers={this.state.speakersTwo}\n                            teams={this.state.teamsTwo}\n                            updateSpeakers={this.updateSpeakersTwo}\n                            updateTeams={this.updateTeamsTwo} />\n                    </Tab.Pane>\n                </>\n            );\n        }\n\n\n        return (\n            <>\n            <Container fluid className=\"app\">\n                <div id=\"logo\">\n                    <img src={logo} alt=\"TacoTab logo\" />\n                    <h1>TacoTab</h1>\n                </div>\n\n                <div id=\"hamburger\">\n                    <List \n                        onClick={this.toggleMenu}\n                        role=\"button\"\n                        aria-controls=\"app-nav\"\n                        aria-expanded={this.state.showMenu} />\n                </div>\n\n                <Tab.Container id=\"app-nav\" defaultActiveKey=\"home\" transition={false}>\n                    <Collapse in={this.state.showMenu}>\n                        <Nav className=\"main-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"home\" title=\"Home\">Home</Nav.Link>\n                            </Nav.Item>\n                            {participants_nav}\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" title=\"Judges\">Judges</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"draw\" title=\"Draw\">Draw</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Collapse>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"home\">\n                            <Home\n                                tournamentName={this.state.tournamentName}\n                                config={this.state.config}\n                                updateTournamentName={this.updateTournamentName}\n                                updateConfig={this.updateConfig} />\n                        </Tab.Pane>\n                        {participants_panes}\n                        <Tab.Pane eventKey=\"judges\">\n                            <Judges\n                                judges={this.state.judges}\n                                updateJudges={this.updateJudges}\n                                getTotalTeams={this.getTotalTeams} />\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"draw\">\n                            <Draws\n                                config={this.state.config}\n                                speakersOne={this.state.speakersOne}\n                                speakersTwo={this.state.speakersTwo}\n                                teamsOne={this.state.teamsOne}\n                                teamsTwo={this.state.teamsTwo}\n                                judges={this.state.judges}\n                                draws={this.state.draws}\n                                updateDraws={this.updateDraws} />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Tab.Container>\n            </Container>\n\n            <SetupScreen\n                init={this.state.init}\n                initializeTournament={this.initializeTournament} />\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport * as serviceWorker from './serviceWorker';\nimport Alert from 'react-bootstrap/Alert';\nimport { ExclamationTriangle } from 'react-bootstrap-icons';\n\n\nexport const ServiceWorkerWrapper = () => {\n    const [showReload, setShowReload] = useState(false);\n    const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);\n\n    const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n        setShowReload(true);\n        setWaitingWorker(registration.waiting);\n    };\n\n    useEffect(() => {\n        serviceWorker.register({ onUpdate: onSWUpdate });\n    }, []);\n\n    const reloadPage = () => {\n        waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n        setShowReload(false);\n        window.location.reload(true);\n    }\n\n    return (\n        <Alert\n            show={showReload}\n            variant=\"primary\"\n            className=\"alert-global\">\n                <ExclamationTriangle />&nbsp;&nbsp;\n                A new version of TacoTab is available! <Alert.Link onClick={reloadPage}>Click to reload.</Alert.Link>\n        </Alert>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.scss';\nimport App from './App';\nimport { ServiceWorkerWrapper } from './ServiceWorkerWrapper';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ServiceWorkerWrapper />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}