{"version":3,"sources":["images/icon-github.svg","utils/importTournament.ts","setup/SetupScreen.tsx","home/Start.tsx","home/Settings.tsx","home/Home.tsx","utils/EditText.tsx","utils/Toggle.tsx","participants/SpeakerRow.tsx","participants/Speakers.tsx","participants/TeamSpeakerSelect.tsx","participants/TeamWinSelector.tsx","participants/TwoPersonTeamTooltip.tsx","participants/SpeakerDropDown.tsx","utils/getDistinctSpeakers.ts","types/Team.ts","participants/TeamRow.tsx","participants/TeamTable.tsx","participants/Teams.tsx","utils/sortTeams.ts","participants/Ranking.tsx","participants/Participants.tsx","judges/JudgeRow.tsx","judges/Judges.tsx","draws/TeamPill.tsx","draws/JudgePill.tsx","draws/RoundRow.tsx","draws/Round.tsx","draws/Draws.tsx","App.tsx","serviceWorker.ts","ServiceWorkerWrapper.tsx","index.tsx","images/logo.svg"],"names":["module","exports","s","JSON","stringify","importTournament","files","length","fr","FileReader","onload","event","result","parse","target","localStorage","setItem","init","config","version","semver","lt","importConfig","scoreReplies","pkg","tournamentName","speakersOne","teamsOne","speakersTwo","teamsTwo","speakerCounter","teamCounter","judges","judgeCounter","draws","roomCounter","tournament_name","divisions","numDivisions","importSpeakersOne","speakers_one","map","speaker","newSpeaker","speakerID","debaterID","importTeamsOne","teams_one","team","newTeam","name","teamName","round1","sp","parseInt","round2","round3","sideR1","importSpeakersTwo","speakers_two","importTeamsTwo","teams_two","speakers_counter","teams_counter","importJudges","judge","newJudge","atRound1","r1","atRound2","r2","atRound3","r3","judges_counter","importDraws","draw","newDraw","roomsOne","pairings_one","pairing","newRoom","roomID","room","roomsTwo","pairings_two","readAsText","item","window","location","reload","SetupScreen","props","state","setupForm","divisionOneName","divisionTwoName","setupFormValidated","importFormValidated","handleSetupFormChange","bind","handleSetupFormSubmit","importData","value","Number","checked","setupFormState","this","setState","preventDefault","currentTarget","checkValidity","stopPropagation","divisionNames","initializeTournament","document","getElementById","Modal","show","backdrop","animation","className","dialogClassName","backdropClassName","aria-labelledby","Header","Title","id","src","logo","alt","Body","href","rel","Tabs","defaultActiveKey","Tab","eventKey","title","Form","noValidate","validated","onSubmit","Group","controlId","Label","Control","type","required","placeholder","onChange","Feedback","Check","inline","custom","label","Collapse","in","Row","Col","md","srOnly","OverlayTrigger","placement","overlay","Popover","Content","tabIndex","Button","variant","accept","htmlFor","React","Component","Start","lg","Alert","CardDeck","Card","bg","text","border","Text","disabled","PureComponent","Settings","nameForm","nameFormValidated","nameSaved","showWhatsNew","showPrivacy","handleNameFormChange","handleNameFormSubmit","exportData","clearData","hideWhatsNew","hidePrivacy","bsCustomFileInput","updateTournamentName","setTimeout","data","encodeURIComponent","getItem","replace","toLowerCase","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","confirm","clear","sm","xl","xs","onClick","Date","getFullYear","GitHubLogo","onHide","closeButton","Home","Container","transition","Nav","Item","Link","Pane","updateConfig","EditText","cols","maxLength","fn","baggage","useState","setValue","rows","autoComplete","spellCheck","onKeyDown","which","blur","onBlur","Toggle","on","setOn","SpeakerRow","handleSpeakerUpdate","updateSpeaker","key","school","disqualified","deleteSpeaker","Speakers","addSpeakerForm","speakerName","handleAddSpeakerFormChange","handleAddSpeakerFormSubmit","addSpeakerFormState","counter","scores","ranks","wins","newSpeakers","speakers","updateSpeakers","blankForm","index","findIndex","el","teams","includes","alert","splice","table","Table","hover","bordered","Tooltip","TeamSpeakerSelect","roundKey","round","speakerPos","handleFormChange","handleUpdateTeamFormChange","teamID","as","children","TeamWinSelector","win","handleWinFormUpdate","updateTeam","toString","TwoPersonTeamTooltip","SpeakerDropDown","getDistinctSpeakers","push","Set","getTotalTeamWins","filter","x","getTotalReplyPoints","replyScores","reduce","y","TeamRow","updateTeamForm","showModal","showWarning","handleTeamUpdate","modalShow","modalHide","handleTeamMembersUpdate","isNaN","numValue","bag","find","updateTeamFormState","indexOf","speakerRows","isInR1","isInR2","isInR3","totalScores","totalRanks","div","isInR","r","Fragment","scores1","forEach","scores2","scores3","ranks1","ranks2","ranks3","totalPoints","teamSpeakerSelects","rowSpan","deleteTeam","colSpan","size","TeamTable","Teams","addTeamForm","speaker1","speaker2","speaker3","addTeamFormValidated","handleAddTeamFormChange","handleAddTeamFormSubmit","addTeamFormState","memberList","newTeams","updateTeams","rooms","pair","prop","opp","teamTable","noTeams","hidden","sortTeams","sort","a","b","a_wins","b_wins","a_rpoints","b_rpoints","a_tpoints","b_tpoints","Ranking","speaker_ranking","slice","a_sum","b_sum","a_ranks","b_ranks","a_team","b_team","undefined","team_ranking","speakerIDs","speakerNames","currSpeaker","speakerElements","striped","Participants","JudgeRow","handleJudgeUpdate","updateJudge","judgeID","canChair","deleteJudge","Judges","addJudgeForm","judgeName","handleAddJudgeFormChange","handleAddJudgeFormSubmit","judgeAddFormState","newJudges","updateJudges","inRound","chair","wings","totalRooms","Math","getTotalTeams","chairsR1","chairsR2","chairsR3","TeamPill","swapTeamID","handleRoomFormChange","handleRoomFormSubmit","popFocus","returnFocus","updateRoom","focus","popover","mappedTeam","trigger","onEntered","onExited","rootClose","hasConflict","JudgePill","isChair","hasChairedBefore","RoundRow","handleRoomUpdate","updateRoomTeam","updateRoomJudge","updateRooms","thisTeamID","thisRoom","thisTeamPos","checkRoom","newRoomID","nextDiv","swapChairID","j","oldIndex","speakersInTeams","roomNum","speakerSchools","teamConflict","roomR1","wing","Round","fullScreen","generateDraw","regenerateDraw","deleteDraw","fullScreenDraw","generated","len1","len2","availableJudges","chairs","totalTeams","i","floor","random","pop","t1","t2","roundOneRoomsOne","roundOneRoomsTwo","propsOne","propsTwo","wasProp","iWasProp","drawr","updateDraws","documentElement","requestFullscreen","fullscreenElement","exitFullscreen","tables","Draws","App","updateStorage","updateInit","updateSpeakersOne","updateSpeakersTwo","updateTeamsOne","updateTeamsTwo","showMenu","toggleMenu","participants_nav","participants_panes","fluid","role","aria-controls","aria-expanded","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","serviceWorker","ready","registration","unregister","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","useEffect","postMessage","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ddfb563.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-github.026cb8cd.svg\";","import pkg from '../../package.json';\nimport semver from 'semver';\nconst s = JSON.stringify;\n\nexport const importTournament = (files: FileList) => {\n    if(files.length <= 0) return false;\n\n    const fr = new FileReader();\n    fr.onload = event => {\n        const result = JSON.parse(event.target!.result as string);\n\n        // CHECK IF PROPER TOURNAMENT EXPORT\n        if(!(\"init\" in result)\n            || !((\"tournamentName\" in result) || (\"tournament_name\" in result))\n            || !(\"config\" in result)\n            || !((\"speakersOne\" in result) || (\"speakers_one\" in result))\n            || !((\"speakersTwo\" in result) || (\"speakers_two\" in result))\n            || !((\"teamsOne\" in result) || (\"teams_one\" in result))\n            || !((\"teamsTwo\" in result) || (\"teams_two\" in result))\n            || !((\"speakerCounter\" in result) || (\"speakers_counter\" in result))\n            || !(\"judges\" in result)\n            || !((\"judgeCounter\" in result) || (\"judges_counter\" in result))\n            || !(\"draws\" in result))\n            {\n                return false;\n            }\n\n        localStorage.setItem(\"init\", s(result.init));\n        // COMPATIBILITY WITH EXPORTS BEFORE VERSION 0.3.0\n        if(!result.config.version) {\n            localStorage.setItem(\"tournamentName\", s(result.tournament_name));\n\n            let importConfig = result.config;\n            importConfig.version = pkg.version;\n            if(importConfig.divisions === \"1\") {\n                importConfig.numDivisions = 1;\n            } else {\n                importConfig.numDivisions = 2;\n            }\n            delete importConfig.divisions\n            importConfig.scoreReplies = false;\n            localStorage.setItem(\"config\", s(importConfig));\n\n            let importSpeakersOne = result.speakers_one.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersOne\", s(importSpeakersOne));\n\n            let importTeamsOne = result.teams_one.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsOne\", s(importTeamsOne));\n\n            let importSpeakersTwo = result.speakers_two.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersTwo\", s(importSpeakersTwo));\n\n            let importTeamsTwo = result.teams_two.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsTwo\", s(importTeamsTwo));\n\n            localStorage.setItem(\"speakerCounter\", s(result.speakers_counter));\n            localStorage.setItem(\"teamCounter\", s(result.teams_counter));\n\n            let importJudges = result.judges.map((judge: any) => {\n                let newJudge = {\n                    ...judge,\n                    atRound1: judge.r1,\n                    atRound2: judge.r2,\n                    atRound3: judge.r3\n                }\n                delete newJudge.r1\n                delete newJudge.r2\n                delete newJudge.r3\n                return newJudge\n            });\n            localStorage.setItem(\"judges\", s(importJudges));\n\n            localStorage.setItem(\"judgeCounter\", s(result.judges_counter));\n\n            let roomCounter = 0;\n            let importDraws = result.draws.map((draw: any) => {\n                let newDraw = {\n                    ...draw,\n                    roomsOne: draw.pairings_one.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    }),\n                    roomsTwo: draw.pairings_two.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    })\n                }\n                delete newDraw.pairings_one\n                delete newDraw.pairings_two\n                return newDraw\n            });\n            localStorage.setItem(\"draws\", s(importDraws));\n            localStorage.setItem(\"roomCounter\", s(roomCounter));\n\n        // COMPATIBILITY WITH EXPORTS FROM VERSIONS 0.3.0 < 0.5.0\n        } else if (semver.lt(result.config.version, \"0.5.0\")) {\n            let importConfig = result.config;\n            importConfig.scoreReplies = false;\n            importConfig.version = pkg.version;\n\n            localStorage.setItem(\"tournamentName\", s(result.tournamentName));\n            localStorage.setItem(\"config\", s(importConfig));\n            localStorage.setItem(\"speakersOne\", s(result.speakersOne));\n            localStorage.setItem(\"teamsOne\", s(result.teamsOne));\n            localStorage.setItem(\"speakersTwo\", s(result.speakersTwo));\n            localStorage.setItem(\"teamsTwo\", s(result.teamsTwo));\n            localStorage.setItem(\"speakerCounter\", s(result.speakerCounter));\n            localStorage.setItem(\"teamCounter\", s(result.teamCounter));\n            localStorage.setItem(\"judges\", s(result.judges));\n            localStorage.setItem(\"judgeCounter\", s(result.judgeCounter));\n            localStorage.setItem(\"draws\", s(result.draws));\n            localStorage.setItem(\"roomCounter\", s(result.roomCounter));\n\n        // CURRENT EXPORTS\n        } else {\n            localStorage.setItem(\"tournamentName\", s(result.tournamentName));\n            localStorage.setItem(\"config\", s(result.config));\n            localStorage.setItem(\"speakersOne\", s(result.speakersOne));\n            localStorage.setItem(\"teamsOne\", s(result.teamsOne));\n            localStorage.setItem(\"speakersTwo\", s(result.speakersTwo));\n            localStorage.setItem(\"teamsTwo\", s(result.teamsTwo));\n            localStorage.setItem(\"speakerCounter\", s(result.speakerCounter));\n            localStorage.setItem(\"teamCounter\", s(result.teamCounter));\n            localStorage.setItem(\"judges\", s(result.judges));\n            localStorage.setItem(\"judgeCounter\", s(result.judgeCounter));\n            localStorage.setItem(\"draws\", s(result.draws));\n            localStorage.setItem(\"roomCounter\", s(result.roomCounter));\n        }\n\n    }\n    fr.readAsText(files.item(0) as File);\n\n    window.location.reload();\n}","import React, { ChangeEvent, FormEvent } from 'react';\nimport './SetupScreen.scss';\nimport logo from '../images/logo.svg';\nimport { importTournament } from '../utils/importTournament';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { InfoCircle } from 'react-bootstrap-icons';\n\n\ntype SetupScreenProps = {\n    init: boolean,\n    initializeTournament: (tournamentName: string, numDivisions: number, divisionNames: string[], scoreReplies: boolean) => void\n}\n\ntype SetupScreenState = {\n    setupForm: {\n        tournamentName: string,\n        numDivisions: number,\n        divisionOneName: string,\n        divisionTwoName: string,\n        scoreReplies: boolean,\n        [key: string]: string|number|boolean\n    },\n    setupFormValidated: boolean,\n    importFormValidated: boolean\n}\n\nclass SetupScreen extends React.Component<SetupScreenProps, SetupScreenState> {\n    constructor(props: SetupScreenProps) {\n        super(props);\n\n        this.state = {\n            setupForm: {\n                tournamentName: \"\",\n                numDivisions: 1,\n                divisionOneName: \"\",\n                divisionTwoName: \"\",\n                scoreReplies: false\n            },\n            setupFormValidated: false,\n            importFormValidated: false\n        }\n\n        this.handleSetupFormChange = this.handleSetupFormChange.bind(this);\n        this.handleSetupFormSubmit = this.handleSetupFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n    }\n\n\n    handleSetupFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number|boolean;\n\n        if(name === \"numDivisions\") value = Number(event.target.value);\n        else if(name === \"scoreReplies\") value = event.target.checked;\n        else value = event.target.value;\n\n        let setupFormState = {...this.state.setupForm};\n        setupFormState[name] = value;\n        this.setState({ setupForm: setupFormState });\n    }\n\n    handleSetupFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({setupFormValidated: true});\n            return false;\n        }\n\n        const numDivisions = this.state.setupForm.numDivisions;\n        const divisionNames =[this.state.setupForm.divisionOneName, this.state.setupForm.divisionTwoName];\n        if(numDivisions === 2 && (divisionNames[0] === \"\" || divisionNames[1] === \"\")) return false;\n\n        this.setState({setupFormValidated: false});\n        this.props.initializeTournament(this.state.setupForm.tournamentName, numDivisions, divisionNames, this.state.setupForm.scoreReplies);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({importFormValidated: true});\n            return false;\n        }\n\n        const files = (document.getElementById(\"importSetup\") as HTMLInputElement).files;\n        if (files === null) return false;\n\n        this.setState({importFormValidated: false});\n        importTournament(files);\n    }\n\n\n    render() {\n        return (\n            <Modal\n                show={!this.props.init}\n                backdrop=\"static\"\n                animation={false}\n                className=\"setup-modal\"\n                dialogClassName=\"setup-modal-dialog\"\n                backdropClassName=\"setup-modal-backdrop\"\n                aria-labelledby=\"setup-modal-title\" >\n                <Modal.Header>\n                    <Modal.Title id=\"setup-modal-title\">\n                        <img src={logo} alt=\"TacoTab logo\" id=\"setup-logo\" />\n                        Welcome to TacoTab!\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk&mdash;this app might bite.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                    <p>You can create a new tournament from scratch, or import data from a previous TacoTab tournament.</p>\n                    \n                    <Tabs defaultActiveKey=\"createnew\" id=\"setup-tabs\">\n                        <Tab eventKey=\"createnew\" title=\"New tournament\">\n                            <Form\n                                noValidate\n                                validated={this.state.setupFormValidated}\n                                onSubmit={this.handleSetupFormSubmit}>\n                                <Form.Group controlId=\"setupFormTournamentName\">\n                                    <Form.Label className=\"h5\">Tournament name</Form.Label>\n                                    <Form.Control\n                                        name=\"tournamentName\"\n                                        type=\"text\"\n                                        required\n                                        placeholder=\"e.g. 'Bard MS-HS 2020'\"\n                                        value={this.state.setupForm.tournamentName}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please enter a name for the tournament.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <h5>Speaker divisions</h5>\n                                <Form.Group controlId=\"setupFormNumDivisions\">\n                                    <Form.Label>Number of speaker divisions:&nbsp;&nbsp;</Form.Label>\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"1\"\n                                        value={1}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-1\"\n                                        checked={this.state.setupForm.numDivisions === 1}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"2\"\n                                        value={2}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-2\"\n                                        checked={this.state.setupForm.numDivisions === 2}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <Collapse in={this.state.setupForm.numDivisions === 2}>\n                                    <div>\n                                        <Form.Label>Give both divisions a name for easy identification.</Form.Label>\n                                        <Form.Row>\n                                            <Col md={6}>\n                                                <Form.Group controlId=\"setupFormDivisionNameOne\">\n                                                    <Form.Label srOnly>Name for division one</Form.Label>\n                                                    <Form.Control\n                                                        name=\"divisionOneName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Novice'\"\n                                                        required={this.state.setupForm.numDivisions === 2}\n                                                        value={this.state.setupForm.divisionOneName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please enter a name.\n                                                    </Form.Control.Feedback>\n                                                </Form.Group>\n                                            </Col>\n                                            <Col md={6}>\n                                                <Form.Group controlId=\"setupFormDivisionNameTwo\">\n                                                    <Form.Label srOnly>Name for division two</Form.Label>\n                                                    <Form.Control\n                                                        name=\"divisionTwoName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Open'\"\n                                                        required={this.state.setupForm.numDivisions === 2}\n                                                        value={this.state.setupForm.divisionTwoName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please enter a name.\n                                                    </Form.Control.Feedback>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n                                    </div>\n                                </Collapse>\n\n                                <h5>Options</h5>\n                                <Form.Check custom\n                                    id=\"setupFormScoreReplies\"\n                                    name=\"scoreReplies\"\n                                    type=\"checkbox\"\n                                    checked={this.state.setupForm.scoreReplies}\n                                    onChange={this.handleSetupFormChange}\n                                    label={\n                                        <>\n                                            Score reply speeches\n                                            <OverlayTrigger\n                                                placement=\"top\"\n                                                overlay={\n                                                    <Popover className=\"popover-explainer\" id=\"popover-scorerepliesexplanation\">\n                                                        <Popover.Content>\n                                                            Selecting this option will enable you to enter a score for each reply speech, which will be used as an extra tie breaker in determining the team ranking.\n                                                        </Popover.Content>\n                                                    </Popover>\n                                                }>\n                                                <InfoCircle tabIndex={0} className=\"icon-info\" />\n                                            </OverlayTrigger>\n                                        </>\n                                    }\n                                />\n\n                                <Button variant=\"primary\" type=\"submit\" id=\"setup-form-submit\">\n                                    Create the tournament\n                                </Button>\n                            </Form>\n                        </Tab>\n\n                        <Tab eventKey=\"importnew\" title=\"Import tournament\">\n                            <p>Open files generated with the Export function.</p>\n                            <Form\n                                noValidate\n                                validated={this.state.importFormValidated}\n                                onSubmit={this.importData}>\n                                <Form.Row>\n                                    <Col md={9}>\n                                        <div className=\"custom-file\">\n                                            <Form.Control\n                                                name=\"import\"\n                                                id=\"importSetup\"\n                                                className=\"custom-file-input\"\n                                                type=\"file\"\n                                                required\n                                                accept=\".tournament,.json\" />\n                                            <label className=\"custom-file-label\" htmlFor=\"importSetup\">Choose file</label>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please select a file from your computer.\n                                            </Form.Control.Feedback>\n                                        </div>\n                                    </Col>\n                                    <Col md={3}>\n                                        <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default SetupScreen;","import React from 'react';\nimport './Start.scss';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Button from 'react-bootstrap/Button';\nimport { CheckCircleFill, People, JournalText, QuestionCircle } from 'react-bootstrap-icons';\n\n\nclass Start extends React.PureComponent {\n    render() {\n        return (<>\n            <Row>\n                <Col lg={8} className=\"col-override-padding\">\n                    <h2>Start</h2>\n                    <Alert variant=\"success\">\n                        <CheckCircleFill />&nbsp;&nbsp;\n                        The tournament is set up and running correctly. Congrats, you can do this!\n                    </Alert>\n                </Col>\n            </Row>\n            <Row className=\"get-started-row\">\n                <Col className=\"col-override-padding\">\n                    <h3>Getting started</h3>\n                    <CardDeck>\n                        <Card bg=\"light\" text=\"dark\" border=\"primary\">\n                            <Card.Body>\n                                <Card.Title>\n                                    <People />\n                                    Add participants\n                                </Card.Title>\n                                <Card.Text>\n                                    You don't have to do all the work the night before the tournament. As soon as the first speakers and judges are confirmed, you can start adding them. Don't worry if you don't have the final configurations yet&mdash;everything can be edited or deleted later!\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                        <Card bg=\"light\" text=\"dark\" border=\"secondary\">\n                            <Card.Body>\n                                <Card.Title>\n                                    <JournalText />\n                                    Read the documentation\n                                </Card.Title>\n                                <Card.Text>\n                                    A detailed manual on how to tab tournaments using TacoTab is currently under construction. Check back soon!\n                                </Card.Text>\n                                <Button variant=\"secondary\" disabled>\n                                    Coming soon\n                                </Button>\n                            </Card.Body>\n                        </Card>\n                        <Card bg=\"light\" text=\"dark\" border=\"danger\">\n                            <Card.Body>\n                                <Card.Title>\n                                    <QuestionCircle />\n                                    Get help\n                                </Card.Title>\n                                <Card.Text>\n                                    Technical trouble? Rayo lives in Eindhoven, the Netherlands, and you are welcome to stop by for tea sometime to discuss your issues.\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </CardDeck>\n                </Col>\n            </Row>\n        </>);\n    }\n}\n\nexport default Start;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Settings.scss';\nimport GitHubLogo from '../images/icon-github.svg';\nimport pkg from '../../package.json';\nimport { Config } from '../types/Config';\nimport { importTournament } from '../utils/importTournament';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport { Download, Trash, CheckCircleFill } from 'react-bootstrap-icons';\n\n\ntype SettingsProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\ntype SettingsState = {\n    nameForm: string,\n    nameFormValidated: boolean,\n    nameSaved: boolean,\n    importFormValidated: boolean,\n    showWhatsNew: boolean,\n    showPrivacy: boolean\n}\n\nclass Settings extends React.PureComponent<SettingsProps, SettingsState> {\n    constructor(props: SettingsProps) {\n        super(props);\n\n        this.state = {\n            nameForm: \"\",\n            nameFormValidated: false,\n            nameSaved: false,\n            importFormValidated: false,\n            showWhatsNew: false,\n            showPrivacy: false\n        }\n\n        this.handleNameFormChange = this.handleNameFormChange.bind(this);\n        this.handleNameFormSubmit = this.handleNameFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n        this.exportData = this.exportData.bind(this);\n        this.clearData = this.clearData.bind(this);\n        this.showWhatsNew = this.showWhatsNew.bind(this);\n        this.hideWhatsNew = this.hideWhatsNew.bind(this);\n        this.showPrivacy = this.showPrivacy.bind(this);\n        this.hidePrivacy = this.hidePrivacy.bind(this);\n    }\n\n    componentDidMount() {\n        bsCustomFileInput.init();\n    }\n\n\n    handleNameFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({nameForm: event.target.value});\n    }\n\n    handleNameFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({nameFormValidated: true});\n            return false;\n        }\n\n        const name = this.state.nameForm;\n        this.props.updateTournamentName(name);\n        this.setState({nameForm: \"\"});\n        this.setState({nameFormValidated: false});\n        this.setState({nameSaved: true});\n        setTimeout(() => this.setState({nameSaved: false}), 3000);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({importFormValidated: true});\n            return false;\n        }\n\n        const files = (document.getElementById(\"import-settings\") as HTMLInputElement).files;\n        if (files === null) return false;\n\n        this.setState({importFormValidated: false});\n        importTournament(files);\n    }\n\n    exportData() {\n        let data = \"data:text/json;charset=utf-8,\";\n        data += encodeURIComponent(\"{\");\n        data += encodeURIComponent('\"init\": ' + localStorage.getItem(\"init\") + \",\");\n        data += encodeURIComponent('\"tournamentName\": ' + localStorage.getItem(\"tournamentName\") + \",\");\n        data += encodeURIComponent('\"config\": ' + localStorage.getItem(\"config\") + \",\");\n        data += encodeURIComponent('\"speakersOne\": ' + localStorage.getItem(\"speakersOne\") + \",\");\n        data += encodeURIComponent('\"teamsOne\": ' + localStorage.getItem(\"teamsOne\") + \",\");\n        data += encodeURIComponent('\"speakersTwo\": ' + localStorage.getItem(\"speakersTwo\") + \",\");\n        data += encodeURIComponent('\"teamsTwo\": ' + localStorage.getItem(\"teamsTwo\") + \",\");\n        data += encodeURIComponent('\"speakerCounter\": ' + localStorage.getItem(\"speakerCounter\") + \",\");\n        data += encodeURIComponent('\"teamCounter\": ' + localStorage.getItem(\"teamCounter\") + \",\");\n        data += encodeURIComponent('\"judges\": ' + localStorage.getItem(\"judges\") + \",\");\n        data += encodeURIComponent('\"judgeCounter\": ' + localStorage.getItem(\"judgeCounter\") + \",\");\n        data += encodeURIComponent('\"draws\": ' + localStorage.getItem(\"draws\") + \",\");\n        data += encodeURIComponent('\"roomCounter\": ' + localStorage.getItem(\"roomCounter\"));\n        data += encodeURIComponent(\"}\");\n        \n        let name = this.props.tournamentName;\n        name = name.replace(/\\s+/g, '-').toLowerCase();\n        name += \".tournament\";\n\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", data);\n        downloadAnchorNode.setAttribute(\"download\", name);\n        document.body.appendChild(downloadAnchorNode);\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n \n    clearData() {\n        const conf = window.confirm(\"Are you sure you want to delete all data?\");\n        if(!conf) return false;\n        localStorage.clear();\n        window.location.reload();\n    }\n\n    showWhatsNew() { this.setState({showWhatsNew: true}); }\n    hideWhatsNew() { this.setState({showWhatsNew: false}); }\n    showPrivacy() { this.setState({showPrivacy: true}); }\n    hidePrivacy() { this.setState({showPrivacy: false}); }\n\n\n    render() {\n        return (\n            <>\n                <div>\n                    <h2>Settings</h2>\n                    <Row>\n                        <Col lg={8} className=\"col-override-padding\">\n                            <p>Manage your tournament.</p>\n                            <section>\n                                <h3>Change tournament name</h3>\n                                <Form\n                                    noValidate\n                                    validated={this.state.nameFormValidated}\n                                    onSubmit={this.handleNameFormSubmit}>\n                                    <Form.Row>\n                                        <Col sm={9} xl={6}>\n                                            <Form.Label srOnly>Tournament name</Form.Label>\n                                            <Form.Control\n                                                name=\"tournamentName\"\n                                                type=\"text\"\n                                                placeholder=\"New name\"\n                                                required\n                                                value={this.state.nameForm}\n                                                onChange={this.handleNameFormChange} />\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please enter a name for the tournament.\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                        <Col>\n                                            <Button\n                                                variant={this.state.nameSaved ? \"success\" : \"primary\"}\n                                                disabled={this.state.nameSaved}\n                                                id=\"btn-save-tournament-name\"\n                                                type=\"submit\">\n                                                {this.state.nameSaved ? <CheckCircleFill /> : \"Save\"}\n                                            </Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Import tournament data</h3>\n                                <p>Open files generated with the Export function below. <strong>Note:</strong> this will override all current data!</p>\n                                <Form\n                                    noValidate\n                                    validated={this.state.importFormValidated}\n                                    onSubmit={this.importData}>\n                                    <Form.Row>\n                                        <Col xs={9} xl={6}>\n                                            <div className=\"custom-file\">\n                                                <Form.Label srOnly>Select tournament file</Form.Label>\n                                                <Form.Control\n                                                    name=\"import\"\n                                                    id=\"import-settings\"\n                                                    className=\"custom-file-input\"\n                                                    type=\"file\"\n                                                    required\n                                                    accept=\".tournament,.json\" />\n                                                <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    Please select a file from your computer.\n                                                </Form.Control.Feedback>\n                                            </div>\n                                        </Col>\n                                        <Col>\n                                            <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Export tournament data</h3>\n                                <p>Save all tournament data to a file on your PC.</p>\n                                <Button\n                                    variant=\"primary\"\n                                    onClick={this.exportData}>\n                                    <Download className=\"btn-icon\" />\n                                    Export data\n                                </Button>\n                            </section>\n                            <section id=\"section-cleardata\">\n                                <h3>Clear tournament data</h3>\n                                <p>Warning: this will delete <strong>all</strong> entered data. Save your data using the Export function first.</p>\n                                <Button\n                                    variant=\"danger\"\n                                    onClick={this.clearData}>\n                                    <Trash className=\"btn-icon\" />\n                                    Clear data\n                                </Button>\n                            </section>\n                        </Col>\n                        <Col lg={4} className=\"col-override-padding\">\n                            <section id=\"section-about\">\n                                <h3>About</h3>\n                                <p>\n                                    TacoTab β version {pkg.version}<br />\n                                    &copy; {new Date().getFullYear()} Rayo Verweij<br />\n                                    <img src={GitHubLogo} alt=\"GitHub logo\" id=\"logo-github\"/>&nbsp;\n                                    <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                        GitHub\n                                    </a>\n                                    &nbsp;&middot;&nbsp;<Button variant=\"link\" onClick={this.showWhatsNew}>What's new</Button>\n                                    &nbsp;&middot;&nbsp;<Button variant=\"link\" onClick={this.showPrivacy}>Privacy</Button>\n                                </p>\n                                <p>\n                                    <a href=\"https://rayo.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Check out more of Rayo's work</a> or <a href=\"https://debate.bard.edu\" rel=\"noopener noreferrer\" target=\"_blank\">visit the Bard Debate Union</a>&mdash;Bard's best sports team!\n                                </p>\n                            </section>\n                        </Col>\n                    </Row>\n                </div>\n\n                <Modal\n                    show={this.state.showWhatsNew}\n                    onHide={this.hideWhatsNew}\n                    className=\"whatsnew-modal\"\n                    aria-labelledby=\"whatsnew-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"whatsnew-modal-title\">\n                            What's new\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            New in version {pkg.version}:\n                            <ul>\n                                <li>General: there is now an option for tournaments to include scores for reply speeches, as an extra tie breaker</li>\n                                <li>Home: a new start screen was added with tips to get started and links to the documentation</li>\n                            </ul>\n                            For an overview of changes made in previous versions, see <a href=\"https://github.com/rayoverweij/tacotab/releases\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub</a>.\n                        </p>\n                    </Modal.Body>\n                </Modal>\n\n                <Modal\n                    show={this.state.showPrivacy}\n                    onHide={this.hidePrivacy}\n                    className=\"privacy-modal\"\n                    aria-labelledby=\"privacy-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"privacy-modal-title\">\n                            Privacy Policy\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            We don't collect or store any of your data.\n                        </p>\n                        <p>\n                            It is, quite frankly, impossible for us to do so. There are no servers, no accounts, and no analytics. All data that you enter is stored in the local storage of your browser, and never leaves the instance of the browser you are runnning right now. (In fact, you could download the app and use it without even needing an internet connection!)\n                        </p>\n                        <p>\n                            There are also no third-party services or scripts running in the background that might collect your data, or cookies of any kind. The only way for data to leave this app is if you <em>manually</em> use the \"export\" function on the Settings page.\n                        </p>\n                        <p>\n                            What happens on your computer stays on your computer!\n                        </p>\n                    </Modal.Body>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Settings;","import React from 'react';\nimport Start from './Start';\nimport Settings from './Settings';\nimport { Config } from '../types/Config';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { HouseDoorFill, GearWideConnected } from 'react-bootstrap-icons';\n\n\ntype HomeProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\nclass Home extends React.PureComponent<HomeProps> {\n    render() {\n        return (\n            <Tab.Container id=\"home-view\" defaultActiveKey=\"welcome\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"welcome\" className=\"sub-nav-link\">\n                                    <HouseDoorFill className=\"btn-icon\"/>\n                                    Start\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"settings\" className=\"sub-nav-link\">\n                                    <GearWideConnected className=\"btn-icon\"/>\n                                    Settings\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"welcome\">\n                                <Start />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"settings\">\n                                <Settings\n                                    config={this.props.config}\n                                    tournamentName={this.props.tournamentName}\n                                    updateTournamentName={this.props.updateTournamentName}\n                                    updateConfig={this.props.updateConfig} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Home;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\n\n\ntype EditTextProps = {\n    name: string,\n    init: string,\n    cols?: number,\n    maxLength?: number,\n    placeholder?: string,\n    fn: (name: string, value: string, baggage?: any) => void,\n    baggage?: any\n}\n\nexport const EditText = ({name, init, cols, maxLength, placeholder, fn, baggage}: EditTextProps) => {\n    const [value, setValue] = useState(init);\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setValue(event.target.value);\n    }\n\n    const handleLoseFocus = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if(event.which === 13) (event.target as HTMLTextAreaElement).blur();\n    }\n\n    const handleSubmit = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        event.preventDefault();\n        fn(name, value, baggage);\n    }\n\n    return (\n        <textarea\n            className=\"editText\"\n            name={name}\n            rows={1}\n            cols={cols || (value.length > 8 ? value.length : 8)}\n            maxLength={maxLength}\n            value={value}\n            autoComplete=\"off\"\n            spellCheck={false}\n            placeholder={placeholder || name}\n            onChange={handleChange}\n            onKeyDown={handleLoseFocus}\n            onBlur={handleSubmit}\n        />\n    );\n}","import React, { useState, ChangeEvent } from 'react';\nimport Form from 'react-bootstrap/Form';\n\n\ntype ToggleProps = {\n    id: number,\n    name: string,\n    init: boolean,\n    fn: (name: string, on: boolean) => void\n}\n\nexport const Toggle = ({id, name, init, fn}: ToggleProps) => {\n    const [on, setOn] = useState(init);\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setOn(event.target.checked);\n        fn(name, !on); // I have *no idea* why this can't just be fn(name, on) but here we are\n    }\n\n    return (\n        <Form.Check\n            id={`toggle-${name}-${id}`}\n            className={on ? \"on\" : \"off\"}\n            name={name}\n            type=\"switch\"\n            label=\"\"\n            checked={on}\n            onChange={handleChange} />\n    );\n}","import React from 'react';\nimport { EditText } from '../utils/EditText';\nimport { Toggle } from '../utils/Toggle';\nimport { Speaker } from '../types/Speaker';\nimport { Trash } from 'react-bootstrap-icons';\n\n\ntype SpeakerRowProps = {\n    speaker: Speaker,\n    updateSpeaker: (speaker: Speaker) => void,\n    deleteSpeaker: (speaker: Speaker) => void\n}\n\nclass SpeakerRow extends React.PureComponent<SpeakerRowProps> {\n    constructor(props: SpeakerRowProps) {\n        super(props);\n\n        this.handleSpeakerUpdate = this.handleSpeakerUpdate.bind(this);\n    }\n\n    handleSpeakerUpdate(name: string, value: string | boolean) {\n        const speaker = {...this.props.speaker, [name]: value};\n        this.props.updateSpeaker(speaker);\n    }\n\n    render() {\n        const speaker = this.props.speaker;\n\n        return (\n            <tr key={`speaker-row-${speaker.speakerID}`}>\n                <td className=\"editable\">\n                    <EditText\n                        name=\"name\"\n                        init={speaker.name}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"editable\">\n                    <EditText\n                        name=\"school\"\n                        init={speaker.school}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"cell-low-padding\">\n                    <Toggle\n                        id={speaker.speakerID}\n                        name=\"disqualified\"\n                        init={speaker.disqualified}\n                        fn={this.handleSpeakerUpdate} />\n                </td>\n                <td className=\"table-delete\">\n                    <button className=\"btn-none\"\n                        title={`Remove ${speaker.name}`}\n                        onClick={() => this.props.deleteSpeaker(speaker)}>\n                        <Trash className=\"icon trash\" />\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default SpeakerRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Speakers.scss';\nimport SpeakerRow from './SpeakerRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { TrashFill } from 'react-bootstrap-icons';\n\n\ntype SpeakersProps = {\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void\n}\n\ntype SpeakersState = {\n    addSpeakerForm: {\n        speakerName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Speakers extends React.PureComponent<SpeakersProps, SpeakersState> {\n    constructor(props: SpeakersProps) {\n        super(props);\n\n        this.state = {\n            addSpeakerForm: {\n                speakerName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddSpeakerFormChange = this.handleAddSpeakerFormChange.bind(this);\n        this.handleAddSpeakerFormSubmit = this.handleAddSpeakerFormSubmit.bind(this);\n        this.updateSpeaker = this.updateSpeaker.bind(this);\n        this.deleteSpeaker = this.deleteSpeaker.bind(this);\n    }\n\n\n    handleAddSpeakerFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target;\n        let addSpeakerFormState = {...this.state.addSpeakerForm};\n        addSpeakerFormState[name] = value;\n        this.setState({addSpeakerForm: addSpeakerFormState});\n    }\n\n    handleAddSpeakerFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let counter = JSON.parse(localStorage.getItem(\"speakerCounter\")!);\n        \n        const newSpeaker: Speaker = {\n            speakerID: counter++,\n            name: this.state.addSpeakerForm.speakerName,\n            school: this.state.addSpeakerForm.school,\n            scores: [0, 0, 0],\n            ranks: [0, 0, 0],\n            wins: 0,\n            disqualified: false\n        };\n        \n        const newSpeakers = [...this.props.speakers, newSpeaker];\n        this.props.updateSpeakers(newSpeakers);\n        \n        localStorage.setItem(\"speakerCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addSpeakerForm};\n        blankForm.speakerName = \"\";\n        this.setState({addSpeakerForm: blankForm});\n    }\n\n    updateSpeaker(speaker: Speaker) {\n        let speakers = [...this.props.speakers];\n        const index = speakers.findIndex(el => el.speakerID === speaker.speakerID);\n        speakers[index] = speaker;\n        this.props.updateSpeakers(speakers);\n    }\n\n    deleteSpeaker(speaker: Speaker) {\n        for(const team of this.props.teams) {\n            if(team.round1.includes(speaker.speakerID) || team.round2.includes(speaker.speakerID) || team.round3.includes(speaker.speakerID)) {\n                window.alert(`This speaker is still part of team ${team.name}. You need to remove them from the team before you can delete them.`);\n                return;\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete speaker ${speaker.name}?`);\n        if(conf) {\n            let speakers = [...this.props.speakers];\n            const index = speakers.findIndex(el => el.speakerID === speaker.speakerID);\n            speakers.splice(index, 1);\n            this.props.updateSpeakers(speakers);\n        }\n    }\n\n\n    render() {\n        let table;\n        if(this.props.speakers.length === 0) {\n            table = <p className=\"none-yet\">No speakers yet!</p>;\n        } else {\n            table = (\n                <Table className=\"speaker-table\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>School</th>\n                            <th>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disqualify-info\">\n                                            Disqualified speakers can still be added to teams and receive scores, but won't be listed in the ranking\n                                        </Tooltip>\n                                    }>\n                                    <abbr title=\"\">Disq</abbr>\n                                </OverlayTrigger>\n                            </th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.speakers.map(speaker => {\n                            return (\n                                <SpeakerRow \n                                    key={`speaker-row-${speaker.speakerID}`}\n                                    speaker={speaker}\n                                    updateSpeaker={this.updateSpeaker}\n                                    deleteSpeaker={this.deleteSpeaker} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n            \n            \n        }\n\n        return (\n            <div>\n                <h2>Speakers</h2>\n                <Row>\n                    <Col>\n                    \n                        <Form onSubmit={this.handleAddSpeakerFormSubmit}>\n                            <Form.Row>\n                                <Col md={4}>\n                                    <Form.Label srOnly>Speaker name</Form.Label>\n                                    <Form.Control\n                                        name=\"speakerName\"\n                                        type=\"text\"\n                                        placeholder=\"Name\"\n                                        value={this.state.addSpeakerForm.speakerName}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Label srOnly>Speaker school</Form.Label>\n                                    <Form.Control\n                                        name=\"school\"\n                                        type=\"text\"\n                                        placeholder=\"School\"\n                                        value={this.state.addSpeakerForm.school}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col>\n                                    <Button\n                                        variant=\"primary\"\n                                        className=\"btn-submit\"\n                                        type=\"submit\">\n                                        Add speaker\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={10} xl={8} className=\"table-col\">\n                        {table}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Speakers;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamSpeakerSelectProps = {\n    team: Team,\n    speakerPos: number,\n    round: number,\n    value: Array<number[]>,\n    handleUpdateTeamFormChange: (value: number, speaker: number, round: number) => void\n}\n\ntype TeamSpeakerSelectState = {\n    value: number\n}\n\nclass TeamSpeakerSelect extends React.PureComponent<TeamSpeakerSelectProps, TeamSpeakerSelectState> {\n    constructor(props: TeamSpeakerSelectProps) {\n        super(props);\n\n        let roundKey: keyof Team;\n        if(this.props.round === 1) {\n            roundKey = \"round1\";\n        } else if(this.props.round === 2) {\n            roundKey = \"round2\";\n        } else {\n            roundKey = \"round3\";\n        }\n\n        this.state = {\n            value: this.props.team[roundKey][this.props.speakerPos]\n        }\n\n        this.handleFormChange = this.handleFormChange.bind(this);\n    }\n\n\n    handleFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = parseInt(event.target.value);\n        this.setState({value: value});\n        this.props.handleUpdateTeamFormChange(value, this.props.speakerPos, this.props.round);\n    }\n\n\n    render() {\n        return (\n            <Col>\n                <Form.Group controlId={`form-update-team-${this.props.team.teamID}-speaker-${this.props.speakerPos}-round-${this.props.round}`}>\n                    <Form.Label>Round {this.props.round}</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        name={`speaker-${this.props.speakerPos}-round-${this.props.round}`}\n                        value={this.state.value}\n                        onChange={this.handleFormChange}>\n                            {this.props.speakerPos === 2 ? <option value={-1}>[averaged third speaker]</option> : \"\"}\n                            {this.props.children}\n                    </Form.Control>\n                </Form.Group>\n            </Col>\n        );\n    }\n}\n\nexport default TeamSpeakerSelect;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamWinSelectorProps = {\n    team: Team,\n    round: number,\n    updateTeam: (team: Team) => void\n}\n\ntype TeamWinSelectorState = {\n    win: boolean\n}\n\nclass TeamWinSelector extends React.PureComponent<TeamWinSelectorProps, TeamWinSelectorState> {\n    constructor(props: TeamWinSelectorProps){\n        super(props);\n\n        this.state = {\n            win: this.props.team.wins[this.props.round - 1]\n        }\n\n        this.handleWinFormUpdate = this.handleWinFormUpdate.bind(this);\n    }\n\n\n    handleWinFormUpdate(event: ChangeEvent<HTMLInputElement>) {\n        let team = {...this.props.team};\n\n        if(event.target.value === \"true\") {\n            team.wins[this.props.round - 1] = true;\n            this.setState({win: true});\n        } else {\n            team.wins[this.props.round - 1] = false;\n            this.setState({win: false});\n        }\n\n        this.props.updateTeam(team);\n    }\n\n\n    render() {\n        return (\n            <Form>\n                <Form.Label srOnly>Win or loss round {this.props.round}</Form.Label>\n                <Form.Control\n                    as=\"select\"\n                    name={`win-form-${this.props.team.teamID}-round-${this.props.round}`}\n                    value={this.state.win.toString()}\n                    onChange={this.handleWinFormUpdate}>\n                        <option value=\"true\">Win</option>\n                        <option value=\"false\">Loss</option>\n                </Form.Control>\n            </Form>\n        );\n    }\n}\n\nexport default TeamWinSelector;","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { InfoCircle } from 'react-bootstrap-icons';\n\nclass TwoPersonTeamTooltip extends React.Component {\n    render() {\n        return (\n            <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                    <Popover className=\"popover-explainer\" id=\"tooltip-totalspeakerpoints\">\n                        <Popover.Content>\n                            There are two ways to handle two-person teams. When choosing \"averaged third speaker\",\n                            the points and ranks for both speakers will be averaged. If instead you want the speeches\n                            of one team member to count double, create a new \"ghost\" speaker in the Speakers tab,\n                            disqualify them, and add them here.\n                        </Popover.Content>\n                    </Popover>\n                }>    \n                <InfoCircle tabIndex={0} className=\"icon-info\" />\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TwoPersonTeamTooltip;","import React from 'react';\nimport { Speaker } from '../types/Speaker';\n\ntype SpeakerDropDownProps = {\n    speakers: Speaker[]\n}\n\nexport const SpeakerDropDown = ({speakers}: SpeakerDropDownProps) => <>\n    {\n        speakers.map(speaker => {\n            return (\n                <option value={speaker.speakerID} key={`option-${speaker.speakerID}`}>{speaker.name}</option>\n            );\n        })\n    }\n</>","import { Team } from '../types/Team';\n\nexport function getDistinctSpeakers(team: Team) {\n    let sp = []\n    for(let s = 0; s < 3; s++) {\n        sp.push(team.round1[s]);\n        sp.push(team.round2[s]);\n        sp.push(team.round3[s]);\n    }\n    return [...new Set(sp)];\n}","export type Team = {\n    teamID: number,\n    name: string,\n    round1: [number, number, number],\n    round2: [number, number, number],\n    round3: [number, number, number],\n    totalPoints: number,\n    wins: [boolean, boolean, boolean],\n    replyScores?: [number, number, number]\n}\n\nexport const getTotalTeamWins = (team: Team) => {\n    return team.wins.filter(x => x).length;\n}\n\nexport const getTotalReplyPoints = (team: Team) => {\n    return team.replyScores!.reduce((x, y) => x + y);\n}","import React, { FormEvent } from 'react';\nimport TeamSpeakerSelect from './TeamSpeakerSelect';\nimport TeamWinSelector from './TeamWinSelector';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { SpeakerDropDown } from './SpeakerDropDown';\nimport { EditText } from '../utils/EditText';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\nimport { Speaker } from '../types/Speaker';\nimport { Team, getTotalTeamWins, getTotalReplyPoints } from '../types/Team';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { People, Trash } from 'react-bootstrap-icons';\n\n\ntype TeamRowProps = {\n    team: Team,\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    scoreReplies: boolean,\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void\n}\n\ntype TeamRowState = {\n    speakers: (number|null)[],\n    updateTeamForm: Array<[number, number, number]>,\n    showModal: boolean,\n    showWarning: boolean\n}\n\nclass TeamRow extends React.PureComponent<TeamRowProps, TeamRowState> {\n    constructor(props: TeamRowProps) {\n        super(props);\n        \n        this.state = {\n            speakers: getDistinctSpeakers(this.props.team),\n            updateTeamForm: [\n                [this.props.team.round1[0], this.props.team.round2[0], this.props.team.round3[0]],\n                [this.props.team.round1[1], this.props.team.round2[1], this.props.team.round3[1]],\n                [this.props.team.round1[2], this.props.team.round2[2], this.props.team.round3[2]]\n            ],\n            showModal: false,\n            showWarning: false\n        }\n\n        this.handleTeamUpdate = this.handleTeamUpdate.bind(this);\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleUpdateTeamFormChange = this.handleUpdateTeamFormChange.bind(this);\n        this.handleTeamMembersUpdate = this.handleTeamMembersUpdate.bind(this);\n    }\n\n\n    handleTeamUpdate(name: string, value: string, baggage?: ([Speaker, number] | number)) {\n        if(name === \"score\" || name === \"rank\") {\n            if(!value || isNaN(Number(value))) {\n                value = \"0\";\n            }\n            let numValue = Number(value);\n\n            let speakers = [...this.props.speakers];\n            let bag = baggage! as [Speaker, number];\n\n            if(name === \"score\") {\n                speakers\n                    .find(el => el.speakerID === bag[0].speakerID)!\n                    .scores[bag[1]] = numValue;\n            } else {\n                speakers\n                    .find(el => el.speakerID === bag[0].speakerID)!\n                    .ranks[bag[1]] = numValue;\n            }\n\n            this.props.updateSpeakers(speakers);\n\n        } else if(name === \"reply\") {\n            if(!value || isNaN(Number(value))) {\n                value = \"0\";\n            }\n            let numValue = Number(value);\n\n            let round = baggage! as number;\n\n            const team = {...this.props.team};\n            team.replyScores![round - 1] = numValue;\n\n            this.props.updateTeam(team);\n\n        } else {\n            const team = {...this.props.team, [name]: value};\n            this.props.updateTeam(team);\n        }\n    }\n    \n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleUpdateTeamFormChange(value: number, speakerPos: number, round: number) {\n        let updateTeamFormState = this.state.updateTeamForm;\n        updateTeamFormState[speakerPos][round - 1] = value;\n        this.setState({updateTeamForm: updateTeamFormState});\n    }\n\n    handleTeamMembersUpdate(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const newTeam = [...this.state.updateTeamForm];\n        if((newTeam[0][0] === newTeam[1][0] || newTeam[0][0] === newTeam[2][0] || newTeam[1][0] === newTeam[2][0])\n            || (newTeam[0][1] === newTeam[1][1] || newTeam[0][1] === newTeam[2][1] || newTeam[1][1] === newTeam[2][1])\n            || (newTeam[0][2] === newTeam[1][2] || newTeam[0][2] === newTeam[2][2] || newTeam[1][2] === newTeam[2][2])) {\n                this.setState({showWarning: true});\n                return false;\n            }\n\n        let team = {...this.props.team};\n        team.round1 = [newTeam[0][0], newTeam[1][0], newTeam[2][0]];\n        team.round2 = [newTeam[0][1], newTeam[1][1], newTeam[2][1]];\n        team.round3 = [newTeam[0][2], newTeam[1][2], newTeam[2][2]];\n\n        this.props.updateTeam(team);\n        this.setState({speakers: getDistinctSpeakers(this.props.team)});\n        this.setState({showWarning: false});\n        this.modalHide();\n    }\n\n\n    render() {\n        const scoreReplies = this.props.scoreReplies;\n        const team = this.props.team;\n        const speakers = this.state.speakers.map(sp => {\n            if(sp === -1) {\n                return null;\n            } else {\n                return this.props.speakers.find(el => el.speakerID === sp)!;\n            }\n        });\n\n        // Calculate average scores\n        if(speakers.includes(null)) {\n            const index = speakers.indexOf(null);\n\n            speakers[index] = {\n                speakerID: -1,\n                name: \"[averaged third speaker]\",\n                school: \"\",\n                scores: [\n                    (speakers[0]!.scores[0] + speakers[1]!.scores[0]) / 2,\n                    (speakers[0]!.scores[1] + speakers[1]!.scores[1]) / 2,\n                    (speakers[0]!.scores[2] + speakers[1]!.scores[2]) / 2\n                ],\n                ranks: [\n                    (speakers[0]!.ranks[0] + speakers[1]!.ranks[0]) / 2,\n                    (speakers[0]!.ranks[1] + speakers[1]!.ranks[1]) / 2,\n                    (speakers[0]!.ranks[2] + speakers[1]!.ranks[2]) / 2\n                ],\n                wins: 0,\n                disqualified: true\n            }\n        }\n\n        // Generate the table rows\n        const speakerRows = speakers.map(speaker => {\n            speaker = speaker!\n\n            if(speaker.speakerID === -1) {\n                return <tr key={`${team.teamID}-average-third`}></tr>;\n            }\n\n            const isInR1 = this.props.team.round1.includes(speaker.speakerID);\n            const isInR2 = this.props.team.round2.includes(speaker.speakerID);\n            const isInR3 = this.props.team.round3.includes(speaker.speakerID);\n\n            let totalScores = 0;\n            if (isInR1) totalScores += speaker.scores[0];\n            if (isInR2) totalScores += speaker.scores[1];\n            if (isInR3) totalScores += speaker.scores[2];\n\n            let totalRanks = 0;\n            if (isInR1) totalRanks += speaker.ranks[0];\n            if (isInR2) totalRanks += speaker.ranks[1];\n            if (isInR3) totalRanks += speaker.ranks[2];\n\n            return (\n                <tr key={`${speaker.speakerID}-${this.props.div}-row`}>\n                    <td>{speaker.name}</td>\n                    {\n                        [isInR1, isInR2, isInR3].map((isInR, r) => {\n                            return (\n                                <React.Fragment key={`cells-score-n-rank-${speaker!.speakerID}-${r}`}>\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <EditText\n                                            name=\"score\"\n                                            init={speaker!.scores[r].toString()}\n                                            cols={2}\n                                            maxLength={2}\n                                            placeholder=\"#\"\n                                            fn={this.handleTeamUpdate}\n                                            baggage={[speaker!, r]} />\n                                    </td>\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <EditText\n                                            name=\"rank\" \n                                            init={speaker!.ranks[r].toString()}\n                                            cols={1}\n                                            maxLength={1}\n                                            placeholder=\"#\"\n                                            fn={this.handleTeamUpdate}\n                                            baggage={[speaker!, r]} />\n                                    </td>\n                                </React.Fragment>\n                            );\n                        })\n                    }\n                    <td>{totalScores}</td>\n                    <td>{totalRanks}</td>\n                </tr>\n            );\n        });\n\n        // Calculate total scores\n        let scores1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                scores1 += speaker!.scores[0]\n            }\n        });\n        let scores2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                scores2 += speaker!.scores[1]\n            }\n        });\n        let scores3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                scores3 += speaker!.scores[2]\n            }\n        });\n\n        // Calculate total ranks\n        let ranks1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                ranks1 += speaker!.ranks[0]\n            }\n        });\n        let ranks2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                ranks2 += speaker!.ranks[1]\n            }\n        });\n        let ranks3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                ranks3 += speaker!.ranks[2]\n            }\n        });\n\n\n        // Update team scores\n        team.totalPoints = scores1 + scores2 + scores3;\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => {\n            return el.teamID === team.teamID;\n        });\n        teams[index] = team;\n        if(this.props.div === 1) {\n            localStorage.setItem(\"teamsOne\", JSON.stringify(teams));\n        } else {\n            localStorage.setItem(\"teamsTwo\", JSON.stringify(teams));\n        }\n\n        // Update the people selection picker\n        const teamSpeakerSelects = [0, 1, 2].map(speakerPos => {\n            return (\n                <div key={`teamSpeakerSelectRow-team-${team.teamID}-speaker-${speakerPos}`} className=\"form-update-team-speaker\">\n                    <p>Speaker {speakerPos + 1}</p>\n                    {speakerPos === 2 ? <TwoPersonTeamTooltip /> : \"\"}\n                    <Form.Row>\n                        {\n                            [1, 2, 3].map(round => {\n                                return (\n                                    <TeamSpeakerSelect\n                                        key={`teamSpeakerSelect-team-${team.teamID}-speaker-${round}-round-${round}`}\n                                        team={team}\n                                        speakerPos={speakerPos}\n                                        round={round}\n                                        value={this.state.updateTeamForm}\n                                        handleUpdateTeamFormChange={this.handleUpdateTeamFormChange}>\n                                            <SpeakerDropDown speakers={this.props.speakers} />\n                                    </TeamSpeakerSelect>\n                                );\n                            })\n                        }\n                    </Form.Row>\n                </div>\n            );\n        });\n\n\n        return (\n            <tbody>\n                <tr>\n                    <td rowSpan={this.state.speakers.length + (scoreReplies ? 4 : 3)} className=\"cell-teamname\">\n                        <EditText\n                            name=\"name\"\n                            init={team.name}\n                            fn={this.handleTeamUpdate} />\n                        <br />\n                        <button\n                            className=\"icon-wrapper btn-none\"\n                            title={`Change team members of ${team.name}`}\n                            onClick={this.modalShow}>\n                            <People className=\"icon people\" />\n                        </button>\n                        <button\n                            className=\"icon-wrapper btn-none\"\n                            title={`Remove ${team.name}`}\n                            onClick={() => this.props.deleteTeam(team)}>\n                            <Trash className=\"icon trash\" />\n                        </button>\n                    </td>\n                </tr>\n                {speakerRows}\n                <tr className=\"row-total\">\n                    <td>Team total</td>\n                    <td>{scores1}</td>\n                    <td>{ranks1}</td>\n                    <td>{scores2}</td>\n                    <td>{ranks2}</td>\n                    <td>{scores3}</td>\n                    <td>{ranks3}</td>\n                    <td>{scores1 + scores2 + scores3}</td>\n                    <td>{ranks1 + ranks2 + ranks3}</td>\n                </tr>\n                <tr className=\"row-wins\">\n                    <td>Team wins</td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={1} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={2} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={3} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2} className=\"cell-totalwins\">\n                        Total wins: {getTotalTeamWins(team)}\n                    </td>\n                </tr>\n                {scoreReplies ? \n                <tr>\n                    <td>Reply points</td>\n                    {\n                        [1, 2, 3].map(r => {\n                            return (\n                                <td colSpan={2} className=\"editable\" key={`reply-${team.teamID}-${r}`}>\n                                    <EditText \n                                        name=\"reply\"\n                                        init={team.replyScores![r - 1].toString()}\n                                        cols={2}\n                                        maxLength={2}\n                                        placeholder=\"#\"\n                                        fn={this.handleTeamUpdate}\n                                        baggage={r} />\n                                </td>\n                            );\n                        })\n                    }\n                    <td colSpan={2}>\n                        Total reply points: {getTotalReplyPoints(team)}\n                    </td>\n                </tr>\n                : \"\"}\n\n                <Modal show={this.state.showModal} size=\"lg\" onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Specify team members per round</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleTeamMembersUpdate}>\n                            {teamSpeakerSelects}\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to the same round more than once.\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Save\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </tbody>\n        );\n    }\n}\n\nexport default TeamRow;","import React from 'react';\nimport './TeamTable.scss';\nimport TeamRow from './TeamRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Table from 'react-bootstrap/Table';\n\n\ntype TeamTableProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    scoreReplies: boolean,\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void\n}\n\nclass TeamTable extends React.PureComponent<TeamTableProps> {\n    render() {\n        return (\n            <Table hover className=\"team-table table-no-top-margin\">\n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Speakers</th>\n                        <th>R1 Score</th>\n                        <th>R1 Rank</th>\n                        <th>R2 Score</th>\n                        <th>R2 Rank</th>\n                        <th>R3 Score</th>\n                        <th>R3 Rank</th>\n                        <th>Total Score</th>\n                        <th>Total Rank</th>\n                    </tr>\n                </thead>\n                {this.props.teams.map(team => {\n                    return <TeamRow\n                                key={`${team.name}-row`}\n                                team={team}\n                                div={this.props.div}\n                                speakers={this.props.speakers}\n                                teams={this.props.teams}\n                                scoreReplies={this.props.scoreReplies}\n                                updateSpeakers={this.props.updateSpeakers}\n                                updateTeam={this.props.updateTeam}\n                                deleteTeam={this.props.deleteTeam} />;\n                })}\n            </Table>\n        );\n    }\n}\n\nexport default TeamTable;","import React, { ChangeEvent, FormEvent } from 'react';\nimport TeamTable from './TeamTable';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { SpeakerDropDown } from './SpeakerDropDown';\n\n\ntype TeamsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    scoreReplies: boolean,\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\ntype TeamsState = {\n    addTeamForm: {\n        teamName: string,\n        speaker1: number | \"\",\n        speaker2: number | \"\",\n        speaker3: number | \"\",\n        [key: string]: string|number\n    },\n    addTeamFormValidated: boolean,\n    showModal: boolean,\n    showWarning: boolean\n}\n\nclass Teams extends React.PureComponent<TeamsProps, TeamsState> {\n    constructor(props: TeamsProps) {\n        super(props);\n\n        this.state = {\n            addTeamForm: {\n                teamName: \"\",\n                speaker1: \"\",\n                speaker2: \"\",\n                speaker3: \"\"\n            },\n            addTeamFormValidated: false,\n            showModal: false,\n            showWarning: false\n        }\n\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleAddTeamFormChange = this.handleAddTeamFormChange.bind(this);\n        this.handleAddTeamFormSubmit = this.handleAddTeamFormSubmit.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n        this.deleteTeam = this.deleteTeam.bind(this);\n    }\n\n\n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleAddTeamFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name !== \"teamName\") value = Number(value);\n        let addTeamFormState = {...this.state.addTeamForm};\n        addTeamFormState[name] = value;\n        this.setState({addTeamForm: addTeamFormState});\n    }\n\n    handleAddTeamFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if(form.checkValidity() === false) {\n            event.stopPropagation();\n            this.setState({addTeamFormValidated: true});\n            return false;\n        }\n\n        const team = {...this.state.addTeamForm}\n        if (team.speaker1 === team.speaker2 || team.speaker1 === team.speaker3 || team.speaker2 === team.speaker3) {\n            this.setState({showWarning: true});\n            return false;\n        }\n\n        let counter = JSON.parse(localStorage.getItem(\"teamCounter\")!);\n\n        const memberList = [team.speaker1, team.speaker2, team.speaker3] as [number, number, number]\n        const newTeam: Team = {\n            teamID: counter++,\n            name: team.teamName,\n            round1: memberList,\n            round2: memberList,\n            round3: memberList,\n            totalPoints: 0,\n            wins: [false, false, false]\n            };\n        if (this.props.scoreReplies) newTeam.replyScores = [0, 0, 0];\n        \n        const newTeams = [...this.props.teams, newTeam];\n\n        localStorage.setItem(\"teamCounter\", JSON.stringify(counter));\n        this.props.updateTeams(newTeams);\n\n        this.setState({addTeamForm: {\n            teamName: \"\",\n            speaker1: \"\",\n            speaker2: \"\",\n            speaker3: \"\"\n        }});\n        this.setState({showWarning: false});\n        this.setState({addTeamFormValidated: false});\n        this.modalHide();\n    }\n\n    updateTeam(team: Team) {\n        let teams = [...this.props.teams];\n        const index = teams.findIndex(el => el.teamID === team.teamID);\n        teams[index] = team;\n        this.props.updateTeams(teams);\n    }\n\n    deleteTeam(team: Team) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        for (const round in draws) {\n            let rooms;\n\n            if(this.props.div === 1) rooms = draws[round].roomsOne;\n            else rooms = draws[round].roomsTwo;\n\n            for (const pair of rooms) {\n                if(pair.prop === team.teamID || pair.opp === team.teamID) {\n                    alert(\"This team has already started the tournament. You can't delete it anymore. You can still replace its speakers.\");\n                    return;\n                }\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete team ${team.name}?`);\n        if(conf) {\n            const teams = [...this.props.teams].filter(el => el.teamID !== team.teamID);  \n            this.props.updateTeams(teams);\n        }\n    }\n\n    \n    render() {\n        let noTeams = false;\n        if(this.props.teams.length === 0) {\n            noTeams = true;\n        }\n\n        let teamTable;\n        if(noTeams) {\n            teamTable = <p className=\"none-yet\">No teams yet!</p>;\n        } else {\n            teamTable = <TeamTable\n                            div={this.props.div}\n                            speakers={this.props.speakers}\n                            teams={this.props.teams}\n                            scoreReplies={this.props.scoreReplies}\n                            updateSpeakers={this.props.updateSpeakers}\n                            updateTeam={this.updateTeam}\n                            deleteTeam={this.deleteTeam} />\n        }\n\n        return (\n            <div>\n                <h2>\n                    Teams\n                    <Button onClick={this.modalShow}>Add team</Button>\n                    <div className={`hint-add-team ${noTeams ? \"\" : \"hidden\"}`}>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                    </div>\n                </h2>\n                {teamTable}\n\n                <Modal show={this.state.showModal} onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add a team</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form\n                            noValidate\n                            validated={this.state.addTeamFormValidated}\n                            onSubmit={this.handleAddTeamFormSubmit}>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-name`}>\n                                <Form.Label>Team name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"teamName\"\n                                    required\n                                    value={this.state.addTeamForm.teamName}\n                                    onChange={this.handleAddTeamFormChange} />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please give the team a name.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-1`}>\n                                <Form.Label>Speaker 1</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker1\"\n                                    required\n                                    value={this.state.addTeamForm.speaker1}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-2`}>\n                                <Form.Label>Speaker 2</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker2\"\n                                    required\n                                    value={this.state.addTeamForm.speaker2}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-3`}>\n                                <Form.Label>Speaker 3</Form.Label>\n                                <TwoPersonTeamTooltip />\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker3\"\n                                    required\n                                    value={this.state.addTeamForm.speaker3}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option value=\"\" disabled hidden>-- pick a speaker --</option>\n                                        <option value={-1}>[averaged third speaker]</option>\n                                        <SpeakerDropDown speakers={this.props.speakers} />\n                                </Form.Control>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please choose a speaker from the list, or select [averaged third speaker] for a two-person team.\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to a team more than once.\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Add\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Teams;","import { Team, getTotalTeamWins, getTotalReplyPoints } from '../types/Team';\n\nexport const sortTeams = (teams: Team[], scoreReplies: boolean) => {\n    return [...teams].sort((a, b) => {\n        // First sort on team wins\n        const a_wins = getTotalTeamWins(a);\n        const b_wins = getTotalTeamWins(b);\n\n        if(a_wins > b_wins) {\n            return -1;\n        } else if(a_wins < b_wins) {\n            return 1;\n        } else {\n            // Optionally sort on reply points\n            if(scoreReplies) {\n                const a_rpoints = getTotalReplyPoints(a);\n                const b_rpoints = getTotalReplyPoints(b);\n\n                if(a_rpoints > b_rpoints) {\n                    return -1;\n                } else if(a_rpoints < b_rpoints) {\n                    return 1;\n                }\n            }\n            // Finally sort on team points\n            const a_tpoints = a.totalPoints;\n            const b_tpoints = b.totalPoints;\n\n            if(a_tpoints > b_tpoints) {\n                return -1;\n            } else if(a_tpoints < b_tpoints) {\n                return 1;\n            } else {\n                return 1;\n            }\n        }\n    });\n}","import React from 'react';\nimport { Speaker } from '../types/Speaker';\nimport { Team, getTotalTeamWins, getTotalReplyPoints } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\nimport { sortTeams } from '../utils/sortTeams';\n\n\ntype RankingProps = {\n    speakers: Speaker[],\n    teams: Team[],\n    scoreReplies: boolean\n}\n\nclass Ranking extends React.PureComponent<RankingProps> {\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n        const scoreReplies = this.props.scoreReplies;\n\n        const speakers_ranked = speakers\n                                .slice(0)\n                                .filter(el => el.disqualified === false)\n                                .sort((a, b) => {\n            // First sort on total speaker scores\n            const a_sum = a.scores.reduce((x, y) => x + y, 0);\n            const b_sum = b.scores.reduce((x, y) => x + y, 0);\n\n            if(a_sum > b_sum) {\n                return -1;\n            } else if(a_sum < b_sum) {\n                return 1;\n            } else {\n                // Secondly sort on speaker ranks\n                const a_ranks = a.ranks.reduce((x, y) => x + y, 0);\n                const b_ranks = b.ranks.reduce((x, y) => x + y, 0);\n\n                if(a_ranks < b_ranks) {\n                    return -1;\n                } else if(a_ranks > b_ranks) {\n                    return 1;\n                } else {\n                    // Thirdly sort on team wins\n                    const a_team = teams.find(el => el.round1.includes(a.speakerID));\n                    const b_team = teams.find(el => el.round1.includes(b.speakerID));\n                    const a_wins = a_team === undefined ? 0 : getTotalTeamWins(a_team);\n                    const b_wins = b_team === undefined ? 0 : getTotalTeamWins(b_team);\n\n                    if(a_wins > b_wins) {\n                        return -1;\n                    } else if(a_wins < b_wins) {\n                        return 1;\n                    } else {\n                        // Fourthly sort on team points\n                        const a_tpoints = a_team === undefined ? 0 : a_team.totalPoints;\n                        const b_tpoints = b_team === undefined ? 0 : b_team.totalPoints;\n\n                        if(a_tpoints > b_tpoints) {\n                            return -1;\n                        } else if(a_tpoints < b_tpoints) {\n                            return 1;\n                        } else {\n                            return 1;\n                        }\n                    }\n                }\n            }\n        });\n\n        const speaker_ranking = speakers_ranked.map((speaker, index) => {\n            let team = teams.find(el => el.round1.includes(speaker.speakerID));\n            return (\n                <tr key={`speaker-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>{speaker.name}</td>\n                    <td>{speaker.school}</td>\n                    <td>{speaker.scores.reduce((x, y) => x + y, 0)}</td>\n                    <td>{speaker.ranks.reduce((x, y) => x + y, 0)}</td>\n                    <td>{team !== undefined ? getTotalTeamWins(team) : 0}</td>\n                    <td>{team?.totalPoints || 0}</td>\n                </tr>\n            );\n        });\n\n\n        const teams_ranked = sortTeams(teams, scoreReplies);\n\n        const team_ranking = teams_ranked.map((team, index) => {\n            const speakerIDs = getDistinctSpeakers(team);\n            const speakerNames: string[] = [];\n            for(let speakerID of speakerIDs) {\n                let currSpeaker = speakers.find(sp => sp.speakerID === speakerID);\n                if(currSpeaker === undefined) continue;\n                if(currSpeaker.disqualified === true) continue;\n                speakerNames.push(currSpeaker.name);\n            }\n            const speakerElements = speakerNames.map((speaker, index) => {\n                if(index < speakerNames.length - 1) {\n                    return (\n                        <React.Fragment key={`speaker-${index}`}>\n                            {speaker},&nbsp;\n                        </React.Fragment>\n                    );\n                } else {\n                    return (\n                        <React.Fragment key={`speaker-${index}`}>\n                            {speaker}\n                        </React.Fragment>\n                    );\n                }\n            });\n\n            return (\n                <tr key={`team-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            overlay={\n                                <Tooltip id={`tooltip-rank-teamName-${index + 1}`}>\n                                    {speakerElements}\n                                </Tooltip>\n                            }>\n                            <abbr title=\"\" tabIndex={0}>{team.name}</abbr>\n                        </OverlayTrigger>\n                    </td>\n                    <td>{getTotalTeamWins(team)}</td>\n                    {scoreReplies ?\n                    <td>\n                        {getTotalReplyPoints(team)}\n                    </td>\n                    : \"\"}\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n        \n\n        return (\n            <div>\n                <h2>Ranking</h2>\n                <Row>\n                    <Col lg={7} className=\"table-col\">\n                        <h3>Speakers</h3>\n                        <Table striped className=\"speaker-ranking-table table-no-top-margin table-less-bottom-margin-sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>School</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerpoints\">\n                                                    Total speaker points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣSP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerranks\">\n                                                    Total speaker ranks<br />(lower is better)\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣSR</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {speaker_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col lg={5} className=\"table-col table-col-margin-lg\">\n                        <h3>Teams</h3>\n                        <Table striped className=\"table-no-top-margin\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    {scoreReplies ?\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalreplypoints\">\n                                                    Total reply points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣRP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    : \"\"}\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\" tabIndex={0}>ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {team_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Ranking;","import React from 'react';\nimport Speakers from './Speakers';\nimport Teams from './Teams';\nimport Ranking from './Ranking';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { PersonFill, PeopleFill, Trophy } from 'react-bootstrap-icons';\n\n\ntype ParticipantsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    scoreReplies: boolean,\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\nclass Participants extends React.PureComponent<ParticipantsProps> {\n    render() {\n        return (\n            <Tab.Container id={`part-view-${this.props.div}`} defaultActiveKey=\"speakers\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"speakers\" className=\"sub-nav-link\">\n                                    <PersonFill className=\"btn-icon\" />\n                                    Speakers\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"teams\" className=\"sub-nav-link\">\n                                    <PeopleFill className=\"btn-icon\" />\n                                    Teams\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"ranking\" className=\"sub-nav-link\">\n                                    <Trophy className=\"btn-icon\" />\n                                    Ranking\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"speakers\">\n                                <Speakers\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"teams\">\n                                <Teams\n                                    div={this.props.div}\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    scoreReplies={this.props.scoreReplies}\n                                    updateSpeakers={this.props.updateSpeakers}\n                                    updateTeams={this.props.updateTeams} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"ranking\">\n                                <Ranking\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    scoreReplies={this.props.scoreReplies} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Participants;","import React from 'react';\nimport { EditText } from '../utils/EditText';\nimport { Toggle } from '../utils/Toggle';\nimport { Judge } from '../types/Judge';\nimport { Trash } from 'react-bootstrap-icons';\n\n\ntype JudgeRowProps = {\n    judge: Judge,\n    updateJudge: (judge: Judge) => void,\n    deleteJudge: (judge: Judge) => void\n}\n\nclass JudgeRow extends React.PureComponent<JudgeRowProps> {\n    constructor(props: JudgeRowProps) {\n        super(props);\n\n        this.handleJudgeUpdate = this.handleJudgeUpdate.bind(this);\n    }\n\n    handleJudgeUpdate(name: string, value: string | boolean) {\n        const judge = {...this.props.judge, [name]: value};\n        this.props.updateJudge(judge);\n    }\n    \n    render() {\n        const judge = this.props.judge;\n\n        return (\n            <tr>\n                <td className=\"judge-table-name editable\">\n                    <EditText\n                        name=\"name\"\n                        init={judge.name}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-school editable\">\n                    <EditText\n                        name=\"school\"\n                        init={judge.school}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"canChair\"\n                        init={judge.canChair}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound1\"\n                        init={judge.atRound1}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound2\"\n                        init={judge.atRound2}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Toggle\n                        id={judge.judgeID}\n                        name=\"atRound3\"\n                        init={judge.atRound3}\n                        fn={this.handleJudgeUpdate} />\n                </td>\n                <td className=\"table-delete\">\n                    <button className=\"btn-none\"\n                        title={`Remove ${judge.name}`}\n                        onClick={() => this.props.deleteJudge(judge)}>\n                        <Trash className=\"icon trash\" />\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default JudgeRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Judges.scss';\nimport JudgeRow from './JudgeRow';\nimport { Judge } from '../types/Judge';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { AwardFill, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgesProps = {\n    judges: Judge[],\n    updateJudges: (judges: Judge[]) => void,\n    getTotalTeams: () => number\n}\n\ntype JudgesState = {\n    addJudgeForm: {\n        judgeName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Judges extends React.PureComponent<JudgesProps, JudgesState> {\n    constructor(props: JudgesProps) {\n        super(props);\n\n        this.state = {\n            addJudgeForm: {\n                judgeName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddJudgeFormChange = this.handleAddJudgeFormChange.bind(this);\n        this.handleAddJudgeFormSubmit = this.handleAddJudgeFormSubmit.bind(this);\n        this.updateJudge = this.updateJudge.bind(this);\n        this.deleteJudge = this.deleteJudge.bind(this);\n    }\n\n\n    handleAddJudgeFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const {name, value} = event.target;\n        let judgeAddFormState = {...this.state.addJudgeForm};\n        judgeAddFormState[name] = value;\n        this.setState({addJudgeForm: judgeAddFormState});\n    }\n\n    handleAddJudgeFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let counter = JSON.parse(localStorage.getItem(\"judgeCounter\")!);\n\n        const newJudge: Judge = {\n            judgeID: counter++,\n            name: this.state.addJudgeForm.judgeName,\n            school: this.state.addJudgeForm.school,\n            canChair: false,\n            atRound1: true, atRound2: true, atRound3: true\n        }\n        const newJudges = [...this.props.judges, newJudge];\n\n        this.props.updateJudges(newJudges);\n        localStorage.setItem(\"judgeCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addJudgeForm};\n        blankForm.name = \"\";\n        this.setState({addJudgeForm: blankForm});\n    }\n\n    updateJudge(judge: Judge) {\n        let judges = [...this.props.judges];\n        const index = judges.findIndex(el => el.judgeID === judge.judgeID);\n        judges[index] = judge;\n        this.props.updateJudges(judges);\n    }\n\n    deleteJudge(judge: Judge) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        \n        // Check if the judge has already been part of a round\n        let inRound = false;\n        for (const round of draws) {\n            for(const pair of round.roomsOne) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n            for(const pair of round.roomsTwo) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n        }\n        if(inRound) {\n            alert(\"This judge has already taken part in a round. You can't delete them anymore. You can still change their availability for each round.\");\n            return false;\n        }\n\n        // Confirm deletion\n        const conf = window.confirm(`Are you sure you want to delete judge ${judge.name}?`);\n        if(conf) {\n            let judges = [...this.props.judges];\n\n            const index = judges.findIndex(el => el.judgeID === judge.judgeID);\n            judges.splice(index, 1);\n\n            this.props.updateJudges(judges);\n        }\n    }\n\n\n    render() {\n        const judges = this.props.judges;\n\n        let table;\n        if(this.props.judges.length !== 0) {\n            table = (\n                <Table className=\"judge-table table-no-top-margin\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"judge-table-name\">Name</th>\n                            <th>School</th>\n                            <th className=\"judge-table-toggle\">Chair?</th>\n                            <th className=\"judge-table-toggle\">Round 1?</th>\n                            <th className=\"judge-table-toggle\">Round 2?</th>\n                            <th className=\"judge-table-toggle\">Round 3?</th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.judges.map(judge => {\n                            return (\n                                <JudgeRow\n                                    key={`judge-row-${judge.name}`}\n                                    judge={judge}\n                                    updateJudge={this.updateJudge}\n                                    deleteJudge={this.deleteJudge} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n        }\n\n        const totalRooms = Math.round(this.props.getTotalTeams() / 2);\n        const chairsR1 = judges.filter(el => el.canChair && el.atRound1).length;\n        const chairsR2 = judges.filter(el => el.canChair && el.atRound2).length;\n        const chairsR3 = judges.filter(el => el.canChair && el.atRound3).length;\n\n        return (\n            <Tab.Container id={`judges-view`} defaultActiveKey=\"judges\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav no-show-sm\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" className=\"sub-nav-link\">\n                                    <AwardFill className=\"btn-icon\" />\n                                    Judges\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"judges\">\n                                <h2>Judges</h2>\n                                <Row>\n                                    <Col>\n                                        <Form onSubmit={this.handleAddJudgeFormSubmit}>\n                                            <Form.Row>\n                                                <Col md={4}>\n                                                    <Form.Label srOnly>Judge name</Form.Label>\n                                                    <Form.Control\n                                                        name=\"judgeName\"\n                                                        type=\"text\"\n                                                        placeholder=\"Name\"\n                                                        value={this.state.addJudgeForm.judgeName}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col md={4}>\n                                                    <Form.Label srOnly>Judge school</Form.Label>\n                                                    <Form.Control\n                                                        name=\"school\"\n                                                        type=\"text\"\n                                                        placeholder=\"School\"\n                                                        value={this.state.addJudgeForm.school}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col>\n                                                    <Button\n                                                        variant=\"primary\"\n                                                        className=\"btn-submit\"\n                                                        type=\"submit\">\n                                                        Add judge\n                                                    </Button>\n                                                </Col>\n                                            </Form.Row>\n                                        </Form>\n                                        <div id=\"total-judges\">\n                                            <p>\n                                                Total judges each round: {this.props.judges.filter(el => el.atRound1).length} &middot; {this.props.judges.filter(el => el.atRound2).length} &middot; {this.props.judges.filter(el => el.atRound3).length}\n                                                <br />\n                                                Total chairs each round: {chairsR1} &middot; {chairsR2} &middot; {chairsR3}\n                                                <br />\n                                                <span className={(totalRooms > chairsR1 || totalRooms > chairsR2 || totalRooms > chairsR3) ? \"red\" : \"\"}>\n                                                    Total chairs needed: {totalRooms}\n                                                </span>\n                                            </p>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col lg={10} xl={9} className=\"table-col\">\n                                        {table}\n                                    </Col>\n                                </Row>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Judges;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Team } from '../types/Team';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype TeamPillProps = {\n    team: Team,\n    hasConflict: boolean,\n    teams: Team[],\n    updateRoom: (thisTeamID: number, swapTeamID: number) => void\n}\n\ntype TeamPillState = {\n    swapTeamID: number\n}\n\nclass TeamPill extends React.PureComponent<TeamPillProps, TeamPillState> {\n    constructor(props: TeamPillProps) {\n        super(props);\n\n        this.state = {\n            swapTeamID: this.props.team.teamID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n        this.popFocus = this.popFocus.bind(this);\n        this.returnFocus = this.returnFocus.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({swapTeamID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.team.teamID, this.state.swapTeamID);\n        document.body.click();\n    }\n\n    popFocus() {\n        document.getElementById(`team-check-${this.props.team.teamID}`)?.focus();\n    }\n\n    returnFocus() {\n        document.getElementById(`teampill-btn-${this.props.team.teamID}`)?.focus();\n    }\n\n\n    render() {\n        const team = this.props.team;\n\n        const popover = (\n            <Popover id=\"teampill-popover\">\n                <Popover.Title as=\"h3\">Switch teams</Popover.Title>\n                <Popover.Content>\n                    <Form onSubmit={this.handleRoomFormSubmit}>\n                        <Form.Label srOnly>Team to swap with</Form.Label>\n                        {this.props.teams.map(mappedTeam => {\n                            return (\n                                <Form.Check custom\n                                    key={`team-check-${mappedTeam.teamID}`}\n                                    id={`team-check-${mappedTeam.teamID}`}\n                                    name=\"room\"\n                                    type=\"radio\"\n                                    label={mappedTeam.name}\n                                    value={mappedTeam.teamID}\n                                    checked={this.state.swapTeamID === mappedTeam.teamID}\n                                    onChange={this.handleRoomFormChange} />\n                            );\n                        })}\n                        <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">\n                            Change\n                        </Button>\n                    </Form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                trigger=\"click\"\n                placement=\"right\"\n                overlay={popover}\n                onEntered={this.popFocus}\n                onExited={this.returnFocus}\n                rootClose >\n                <button\n                    id={`teampill-btn-${team.teamID}`}\n                    className={`pill btn-none ${this.props.hasConflict ? \"orange\" : \"\"}`}>\n                    {team.name}\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TeamPill;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Judge } from '../types/Judge';\nimport { Room } from '../types/Room';\nimport { Draw } from '../types/Draw';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype JudgePillProps = {\n    judge: Judge,\n    isChair: boolean,\n    hasConflict: boolean,\n    hasChairedBefore: boolean,\n    room: Room,\n    draw: Draw,\n    updateRoom: (judgeID: number, isChair: boolean, newRoomID: number) => void\n}\n\ntype JudgePillState = {\n    roomID: number\n}\n\nclass JudgePill extends React.Component<JudgePillProps, JudgePillState> {\n    constructor(props: JudgePillProps) {\n        super(props);\n\n        this.state = {\n            roomID: this.props.room.roomID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n        this.popFocus = this.popFocus.bind(this);\n        this.returnFocus = this.returnFocus.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({roomID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.judge.judgeID, this.props.isChair, this.state.roomID);\n        document.body.click();\n    }\n\n    popFocus() {\n        document.getElementById(`room-check-${this.props.room.roomID}`)?.focus();\n    }\n\n    returnFocus() {\n        document.getElementById(`judgepill-btn-${this.props.judge.judgeID}`)?.focus();\n    }\n\n\n    render() {\n        const judge = this.props.judge;\n\n        const popover = (\n            <Popover id=\"judgepill-popover\">\n                <Popover.Title as=\"h3\">Switch rooms</Popover.Title>\n                <Popover.Content>\n                    {(this.props.draw.roomsOne.map(room => room.name).includes(\"\") ||\n                      this.props.draw.roomsTwo.map(room => room.name).includes(\"\") )\n                        ?\n                        <p>You need to assign each debate to a room before you can switch judges.</p>\n                        :\n                        <Form onSubmit={this.handleRoomFormSubmit}>\n                            <Form.Label srOnly>Room</Form.Label>\n                            {this.props.draw.roomsOne.map(room => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${room.roomID}`}\n                                        id={`room-check-${room.roomID}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            {this.props.draw.roomsTwo.map(room => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${room.roomID}`}\n                                        id={`room-check-${room.roomID}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">\n                                Change\n                            </Button>\n                        </Form>}\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                trigger=\"click\"\n                placement=\"right\"\n                overlay={popover}\n                onEntered={this.popFocus}\n                onExited={this.returnFocus}\n                rootClose >\n                <button id={`judgepill-btn-${judge.judgeID}`}\n                    className={`pill btn-none\n                        ${this.props.hasConflict ? \"red\" : \"\"}\n                        ${this.props.hasChairedBefore ? \"orange\" : \"\"}`} >\n                    {judge.name}{this.props.isChair ? \"\\u00A9\" : \"\"}\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default JudgePill;","import React from 'react';\nimport TeamPill from './TeamPill';\nimport JudgePill from './JudgePill';\nimport { EditText } from '../utils/EditText';\nimport { Room } from '../types/Room';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\n\n\ntype RoundRowProps = {\n    room: Room,\n    div: number,\n    round: number,\n    speakers: Speaker[],\n    teams: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateRooms: (room: Room, div: number) => void\n}\n\nclass RoundRow extends React.PureComponent<RoundRowProps> {\n    constructor(props: RoundRowProps) {\n        super(props);\n\n        this.handleRoomUpdate = this.handleRoomUpdate.bind(this);\n        this.updateRoomTeam = this.updateRoomTeam.bind(this);\n        this.updateRoomJudge = this.updateRoomJudge.bind(this);\n    }\n\n\n    handleRoomUpdate(name: string, value: string) {\n        const room = {...this.props.room, [name]: value};\n        this.props.updateRooms(room, this.props.div);\n    }\n\n    updateRoomTeam(thisTeamID: number, swapTeamID: number) {\n        const div = this.props.div;\n        const round = this.props.round - 1;\n        let draw = this.props.draws[round];\n        let thisRoom = this.props.room;\n\n        let rooms;\n        if(div === 1) rooms = draw.roomsOne;\n        else rooms = draw.roomsTwo;\n\n        let thisTeamPos = \"prop\";\n        if(thisRoom.opp === thisTeamID) thisTeamPos = \"opp\";\n\n        let newRoom: Room;\n        for(let checkRoom of rooms) {\n            if(checkRoom.prop === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.prop] = [checkRoom.prop, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.prop] = [checkRoom.prop, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n\n            } else if(checkRoom.opp === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.opp] = [checkRoom.opp, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.opp] = [checkRoom.opp, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n            }\n        }\n\n        this.props.updateRooms(newRoom!, div);\n        this.props.updateRooms(thisRoom, div);\n    }\n\n    updateRoomJudge(judgeID: number, isChair: boolean, newRoomID: number) {\n        const round = this.props.round - 1;\n        let room = {...this.props.room};\n        let draw = this.props.draws[round];\n        const roomlistOne = draw.roomsOne.map(r => r.roomID);\n        const nextDiv = roomlistOne.includes(newRoomID) ? 1 : 2;\n\n        let rooms;\n        if(nextDiv === 1) rooms = [...draw.roomsOne];\n        else rooms = [...draw.roomsTwo];\n\n        const newRoom = rooms.findIndex(r => r.roomID === newRoomID);\n\n        if(!isChair) {\n            rooms[newRoom].wings.push(judgeID);\n            const oldIndex = room.wings.indexOf(judgeID);\n            room.wings.splice(oldIndex, 1);\n        } else {\n            const swapChairID = rooms[newRoom].chair;\n            if(swapChairID === judgeID) return false;\n\n            const conf = window.confirm(`You are about to swap the chairs ${this.props.judges.find(j => j.judgeID === judgeID)!.name} and ${this.props.judges.find(j => j.judgeID === swapChairID)!.name}. Do you wish to continue?`);\n            if(conf) {\n                rooms[newRoom].chair = judgeID;\n                room.chair = swapChairID;\n            } else return false;\n        }\n        this.props.updateRooms(rooms[newRoom], nextDiv);\n        this.props.updateRooms(room, this.props.div);\n    }\n\n\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n        const judges = this.props.judges;\n        const room = this.props.room;\n        const round = this.props.round;\n        const draws = this.props.draws;\n        const div = this.props.div;\n\n        const prop = teams.find(el => el.teamID === room.prop)!;\n        const opp = teams.find(el => el.teamID === room.opp)!;\n        const chair = judges.find(el => el.judgeID === room.chair)!;\n\n\n        // Compile a list of speakers' schools for determining judge conflicts\n        let speakersInTeams: Speaker[] = [];\n        if(round === 1) {\n            prop.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else if(round === 2) {\n            prop.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else {\n            prop.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        }\n        let speakerSchools: string[] = [];\n        speakersInTeams\n            .filter(sp => sp !== undefined)\n            .forEach(sp => speakerSchools.push(sp.school));\n\n\n        // Initialize values for next checks\n        let roomNum: string;\n        if(div === 1) roomNum = \"roomsOne\";\n        else roomNum = \"roomsTwo\";\n\n\n        // Check whether the teams have met before\n        let teamConflict = false;\n        if(round === 2 || round === 3) {\n            let propsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            propsR1 = rooms.map(r => r.prop);\n\n            if(propsR1.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n        if(round === 3) {\n            let propsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            propsR2 = rooms.map(r => r.prop);\n\n            if(propsR2.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n\n\n        // Check whether the chair has chaires the teams before\n        let hasChairedBefore = false;\n        if(round === 2 || round === 3) {\n            let chairsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            chairsR1 = rooms.map(r => r.chair);\n\n            if(chairsR1.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n        if(round === 3) {\n            let chairsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            chairsR2 = rooms.map(r => r.chair);\n\n            if(chairsR2.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n\n\n        return (\n            <tr>\n                <td className=\"editable draw-table-room-cell\">\n                    <EditText\n                        name=\"name\"\n                        init={room.name}\n                        placeholder=\"room\"\n                        fn={this.handleRoomUpdate} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={prop}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={opp}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td>\n                    <div className=\"judgepill-container\">\n                        <JudgePill\n                            judge={chair}\n                            isChair={true}\n                            hasConflict={speakerSchools.includes(chair.school)}\n                            hasChairedBefore={hasChairedBefore}\n                            room={room}\n                            draw={draws[round - 1]}\n                            updateRoom={this.updateRoomJudge} />\n                    </div>\n                    {room.wings.length !== 0 ? \",\\u00A0\" : \"\"}\n                    {room.wings.map((el, index) => {\n                        let wing = judges.find(j => j.judgeID === el)!;\n                        return (\n                            <div key={`judgepil-${index}`} className=\"judgepill-container\">\n                                <JudgePill\n                                    judge={wing}\n                                    isChair={false}\n                                    hasConflict={speakerSchools.includes(wing.school)}\n                                    hasChairedBefore={false}\n                                    room={room}\n                                    draw={draws[round - 1]}\n                                    updateRoom={this.updateRoomJudge} />\n                                {index < room.wings.length - 1 ? \",\\u00A0\" : \"\"}\n                            </div>\n                        );\n                    })}\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default RoundRow;","import React from 'react';\nimport './Round.scss';\nimport RoundRow from './RoundRow';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport { Room } from '../types/Room';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { Bullseye, ArrowRepeat, Trash, ArrowsAngleExpand, InfoCircle } from 'react-bootstrap-icons';\nimport { sortTeams } from '../utils/sortTeams';\n\n\ntype RoundProps = {\n    round: number,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateDraws: (draws: Draw[]) => void\n}\n\ntype RoundState = {\n    fullScreen: boolean\n}\n\nclass Round extends React.PureComponent<RoundProps, RoundState> {\n    constructor(props: RoundProps) {\n        super(props);\n\n        this.state = {\n            fullScreen: false\n        }\n\n        this.generateDraw = this.generateDraw.bind(this);\n        this.regenerateDraw = this.regenerateDraw.bind(this);\n        this.deleteDraw = this.deleteDraw.bind(this);\n        this.updateRooms = this.updateRooms.bind(this);\n        this.fullScreenDraw = this.fullScreenDraw.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n    }\n\n\n    generateDraw() {\n        const config = this.props.config;\n        const round = this.props.round;\n        let draws = [...this.props.draws];\n\n        // Check whether previous or next draws have happened\n        if(round === 1) {\n            if(draws[1].generated || draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 2) {\n            if(!draws[0].generated) {\n                alert(\"You can't generate the draw for round 2 before generating the draw for round 1.\");\n                return false;\n            } else if(draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 3) {\n            if(!draws[0].generated || !draws[1].generated) {\n                alert(\"You can't generate the draw for round 3 before generating the draws for rounds 1 and 2.\");\n                return false;\n            }\n        }\n\n        // Initialize values\n        let teamsOne = this.props.teamsOne;\n        let teamsTwo = this.props.teamsTwo;\n        let judges = this.props.judges;\n        const len1 = teamsOne.length;\n        const len2 = teamsTwo.length;\n\n        // Don't run the draw if division one has no teams\n        if(len1 === 0) {\n            alert(\"Add some teams to generate the draw.\");\n            return;\n        }\n\n        // Check for an even number of teams\n        if(len1 % 2 !== 0 && len2 % 2 !== 0) {\n            alert(\"Both divisions have an odd number of teams. A team from one division debating a team from the other division is not currently supported. Please add or remove a team to/from both in order to continue.\")\n            return false;\n        } else if(len1 % 2 !== 0) {\n            alert(`There is an odd number of ${config.numDivisions === 2 ? `${config.divisionNames![0]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        } else if(len2 % 2 !== 0) {\n            alert(`There is an odd number of ${config.numDivisions === 2 ? `${config.divisionNames![1]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        }\n\n        // Select only the judges that are available this round\n        let availableJudges: Judge[];\n        if(round === 1) {\n            availableJudges = judges.filter(el => el.atRound1 === true);\n        } else if(round === 2) {\n            availableJudges = judges.filter(el => el.atRound2 === true);\n        } else {\n            availableJudges = judges.filter(el => el.atRound3 === true);\n        }\n\n        // Split chairs and wings\n        const chairs = availableJudges.filter(el => el.canChair === true);\n        let wings = availableJudges.filter(el => el.canChair === false);\n\n        // Check whether there are enough chairs\n        const totalTeams = len1 + len2;\n        if(chairs.length < totalTeams / 2) {\n            alert(\"There are not enough chairs to adjudicate every room. Please add some more.\");\n            return false;\n        }\n\n        // Shuffle chairs for random picking\n        for (let i = chairs.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [chairs[i], chairs[j]] = [chairs[j], chairs[i]];\n        }\n\n        // Select chairs and put the rest as wings\n        while(chairs.length > totalTeams / 2) {\n            wings.push(chairs.pop()!);\n        }\n\n        // Generate pairings\n        let roomCounter = JSON.parse(localStorage.getItem(\"roomCounter\")!);\n        let roomsOne = [];\n        let roomsTwo = [];\n        let t1 = teamsOne.slice(0);\n        let t2 = teamsTwo.slice(0);\n\n        if(round === 1) {\n            // Generate lists of teams in random order\n            for (let i = len1 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t1[i], t1[j]] = [t1[j], t1[i]];\n            }\n            for (let i = len2 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t2[i], t2[j]] = [t2[j], t2[i]];\n            }\n        } else {\n            // Generate ranked lists of teams\n            t1 = sortTeams(t1, config.scoreReplies);\n            t2 = sortTeams(t2, config.scoreReplies);\n        }\n\n        // For round 2, make sure everyone is on another side\n        if(round === 2) {\n            const roundOneRoomsOne = draws[0].roomsOne;\n            const roundOneRoomsTwo = draws[0].roomsTwo;\n            const propsOne = roundOneRoomsOne.map(r => r.prop);\n            const propsTwo = roundOneRoomsTwo.map(r => r.opp);\n\n            t1.forEach((team, index) => {\n                let wasProp = false;\n                if(propsOne.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n            t2.forEach((team, index) => {\n                let wasProp = false;\n                if(propsTwo.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n\n        // Distribute teams and chairs\n        let currPropID, currOppID, currChair, currChairID;\n        for (let i = 0; i < len1; i += 2) {\n            currPropID = t1[i].teamID;\n            currOppID = t1[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsOne[i / 2] = newRoom;\n        }\n        for (let i = 0; i < len2; i += 2) {\n            currPropID = t2[i].teamID;\n            currOppID = t2[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsTwo[i / 2] = newRoom;\n        }\n\n        // Add wings\n        while(wings.length > 0) {\n            for (let i = 0; i < roomsOne.length; i++) {\n                roomsOne[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n            if(wings.length === 0) {\n                break;\n            }\n            for (let i = 0; i < roomsTwo.length; i++) {\n                roomsTwo[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n        }\n\n        // Randomize row order\n        for (let i = roomsOne.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsOne[i], roomsOne[j]] = [roomsOne[j], roomsOne[i]];\n        }\n        for (let i = roomsTwo.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsTwo[i], roomsTwo[j]] = [roomsTwo[j], roomsTwo[i]];\n        }\n\n        // Save in storage\n        const drawr: Draw = {\n            generated: true,\n            roomsOne: roomsOne,\n            roomsTwo: roomsTwo\n        }\n        if(round === 1) {\n            draws[0] = drawr;\n        } else if(round === 2) {\n            draws[1] = drawr;\n        } else {\n            draws[2] = drawr;\n        }\n        this.props.updateDraws(draws);\n\n        localStorage.setItem(\"roomCounter\", JSON.stringify(roomCounter));\n    }\n\n    regenerateDraw() {\n        const confGen = window.confirm(\"Do you really want to regenerate the draw?\");\n        if(!confGen) {\n            return false;\n        }\n\n        this.generateDraw();\n    }\n\n    deleteDraw() {\n        const round = this.props.round;\n        let draws = [...this.props.draws];\n\n        if(round === 1 && (draws[1].generated || draws[2].generated)) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        } else if(round === 2 && draws[2].generated) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        }\n\n        let conf = window.confirm(`Are you sure you want to delete the draw for round ${round}?`);\n        if(!conf) return false;\n\n        const draw: Draw = {\n            generated: false,\n            roomsOne: [],\n            roomsTwo: []\n        }\n        if(round === 1) {\n            draws[0] = draw;\n        } else if(round === 2) {\n            draws[1] = draw;\n        } else {\n            draws[2] = draw;\n        }\n        this.props.updateDraws(draws);\n    }\n\n\n    updateRooms(room: Room, div: number) {\n        let draws = [...this.props.draws];\n        let rooms;\n        if(div === 1) {\n            rooms = draws[this.props.round - 1].roomsOne;\n        } else {\n            rooms = draws[this.props.round - 1].roomsTwo;\n        }\n\n        const index = rooms.findIndex(r => r.roomID === room.roomID);\n        rooms[index] = room;\n\n        if(div === 1) {\n            draws[this.props.round - 1].roomsOne = rooms;\n        } else {\n            draws[this.props.round - 1].roomsTwo = rooms;\n        }\n        this.props.updateDraws(draws);\n    }\n\n\n    fullScreenDraw() {\n        this.setState({fullScreen: true});\n        document.documentElement.requestFullscreen();\n    }\n\n    modalHide() {\n        this.setState({fullScreen: false});\n        if(document.fullscreenElement !== null) {\n            document.exitFullscreen();\n        }\n    }\n\n\n    render() {\n        const generated = this.props.draws[this.props.round - 1].generated;\n\n        let tables;\n        if(!generated) {\n            tables = <div className=\"draw-placeholder\"></div>;\n        } else {\n            tables = (\n                <div>\n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![0] : \"Draw\"}</h3>\n                    <Table className=\"table-no-top-margin draw-table-one\" hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.props.draws[this.props.round - 1].roomsOne.map((room, index) => {\n                                    return <RoundRow \n                                            key={`one-room-${index}`}\n                                            room={room}\n                                            div={1}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersOne}\n                                            teams={this.props.teamsOne}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                    \n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![1] : \"\"}</h3>\n                    <Table className={`table-no-top-margin ${this.props.config.numDivisions === 1 ? \"hidden\" : \"\"}`} hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.props.draws[this.props.round - 1].roomsTwo.map((room, index) => {\n                                    return <RoundRow \n                                            key={`two-room-${index}`}\n                                            room={room}\n                                            div={2}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersTwo}\n                                            teams={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <h2>Round {this.props.round}</h2>\n                <Row className=\"draw-header\">\n                    <Col>\n                        <Button\n                            onClick={this.generateDraw}\n                            className={generated ? \"hidden\" : \"\"}>\n                            <Bullseye className=\"btn-icon\"/>\n                            Generate draw\n                        </Button>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={this.regenerateDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <ArrowRepeat className=\"btn-icon\" />\n                            Regenerate draw\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={this.deleteDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <Trash className=\"btn-icon\" />\n                            Delete draw\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.fullScreenDraw}\n                            className={!generated ? \"hidden\" : \"\"}>\n                            <ArrowsAngleExpand className=\"btn-icon\" />\n                            Display fullscreen\n                        </Button>\n                        <div className={`draw-legend ${!generated ? \"hidden\" : \"\"}`}>\n                            <OverlayTrigger\n                                placement=\"bottom-start\"\n                                overlay={\n                                    <Popover className=\"popover-explainer\" id=\"draw-legend-popover\">\n                                        <Popover.Content>\n                                            Teams in <span className=\"orange\">orange</span> have already debated each other before.<br />\n                                            Chairs in <span className=\"orange\">orange</span> have already chaired one of the teams in their room before.<br />\n                                            Judges in <span className=\"red\">red</span> clash with one of the teams in their room.<br />\n                                            Note that these colors do not show up when the draw is displayed fullscreen.\n                                        </Popover.Content>\n                                    </Popover>\n                                } \n                                rootClose>\n                                <abbr title=\"\" tabIndex={0}><p>\n                                    <InfoCircle className=\"icon-info\" />\n                                    &nbsp;&nbsp;<span>Legend</span>\n                                </p></abbr>\n                            </OverlayTrigger>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={10} xl={9} className=\"table-col\">\n                        {tables}\n                    </Col>\n                </Row>\n\n                <Modal\n                    show={this.state.fullScreen}\n                    onHide={this.modalHide}\n                    backdrop=\"static\"\n                    size=\"xl\"\n                    className=\"draw-modal\"\n                    dialogClassName=\"draw-modal-dialog\"\n                    backdropClassName=\"draw-modal-backdrop\">\n                    <Modal.Header closeButton>\n                        Draw Round {this.props.round}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"draw-modal-table\">\n                            {tables}\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Round;","import React from 'react';\nimport Round from './Round';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { CircleHalf } from 'react-bootstrap-icons';\n\n\ntype DrawsProps = {\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateDraws: (draws: Draw[]) => void\n}\n\nclass Draws extends React.PureComponent<DrawsProps> {\n    render() {\n        return (\n            <Tab.Container id={`draw-view`} defaultActiveKey=\"round-1\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Nav.Item key={`draw-nav-${round}`}>\n                                        <Nav.Link eventKey={`round-${round}`} className=\"sub-nav-link\">\n                                            <CircleHalf className=\"btn-icon\" />\n                                            Round {round}\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                );\n                            })}\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Tab.Pane key={`draw-pane-${round}`} eventKey={`round-${round}`}>\n                                        <Round\n                                            round={round}\n                                            config={this.props.config}\n                                            speakersOne={this.props.speakersOne}\n                                            speakersTwo={this.props.speakersTwo}\n                                            teamsOne={this.props.teamsOne}\n                                            teamsTwo={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateDraws={this.props.updateDraws} />\n                                    </Tab.Pane>\n                                )\n                            })}\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Draws;","import React from 'react';\nimport './App.scss';\nimport logo from './images/logo.svg';\nimport pkg from '../package.json';\nimport SetupScreen from './setup/SetupScreen';\nimport Home from './home/Home';\nimport Participants from './participants/Participants';\nimport Judges from './judges/Judges';\nimport Draws from './draws/Draws';\nimport { Speaker } from './types/Speaker';\nimport { Team } from './types/Team';\nimport { Judge } from './types/Judge';\nimport { Draw } from './types/Draw';\nimport { Config } from './types/Config';\nimport Container from 'react-bootstrap/Container';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Collapse from 'react-bootstrap/Collapse';\nimport { List } from 'react-bootstrap-icons';\n\n\ntype AppProps = {}\n\ntype AppState = {\n    showMenu: boolean,\n    init: boolean,\n    tournamentName: string,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nconst s = JSON.stringify;\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        if(!localStorage.getItem(\"init\")) {\n            localStorage.setItem(\"init\", s(false));\n        }\n        if(!localStorage.getItem(\"tournamentName\")) {\n            localStorage.setItem(\"tournamentName\", s(\"New tournament\"));\n        }\n        if(!localStorage.getItem(\"config\")) {\n            localStorage.setItem(\"config\", s({version: pkg.version, numDivisions: 0, scoreReplies: false}));\n        }\n        if(!localStorage.getItem(\"speakersOne\")) {\n            localStorage.setItem(\"speakersOne\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsOne\")) {\n            localStorage.setItem(\"teamsOne\", s([]));\n        }\n        if(!localStorage.getItem(\"speakersTwo\")) {\n            localStorage.setItem(\"speakersTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsTwo\")) {\n            localStorage.setItem(\"teamsTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"speakerCounter\")) {\n            localStorage.setItem(\"speakerCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"teamCounter\")) {\n            localStorage.setItem(\"teamCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"judges\")) {\n            localStorage.setItem(\"judges\", s([]));\n        }\n        if(!localStorage.getItem(\"judgeCounter\")) {\n            localStorage.setItem(\"judgeCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"draws\")) {\n            localStorage.setItem(\"draws\", s([\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []}\n            ]));\n        }\n        if(!localStorage.getItem(\"roomCounter\")) {\n            localStorage.setItem(\"roomCounter\", s(0));\n        }\n\n        this.state = {\n            showMenu: false,\n            init: JSON.parse(localStorage.getItem(\"init\")!),\n            tournamentName: JSON.parse(localStorage.getItem(\"tournamentName\")!),\n            config: JSON.parse(localStorage.getItem(\"config\")!),\n            speakersOne: JSON.parse(localStorage.getItem(\"speakersOne\")!),\n            speakersTwo: JSON.parse(localStorage.getItem(\"speakersTwo\")!),\n            teamsOne: JSON.parse(localStorage.getItem(\"teamsOne\")!),\n            teamsTwo: JSON.parse(localStorage.getItem(\"teamsTwo\")!),\n            judges: JSON.parse(localStorage.getItem(\"judges\")!),\n            draws: JSON.parse(localStorage.getItem(\"draws\")!)\n        }\n\n        this.toggleMenu = this.toggleMenu.bind(this);\n\n        this.updateStorage = this.updateStorage.bind(this);\n        this.updateTournamentName = this.updateTournamentName.bind(this);\n        this.updateInit = this.updateInit.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n        this.updateSpeakersOne = this.updateSpeakersOne.bind(this);\n        this.updateSpeakersTwo = this.updateSpeakersTwo.bind(this);\n        this.updateTeamsOne = this.updateTeamsOne.bind(this);\n        this.updateTeamsTwo = this.updateTeamsTwo.bind(this);\n        this.updateJudges = this.updateJudges.bind(this);\n        this.updateDraws = this.updateDraws.bind(this);\n\n        this.initializeTournament = this.initializeTournament.bind(this);\n        this.getTotalTeams = this.getTotalTeams.bind(this);\n\n        document.title = `${JSON.parse(localStorage.getItem(\"tournamentName\")!)} - TacoTab`;\n    }\n\n\n    // Toggle menu\n    toggleMenu() {\n        if(this.state.showMenu) {\n            this.setState({ showMenu: false });\n        } else {\n            this.setState({ showMenu: true });\n        }\n    }\n\n\n    // Global methods to update local storage and state\n    updateStorage = (key: string) => {\n        return (value: any) => {\n            localStorage.setItem(key, JSON.stringify(value));\n            this.setState<never>({ [key]: value })\n        }\n    };\n\n    updateTournamentName = (name: string) => {\n        this.updateStorage(\"tournamentName\")(name)\n        document.title = `${name} - TacoTab`;\n    }\n\n    updateInit = this.updateStorage(\"init\");\n    updateConfig = this.updateStorage(\"config\");\n    updateSpeakersOne = this.updateStorage(\"speakersOne\");\n    updateSpeakersTwo = this.updateStorage(\"speakersTwo\");\n    updateTeamsOne = this.updateStorage(\"teamsOne\");\n    updateTeamsTwo = this.updateStorage(\"teamsTwo\");\n    updateJudges = this.updateStorage(\"judges\");\n    updateDraws = this.updateStorage(\"draws\");\n\n\n    // Global helper methods\n    initializeTournament = (\n        tournamentName: string,\n        numDivisions: number,\n        divisionNames: string[],\n        scoreReplies: boolean) => {\n\n            this.updateTournamentName(tournamentName);\n            \n            let config: Config = {\n                version: pkg.version,\n                numDivisions: numDivisions,\n                scoreReplies: scoreReplies\n            }\n            if(numDivisions !== 1) {\n                config.divisionNames = [...divisionNames];\n            }\n            this.updateConfig(config);\n\n            this.updateInit(true);\n    }\n\n    getTotalTeams() {\n        return this.state.teamsOne.length + this.state.teamsTwo.length;\n    }\n\n\n\n    render() {\n        let participants_nav, participants_panes;\n        if(this.state.config.numDivisions !== 2) {\n            participants_nav = (\n                <Nav.Item>\n                    <Nav.Link eventKey=\"participants\" title=\"Participants\">Participants</Nav.Link>\n                </Nav.Item>\n            );\n            participants_panes = (\n                <Tab.Pane eventKey=\"participants\">\n                    <Participants\n                        div={1}\n                        speakers={this.state.speakersOne}\n                        teams={this.state.teamsOne}\n                        scoreReplies={this.state.config.scoreReplies}\n                        updateSpeakers={this.updateSpeakersOne}\n                        updateTeams={this.updateTeamsOne} />\n                </Tab.Pane>\n            );\n        } else {\n            participants_nav = (\n                <>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divone\" title={this.state.config.divisionNames![0]}>{this.state.config.divisionNames![0]}</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divtwo\" title={this.state.config.divisionNames![1]}>{this.state.config.divisionNames![1]}</Nav.Link>\n                    </Nav.Item>\n                </>\n            );\n            participants_panes = (\n                <>\n                    <Tab.Pane eventKey=\"divone\">\n                        <Participants\n                            div={1}\n                            speakers={this.state.speakersOne}\n                            teams={this.state.teamsOne}\n                            scoreReplies={this.state.config.scoreReplies}\n                            updateSpeakers={this.updateSpeakersOne}\n                            updateTeams={this.updateTeamsOne} />\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"divtwo\">\n                        <Participants\n                            div={2}\n                            speakers={this.state.speakersTwo}\n                            teams={this.state.teamsTwo}\n                            scoreReplies={this.state.config.scoreReplies}\n                            updateSpeakers={this.updateSpeakersTwo}\n                            updateTeams={this.updateTeamsTwo} />\n                    </Tab.Pane>\n                </>\n            );\n        }\n\n\n        return (\n            <>\n            <Container fluid className=\"app\">\n                <div id=\"logo\">\n                    <img src={logo} alt=\"TacoTab logo\" />\n                    <h1>TacoTab</h1>\n                </div>\n\n                <div id=\"hamburger\">\n                    <List \n                        onClick={this.toggleMenu}\n                        role=\"button\"\n                        aria-controls=\"app-nav\"\n                        aria-expanded={this.state.showMenu} />\n                </div>\n\n                <Tab.Container id=\"app-nav\" defaultActiveKey=\"home\" transition={false}>\n                    <Collapse in={this.state.showMenu}>\n                        <Nav className=\"main-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"home\" title=\"Home\">Home</Nav.Link>\n                            </Nav.Item>\n                            {participants_nav}\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" title=\"Judges\">Judges</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"draw\" title=\"Draw\">Draw</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Collapse>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"home\">\n                            <Home\n                                tournamentName={this.state.tournamentName}\n                                config={this.state.config}\n                                updateTournamentName={this.updateTournamentName}\n                                updateConfig={this.updateConfig} />\n                        </Tab.Pane>\n                        {participants_panes}\n                        <Tab.Pane eventKey=\"judges\">\n                            <Judges\n                                judges={this.state.judges}\n                                updateJudges={this.updateJudges}\n                                getTotalTeams={this.getTotalTeams} />\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"draw\">\n                            <Draws\n                                config={this.state.config}\n                                speakersOne={this.state.speakersOne}\n                                speakersTwo={this.state.speakersTwo}\n                                teamsOne={this.state.teamsOne}\n                                teamsTwo={this.state.teamsTwo}\n                                judges={this.state.judges}\n                                draws={this.state.draws}\n                                updateDraws={this.updateDraws} />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Tab.Container>\n            </Container>\n\n            <SetupScreen\n                init={this.state.init}\n                initializeTournament={this.initializeTournament} />\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport * as serviceWorker from './serviceWorker';\nimport Alert from 'react-bootstrap/Alert';\nimport { ExclamationTriangle } from 'react-bootstrap-icons';\n\n\nexport const ServiceWorkerWrapper = () => {\n    const [showReload, setShowReload] = useState(false);\n    const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);\n\n    const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n        setShowReload(true);\n        setWaitingWorker(registration.waiting);\n    };\n\n    useEffect(() => {\n        serviceWorker.register({ onUpdate: onSWUpdate });\n    }, []);\n\n    const reloadPage = () => {\n        waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n        setShowReload(false);\n        window.location.reload(true);\n    }\n\n    return (\n        <Alert\n            show={showReload}\n            variant=\"primary\"\n            className=\"alert-global\">\n                <ExclamationTriangle />&nbsp;&nbsp;\n                A new version of TacoTab is available! <Alert.Link onClick={reloadPage}>Click to reload.</Alert.Link>\n        </Alert>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.scss';\nimport App from './App';\nimport { ServiceWorkerWrapper } from './ServiceWorkerWrapper';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ServiceWorkerWrapper />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.15863a1a.svg\";"],"sourceRoot":""}