{"version":3,"sources":["images/logo.svg","images/icon-github.svg","utils/importTournament.ts","setup/SetupScreen.tsx","home/Welcome.tsx","home/Settings.tsx","home/Home.tsx","participants/SpeakerRow.tsx","participants/Speakers.tsx","participants/TeamCell.tsx","participants/TeamSpeakerSelect.tsx","participants/TeamWinSelector.tsx","participants/TwoPersonTeamTooltip.tsx","utils/getDistinctSpeakers.ts","participants/TeamRow.tsx","participants/TeamTable.tsx","participants/Teams.tsx","participants/Ranking.tsx","participants/Participants.tsx","judges/JudgeRow.tsx","judges/Judges.tsx","draws/TeamPill.tsx","draws/JudgePill.tsx","draws/RoundRow.tsx","draws/Round.tsx","draws/Draws.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","s","JSON","stringify","importTournament","files","length","fr","FileReader","onload","event","result","parse","target","localStorage","setItem","init","config","version","tournamentName","speakersOne","teamsOne","speakersTwo","teamsTwo","speakerCounter","teamCounter","judges","judgeCounter","draws","roomCounter","tournament_name","importConfig","pkg","divisions","numDivisions","importSpeakersOne","speakers_one","map","speaker","newSpeaker","speakerID","debaterID","importTeamsOne","teams_one","team","newTeam","name","teamName","round1","sp","parseInt","round2","round3","sideR1","importSpeakersTwo","speakers_two","importTeamsTwo","teams_two","speakers_counter","teams_counter","importJudges","judge","newJudge","atRound1","r1","atRound2","r2","atRound3","r3","judges_counter","importDraws","draw","newDraw","roomsOne","pairings_one","pairing","newRoom","roomID","room","roomsTwo","pairings_two","readAsText","item","window","location","reload","SetupScreen","props","state","setupForm","divisionOneName","divisionTwoName","handleSetupFormChange","bind","handleSetupFormSubmit","importData","value","Number","setupFormState","this","setState","preventDefault","divisionNames","initializeTournament","document","getElementById","Modal","show","backdrop","animation","className","dialogClassName","backdropClassName","aria-labelledby","Header","Title","id","src","logo","alt","Body","href","rel","Tabs","defaultActiveKey","Tab","eventKey","title","Form","onSubmit","Group","controlId","Control","type","placeholder","onChange","Label","Check","inline","custom","label","checked","Collapse","in","Row","Col","md","Button","variant","accept","htmlFor","React","Component","Welcome","Settings","nameForm","showWhatsNew","showPrivacy","handleNameFormChange","handleNameFormSubmit","exportData","clearData","hideWhatsNew","hidePrivacy","bsCustomFileInput","updateTournamentName","data","encodeURIComponent","getItem","replace","toLowerCase","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","confirm","clear","lg","sm","xl","xs","onClick","Date","getFullYear","GitHubLogo","onHide","closeButton","Home","Container","transition","Nav","Item","Link","Content","Pane","updateConfig","SpeakerRow","school","disqualified","trashFill","handleTextEdit","handleTextUpdate","handleDisqUpdate","trashOnMouseEnter","trashOnMouseLeave","updateSpeaker","key","rows","cols","autoComplete","spellCheck","onBlur","role","onMouseEnter","onMouseLeave","deleteSpeaker","Speakers","addSpeakerForm","speakerName","handleAddSpeakerFormChange","handleAddSpeakerFormSubmit","addSpeakerFormState","speakers","counter","scores","ranks","wins","push","updateSpeakers","blankForm","index","indexOf","teams","includes","alert","splice","table","Table","hover","bordered","OverlayTrigger","placement","overlay","Tooltip","TeamCell","round","toString","handleEdit","handleUpdate","isNaN","fn","maxLength","TeamSpeakerSelect","roundKey","speakerPos","handleFormChange","handleUpdateTeamFormChange","teamID","as","speakerPicker","TeamWinSelector","win","handleWinFormUpdate","totalWins","updateTeam","TwoPersonTeamTooltip","Popover","getDistinctSpeakers","Set","TeamRow","updateTeamForm","showModal","showWarning","peopleFill","handleTeamNameEdit","handleTeamNameUpdate","setScore","setRank","modalShow","modalHide","handleTeamUpdate","peopleOnMouseEnter","peopleOnMouseLeave","no","find","el","updateTeamFormState","speakerRows","isInR1","isInR2","isInR3","totalScores","totalRanks","div","isInR","i","t","scores1","forEach","scores2","scores3","ranks1","ranks2","ranks3","totalPoints","findIndex","teamSpeakerSelects","rowSpan","deleteTeam","colSpan","size","TeamTable","Teams","addTeamForm","speaker1","speaker2","speaker3","handleAddTeamFormChange","handleAddTeamFormSubmit","addTeamFormState","memberList","updateTeams","rooms","pair","prop","opp","filter","noTeams","teamTable","Ranking","speaker_ranking","slice","sort","a","b","a_sum","reduce","x","y","b_sum","a_ranks","b_ranks","a_team","b_team","a_wins","undefined","b_wins","a_tpoints","b_tpoints","team_ranking","speakerIDs","speakerNames","currSpeaker","speakerElements","striped","Participants","JudgeRow","canChair","handleJudgeToggle","updateJudge","judgeID","deleteJudge","Judges","addJudgeForm","judgeName","handleAddJudgeFormChange","handleAddJudgeFormSubmit","judgeAddFormState","updateJudges","inRound","chair","wings","totalRooms","Math","getTotalTeams","chairsR1","chairsR2","chairsR3","TeamPill","swapTeamID","handleRoomFormChange","handleRoomFormSubmit","updateRoom","popover","trigger","rootClose","hasConflict","JudgePill","isChair","hasChairedBefore","RoundRow","roomName","handleRoomChange","updateRoomTeam","updateRoomJudge","prevProps","updateRooms","thisTeamID","thisRoom","thisTeamPos","checkRoom","newRoomID","nextDiv","r","swapChairID","j","oldIndex","speakersInTeams","roomNum","speakerSchools","teamConflict","roomR1","wing","Round","pairings","generated","fullScreen","generateDraw","deleteDraw","fullScreenDraw","len1","len2","availableJudges","chairs","totalTeams","floor","random","pop","t1","t2","roundOneRoomsOne","roundOneRoomsTwo","propsOne","propsTwo","wasProp","iWasProp","drawr","documentElement","requestFullscreen","fullscreenElement","exitFullscreen","tables","Draws","App","updateStorage","updateInit","updateSpeakersOne","updateSpeakersTwo","updateTeamsOne","updateTeamsTwo","showMenu","toggleMenu","participants_nav","participants_panes","fluid","aria-controls","aria-expanded","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c4f7564c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.15863a1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-github.026cb8cd.svg\";","import pkg from '../../package.json';\nconst s = JSON.stringify;\n\nexport const importTournament = (files: FileList) => {\n    if(files.length <= 0) return false;\n\n    const fr = new FileReader();\n    fr.onload = event => {\n        const result = JSON.parse(event.target!.result as string);\n\n        // CHECK IF PROPER TOURNAMENT EXPORT\n        if(!(\"init\" in result)\n            || !((\"tournamentName\" in result) || (\"tournament_name\" in result))\n            || !(\"config\" in result)\n            || !((\"speakersOne\" in result) || (\"speakers_one\" in result))\n            || !((\"speakersTwo\" in result) || (\"speakers_two\" in result))\n            || !((\"teamsOne\" in result) || (\"teams_one\" in result))\n            || !((\"teamsTwo\" in result) || (\"teams_two\" in result))\n            || !((\"speakerCounter\" in result) || (\"speakers_counter\" in result))\n            || !(\"judges\" in result)\n            || !((\"judgeCounter\" in result) || (\"judges_counter\" in result))\n            || !(\"draws\" in result))\n            {\n                return false;\n            }\n\n        localStorage.setItem(\"init\", s(result.init));\n        // COMPATIBILITY WITH EXPORTS BEFORE VERSION 0.3.0\n        if(!result.config.version) {\n            localStorage.setItem(\"tournamentName\", s(result.tournament_name));\n\n            let importConfig = result.config;\n            importConfig.version = pkg.version;\n            if(importConfig.divisions === \"1\") {\n                importConfig.numDivisions = 1\n            } else {\n                importConfig.numDivisions = 2\n            }\n            delete importConfig.divisions\n            localStorage.setItem(\"config\", s(importConfig));\n\n            let importSpeakersOne = result.speakers_one.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersOne\", s(importSpeakersOne));\n\n            let importTeamsOne = result.teams_one.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsOne\", s(importTeamsOne));\n\n            let importSpeakersTwo = result.speakers_two.map((speaker: any) => {\n                let newSpeaker = {\n                    ...speaker,\n                    speakerID: speaker.debaterID\n                }\n                delete newSpeaker.debaterID\n                return newSpeaker\n            });\n            localStorage.setItem(\"speakersTwo\", s(importSpeakersTwo));\n\n            let importTeamsTwo = result.teams_two.map((team: any) => {\n                let newTeam = {\n                    ...team,\n                    name: team.teamName,\n                    round1: team.round1.map((sp: string) => parseInt(sp)),\n                    round2: team.round2.map((sp: string) => parseInt(sp)),\n                    round3: team.round2.map((sp: string) => parseInt(sp))\n                }\n                delete newTeam.teamName\n                delete newTeam.sideR1\n                return newTeam\n            });\n            localStorage.setItem(\"teamsTwo\", s(importTeamsTwo));\n\n            localStorage.setItem(\"speakerCounter\", s(result.speakers_counter));\n            localStorage.setItem(\"teamCounter\", s(result.teams_counter));\n\n            let importJudges = result.judges.map((judge: any) => {\n                let newJudge = {\n                    ...judge,\n                    atRound1: judge.r1,\n                    atRound2: judge.r2,\n                    atRound3: judge.r3\n                }\n                delete newJudge.r1\n                delete newJudge.r2\n                delete newJudge.r3\n                return newJudge\n            });\n            localStorage.setItem(\"judges\", s(importJudges));\n\n            localStorage.setItem(\"judgeCounter\", s(result.judges_counter));\n\n            let roomCounter = 0;\n            let importDraws = result.draws.map((draw: any) => {\n                let newDraw = {\n                    ...draw,\n                    roomsOne: draw.pairings_one.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    }),\n                    roomsTwo: draw.pairings_two.map((pairing: any) => {\n                        let newRoom = {\n                            ...pairing,\n                            roomID: roomCounter++,\n                            name: pairing.room\n                        }\n                        delete newRoom.room\n                        return newRoom\n                    })\n                }\n                delete newDraw.pairings_one\n                delete newDraw.pairings_two\n                return newDraw\n            });\n            localStorage.setItem(\"draws\", s(importDraws));\n            localStorage.setItem(\"roomCounter\", s(roomCounter));\n\n        // CURRENT EXPORTS\n        } else {\n            localStorage.setItem(\"tournamentName\", s(result.tournamentName));\n            localStorage.setItem(\"config\", s(result.config));\n            localStorage.setItem(\"speakersOne\", s(result.speakersOne));\n            localStorage.setItem(\"teamsOne\", s(result.teamsOne));\n            localStorage.setItem(\"speakersTwo\", s(result.speakersTwo));\n            localStorage.setItem(\"teamsTwo\", s(result.teamsTwo));\n            localStorage.setItem(\"speakerCounter\", s(result.speakerCounter));\n            localStorage.setItem(\"teamCounter\", s(result.teamCounter));\n            localStorage.setItem(\"judges\", s(result.judges));\n            localStorage.setItem(\"judgeCounter\", s(result.judgeCounter));\n            localStorage.setItem(\"draws\", s(result.draws));\n            localStorage.setItem(\"roomCounter\", s(result.roomCounter));\n        }\n\n    }\n    fr.readAsText(files.item(0) as File);\n\n    window.location.reload();\n}","import React, { ChangeEvent, FormEvent } from 'react';\nimport './SetupScreen.scss';\nimport logo from '../images/logo.svg';\nimport { importTournament } from '../utils/importTournament';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\n\ntype SetupScreenProps = {\n    init: boolean,\n    initializeTournament: (tournamentName: string, numDivisions: number, divisionNames: string[]) => void\n}\n\ntype SetupScreenState = {\n    setupForm: {\n        tournamentName: string,\n        numDivisions: number,\n        divisionOneName: string,\n        divisionTwoName: string,\n        [key: string]: string|number\n    }\n}\n\nclass SetupScreen extends React.Component<SetupScreenProps, SetupScreenState> {\n    constructor(props: SetupScreenProps) {\n        super(props);\n\n        this.state = {\n            setupForm: {\n                tournamentName: \"\",\n                numDivisions: 1,\n                divisionOneName: \"\",\n                divisionTwoName: \"\"\n            }\n        }\n\n        this.handleSetupFormChange = this.handleSetupFormChange.bind(this);\n        this.handleSetupFormSubmit = this.handleSetupFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n    }\n\n\n    handleSetupFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name === \"numDivisions\") value = Number(value);\n        let setupFormState = {...this.state.setupForm};\n        setupFormState[name] = value;\n        this.setState({ setupForm: setupFormState });\n    }\n\n    handleSetupFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const name = this.state.setupForm.tournamentName;\n        if (name === \"\") return false;\n\n        const numDivisions = this.state.setupForm.numDivisions;\n        const divisionNames =[this.state.setupForm.divisionOneName, this.state.setupForm.divisionTwoName];\n        if(numDivisions === 2 && (divisionNames[0] === \"\" || divisionNames[1] === \"\")) return false;\n\n        this.props.initializeTournament(name, numDivisions, divisionNames);\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const files = (document.getElementById(\"import-setup\") as HTMLInputElement).files;\n        if(files === null) return false;\n        importTournament(files);\n    }\n\n\n    render() {\n        return (\n            <Modal\n                show={!this.props.init}\n                backdrop=\"static\"\n                animation={false}\n                className=\"setup-modal\"\n                dialogClassName=\"setup-modal-dialog\"\n                backdropClassName=\"setup-modal-backdrop\"\n                aria-labelledby=\"setup-modal-title\" >\n                <Modal.Header>\n                    <Modal.Title id=\"setup-modal-title\">\n                        <img src={logo} alt=\"TacoTab logo\" id=\"setup-logo\" />\n                        Welcome to TacoTab!\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk&mdash;this app might bite.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                    <p>You can create a new tournament from scratch, or import data from a previous TacoTab tournament.</p>\n                    \n                    <Tabs defaultActiveKey=\"createnew\" id=\"setup-tabs\">\n                        <Tab eventKey=\"createnew\" title=\"New tournament\">\n                            <Form onSubmit={this.handleSetupFormSubmit}>\n                                <h5>Tournament name</h5>\n                                <Form.Group controlId=\"setupFormTournamentName\">\n                                    <Form.Control\n                                        name=\"tournamentName\"\n                                        type=\"text\"\n                                        placeholder=\"e.g. 'Bard MS-HS 2020'\"\n                                        value={this.state.setupForm.name}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <h5 id=\"setup-form-div-h5\">Speaker divisions</h5>\n                                <Form.Group controlId=\"setupFormNumDivisions\" id=\"setup-form-num-div\">\n                                    <Form.Label>Number of speaker divisions:&nbsp;&nbsp;</Form.Label>\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"1\"\n                                        value={1}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-1\"\n                                        checked={this.state.setupForm.numDivisions === 1}\n                                        onChange={this.handleSetupFormChange} />\n                                    <Form.Check inline custom\n                                        name=\"numDivisions\"\n                                        label=\"2\"\n                                        value={2}\n                                        type=\"radio\"\n                                        id=\"setup-form-divisions-2\"\n                                        checked={this.state.setupForm.numDivisions === 2}\n                                        onChange={this.handleSetupFormChange} />\n                                </Form.Group>\n\n                                <Collapse in={this.state.setupForm.numDivisions === 2}>\n                                    <div>\n                                        <Form.Group controlId=\"setupFormDivisionNames\">\n                                            <Form.Label>Give both divisions a name for easy identification.</Form.Label>\n                                            <Form.Row>\n                                                <Col md={6}>\n                                                    <Form.Control\n                                                        name=\"divisionOneName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Novice'\"\n                                                        value={this.state.setupForm.divisionOneName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                </Col>\n                                                <Col md={6}>\n                                                    <Form.Control\n                                                        name=\"divisionTwoName\"\n                                                        type=\"text\"\n                                                        placeholder=\"e.g. 'Open'\"\n                                                        value={this.state.setupForm.divisionTwoName}\n                                                        onChange={this.handleSetupFormChange} />\n                                                </Col>\n                                            </Form.Row>\n                                        </Form.Group>\n                                    </div>\n                                </Collapse>\n\n                                <Button variant=\"primary\" type=\"submit\" id=\"setup-form-submit\">\n                                    Create the tournament\n                                </Button>\n                            </Form>\n                        </Tab>\n\n                        <Tab eventKey=\"importnew\" title=\"Import tournament\">\n                            <p>Open files generated with the Export function.</p>\n                            <Form onSubmit={this.importData}>\n                                <Form.Row>\n                                    <Col md={9}>\n                                        <div className=\"custom-file\">\n                                            <Form.Control\n                                                name=\"import\"\n                                                id=\"import-setup\"\n                                                className=\"custom-file-input\"\n                                                type=\"file\"\n                                                accept=\".tournament,.json\" />\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                        </div>\n                                    </Col>\n                                    <Col md={3}>\n                                        <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default SetupScreen;","import React from 'react';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass Welcome extends React.Component {\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <h2>Welcome!</h2>\n                    <p><strong>This is prerelease software, still under active development. Use at your own risk.</strong> For more information, see the <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub repository</a>.</p>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default Welcome;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Settings.scss';\nimport GitHubLogo from '../images/icon-github.svg';\nimport { Config } from '../types/Config';\nimport { importTournament } from '../utils/importTournament';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport bsCustomFileInput from 'bs-custom-file-input';\nimport { Download, Trash } from 'react-bootstrap-icons';\n\n\ntype SettingsProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\ntype SettingsState = {\n    nameForm: string,\n    showWhatsNew: boolean,\n    showPrivacy: boolean\n}\n\nclass Settings extends React.Component<SettingsProps, SettingsState> {\n    constructor(props: SettingsProps) {\n        super(props);\n\n        this.state = {\n            nameForm: \"\",\n            showWhatsNew: false,\n            showPrivacy: false\n        }\n\n        this.handleNameFormChange = this.handleNameFormChange.bind(this);\n        this.handleNameFormSubmit = this.handleNameFormSubmit.bind(this);\n        this.importData = this.importData.bind(this);\n        this.exportData = this.exportData.bind(this);\n        this.clearData = this.clearData.bind(this);\n        this.showWhatsNew = this.showWhatsNew.bind(this);\n        this.hideWhatsNew = this.hideWhatsNew.bind(this);\n        this.showPrivacy = this.showPrivacy.bind(this);\n        this.hidePrivacy = this.hidePrivacy.bind(this);\n    }\n\n    componentDidMount() {\n        bsCustomFileInput.init();\n    }\n\n\n    handleNameFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({nameForm: event.target.value});\n    }\n\n    handleNameFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const name = this.state.nameForm;\n        this.props.updateTournamentName(name);\n        this.setState({nameForm: \"\"});\n    }\n\n    importData(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const files = (document.getElementById(\"import-settings\") as HTMLInputElement).files;\n        if (files === null) return false;\n        importTournament(files);\n    }\n\n    exportData() {\n        let data = \"data:text/json;charset=utf-8,\";\n        data += encodeURIComponent(\"{\");\n        data += encodeURIComponent('\"init\": ' + localStorage.getItem(\"init\") + \",\");\n        data += encodeURIComponent('\"tournamentName\": ' + localStorage.getItem(\"tournamentName\") + \",\");\n        data += encodeURIComponent('\"config\": ' + localStorage.getItem(\"config\") + \",\");\n        data += encodeURIComponent('\"speakersOne\": ' + localStorage.getItem(\"speakersOne\") + \",\");\n        data += encodeURIComponent('\"teamsOne\": ' + localStorage.getItem(\"teamsOne\") + \",\");\n        data += encodeURIComponent('\"speakersTwo\": ' + localStorage.getItem(\"speakersTwo\") + \",\");\n        data += encodeURIComponent('\"teamsTwo\": ' + localStorage.getItem(\"teamsTwo\") + \",\");\n        data += encodeURIComponent('\"speakerCounter\": ' + localStorage.getItem(\"speakerCounter\") + \",\");\n        data += encodeURIComponent('\"teamCounter\": ' + localStorage.getItem(\"teamCounter\") + \",\");\n        data += encodeURIComponent('\"judges\": ' + localStorage.getItem(\"judges\") + \",\");\n        data += encodeURIComponent('\"judgeCounter\": ' + localStorage.getItem(\"judgeCounter\") + \",\");\n        data += encodeURIComponent('\"draws\": ' + localStorage.getItem(\"draws\"));\n        data += encodeURIComponent(\"}\");\n        \n        let name = this.props.tournamentName;\n        name = name.replace(/\\s+/g, '-').toLowerCase();\n        name += \".tournament\";\n\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", data);\n        downloadAnchorNode.setAttribute(\"download\", name);\n        document.body.appendChild(downloadAnchorNode);\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n \n    clearData() {\n        const conf = window.confirm(\"Are you sure you want to delete all data?\");\n        if(!conf) return false;\n        localStorage.clear();\n        window.location.reload();\n    }\n\n    showWhatsNew() { this.setState({showWhatsNew: true}); }\n    hideWhatsNew() { this.setState({showWhatsNew: false}); }\n    showPrivacy() { this.setState({showPrivacy: true}); }\n    hidePrivacy() { this.setState({showPrivacy: false}); }\n\n\n    render() {\n        return (\n            <>\n                <div>\n                    <h2>Settings</h2>\n                    <Row>\n                        <Col lg={8} className=\"col-settings\">\n                            <p>Manage your tournament.</p>\n                            <section>\n                                <h3>Change tournament name</h3>\n                                <Form onSubmit={this.handleNameFormSubmit}>\n                                    <Form.Row>\n                                        <Col sm={9} xl={6}>\n                                            <Form.Control\n                                                name=\"tournament-name\"\n                                                type=\"text\"\n                                                placeholder=\"New name\"\n                                                value={this.state.nameForm}\n                                                onChange={this.handleNameFormChange} />\n                                        </Col>\n                                        <Col>\n                                            <Button\n                                                variant=\"primary\"\n                                                type=\"submit\">\n                                                Save\n                                            </Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Import tournament data</h3>\n                                <p>Open files generated with the Export function below. <strong>Note:</strong> this will override all current data!</p>\n                                <Form onSubmit={this.importData}>\n                                    <Form.Row>\n                                        <Col xs={9} xl={6}>\n                                            <div className=\"custom-file\">\n                                                <Form.Control\n                                                    name=\"import\"\n                                                    id=\"import-settings\"\n                                                    className=\"custom-file-input\"\n                                                    type=\"file\"\n                                                    accept=\".tournament,.json\" />\n                                                <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose file</label>\n                                            </div>\n                                        </Col>\n                                        <Col>\n                                            <Button variant=\"primary\" type=\"submit\">Import</Button>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </section>\n                            <section>\n                                <h3>Export tournament data</h3>\n                                <p>Save all tournament data to a file on your PC.</p>\n                                <Button\n                                    variant=\"primary\"\n                                    onClick={this.exportData}>\n                                    <Download className=\"btn-icon\" />\n                                    Export data\n                                </Button>\n                            </section>\n                            <section id=\"section-cleardata\">\n                                <h3>Clear tournament data</h3>\n                                <p>Warning: this will delete <strong>all</strong> entered data. Save your data using the Export function first.</p>\n                                <Button\n                                    variant=\"danger\"\n                                    onClick={this.clearData}>\n                                    <Trash className=\"btn-icon\" />\n                                    Clear data\n                                </Button>\n                            </section>\n                        </Col>\n                        <Col lg={4} className=\"col-settings\">\n                            <section id=\"section-about\">\n                                <h3>About</h3>\n                                <p>\n                                    TacoTab β version 0.4.1<br />\n                                    &copy; {new Date().getFullYear()} Rayo Verweij<br />\n                                    <img src={GitHubLogo} alt=\"GitHub logo\" id=\"logo-github\"/>&nbsp;\n                                    <a href=\"https://github.com/rayoverweij/tacotab\" rel=\"noopener noreferrer\" target=\"_blank\">\n                                        GitHub\n                                    </a>\n                                    &nbsp;&middot;&nbsp;<span className=\"fake-anchor\" onClick={this.showWhatsNew}>What's new</span>\n                                    &nbsp;&middot;&nbsp;<span className=\"fake-anchor\" onClick={this.showPrivacy}>Privacy</span>\n                                </p>\n                                <p>\n                                    <a href=\"https://rayo.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Check out more of Rayo's work</a> or <a href=\"https://debate.bard.edu\" rel=\"noopener noreferrer\" target=\"_blank\">visit the Bard Debate Union</a>&mdash;Bard's best sports team!\n                                </p>\n                            </section>\n                        </Col>\n                    </Row>\n                </div>\n\n                <Modal\n                    show={this.state.showWhatsNew}\n                    onHide={this.hideWhatsNew}\n                    className=\"whatsnew-modal\"\n                    aria-labelledby=\"whatsnew-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"whatsnew-modal-title\">\n                            What's new\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            New in version 0.4.1:\n                            <ul>\n                                <li>General: last update's design refresh has been refined, with clearer headings and more space to work</li>\n                                <li>General: a new privacy policy, explaining that we never collect any data, has been added to the Settings page</li>\n                                <li>Draw: chairs that have already chaired one of the teams in their room before are marked in orange</li>\n                                <li>Draw: a new legend explains the colors that teams and judges get when there is a clash</li>\n                                <li>Fixed some bugs with team swapping</li>\n                                <li>Fixed a bug where teams didn't properly remember their opponents for checking in later draws</li>\n                                <li>Under-the-hood: information that can be gathered from looking at previous round (e.g. a team's previous opponents, or a chair's previous rooms) is now only stored in the draw, and not duplicated in the team and judge objects</li>\n                                <li>Under-the-hood: sharing TacoTab on social media such as Facebook and Twitter now gives a better preview of the app</li>\n                            </ul>\n                            For an overview of changes made in previous versions, see <a href=\"https://github.com/rayoverweij/tacotab/releases\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub</a>.\n                        </p>\n                    </Modal.Body>\n                </Modal>\n\n                <Modal\n                    show={this.state.showPrivacy}\n                    onHide={this.hidePrivacy}\n                    className=\"privacy-modal\"\n                    aria-labelledby=\"privacy-modal-title\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"privacy-modal-title\">\n                            Privacy Policy\n                        </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>\n                            We don't collect or store any of your data.\n                        </p>\n                        <p>\n                            It is, quite frankly, impossible for us to do so. There are no servers, no accounts, and no analytics. All data that you enter is stored in the local storage of your browser, and never leaves the instance of the browser you are runnning right now. (In fact, you could download the app and use it without even needing an internet connection!)\n                        </p>\n                        <p>\n                            There are also no third-party services or scripts running in the background that might collect your data, or cookies of any kind. The only way for data to leave this app is if you <em>manually</em> use the \"export\" function on the Settings page.\n                        </p>\n                        <p>\n                            What happens on your computer stays on your computer!\n                        </p>\n                    </Modal.Body>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Settings;","import React from 'react';\nimport Welcome from './Welcome';\nimport Settings from './Settings';\nimport { Config } from '../types/Config';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { HouseDoorFill, GearWideConnected } from 'react-bootstrap-icons';\n\n\ntype HomeProps = {\n    config: Config,\n    tournamentName: string,\n    updateTournamentName: (name: string) => void,\n    updateConfig: (config: Config) => void\n}\n\nclass Home extends React.Component<HomeProps> {\n    render() {\n        return (\n            <Tab.Container id=\"home-view\" defaultActiveKey=\"welcome\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"welcome\" className=\"sub-nav-link\">\n                                    <HouseDoorFill className=\"btn-icon\"/>\n                                    Welcome\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"settings\" className=\"sub-nav-link\">\n                                    <GearWideConnected className=\"btn-icon\"/>\n                                    Settings\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"welcome\">\n                                <Welcome />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"settings\">\n                                <Settings\n                                    config={this.props.config}\n                                    tournamentName={this.props.tournamentName}\n                                    updateTournamentName={this.props.updateTournamentName}\n                                    updateConfig={this.props.updateConfig} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Home;","import React, { ChangeEvent, FocusEvent } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { Trash, TrashFill } from 'react-bootstrap-icons';\nimport { Speaker } from '../types/Speaker';\n\n\ntype SpeakerRowProps = {\n    speaker: Speaker,\n    updateSpeaker: (speaker: Speaker) => void,\n    deleteSpeaker: (speaker: Speaker) => void\n}\n\ntype SpeakerRowState = {\n    name: string,\n    school: string,\n    disqualified: boolean,\n    trashFill: boolean,\n    [key: string]: string|boolean\n}\n\nclass SpeakerRow extends React.Component<SpeakerRowProps, SpeakerRowState> {\n    constructor(props: SpeakerRowProps) {\n        super(props);\n\n        this.state = {\n            name: this.props.speaker.name,\n            school: this.props.speaker.school,\n            disqualified: this.props.speaker.disqualified,\n            trashFill: false\n        }\n\n        this.handleTextEdit = this.handleTextEdit.bind(this);\n        this.handleTextUpdate = this.handleTextUpdate.bind(this);\n        this.handleDisqUpdate = this.handleDisqUpdate.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n    }\n\n    handleTextEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        const {name, value} = event.target;\n        let state = {...this.state};\n        state[name] = value;\n        this.setState(state);\n    }\n    \n    handleTextUpdate(event: FocusEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = this.state[name];\n        const speaker = this.props.speaker;\n        speaker[name] = value;\n        this.props.updateSpeaker(speaker);\n    }\n\n    handleDisqUpdate(event: ChangeEvent<HTMLInputElement>) {\n        const checked = event.target.checked;\n        const speaker = this.props.speaker;\n        speaker.disqualified = checked;\n        this.setState({disqualified: checked});\n        this.props.updateSpeaker(speaker);\n    }\n\n    trashOnMouseEnter() {\n        this.setState({trashFill: true});\n    }\n\n    trashOnMouseLeave() {\n        this.setState({trashFill: false});\n    }\n    \n    render() {\n        const speaker = this.props.speaker;\n\n        return (\n            <tr key={`speaker-row-${speaker.speakerID}`}>\n                <td className=\"editable\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        name=\"name\"\n                        rows={1}\n                        cols={this.state.name.length > 8 ? this.state.name.length : 8}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.name}\n                        onChange={this.handleTextEdit}\n                        onBlur={this.handleTextUpdate} />\n                </td>\n                <td className=\"editable\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        name=\"school\"\n                        rows={1}\n                        cols={this.state.school.length > 8 ? this.state.school.length : 8}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.school}\n                        onChange={this.handleTextEdit}\n                        onBlur={this.handleTextUpdate} />\n                </td>\n                <td className=\"cell-low-padding\">\n                    <Form.Check\n                        id={`speaker-disq-${speaker.speakerID}`}\n                        type=\"switch\"\n                        name=\"disqualified\"\n                        label=\"\"\n                        onChange={this.handleDisqUpdate}\n                        checked={this.state.disqualified}\n                        className={this.state.disqualified ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"table-delete\">\n                    {this.state.trashFill ? \n                        <TrashFill\n                            role=\"button\"\n                            className=\"icon red\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteSpeaker(speaker)} />\n                        :\n                        <Trash\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteSpeaker(speaker)} />\n                    }\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default SpeakerRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Speakers.scss';\nimport SpeakerRow from './SpeakerRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { TrashFill } from 'react-bootstrap-icons';\n\n\ntype SpeakersProps = {\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void\n}\n\ntype SpeakersState = {\n    addSpeakerForm: {\n        speakerName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Speakers extends React.Component<SpeakersProps, SpeakersState> {\n    constructor(props: SpeakersProps) {\n        super(props);\n\n        this.state = {\n            addSpeakerForm: {\n                speakerName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddSpeakerFormChange = this.handleAddSpeakerFormChange.bind(this);\n        this.handleAddSpeakerFormSubmit = this.handleAddSpeakerFormSubmit.bind(this);\n        this.updateSpeaker = this.updateSpeaker.bind(this);\n        this.deleteSpeaker = this.deleteSpeaker.bind(this);\n    }\n\n\n    handleAddSpeakerFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target;\n        let addSpeakerFormState = {...this.state.addSpeakerForm};\n        addSpeakerFormState[name] = value;\n        this.setState({addSpeakerForm: addSpeakerFormState});\n    }\n\n    handleAddSpeakerFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let speakers = this.props.speakers;\n        let counter = JSON.parse(localStorage.getItem(\"speakerCounter\")!);\n\n        const newSpeaker: Speaker = {\n            speakerID: counter++,\n            name: this.state.addSpeakerForm.speakerName,\n            school: this.state.addSpeakerForm.school,\n            scores: [0, 0, 0],\n            ranks: [0, 0, 0],\n            wins: 0,\n            disqualified: false\n        };\n        speakers.push(newSpeaker);\n\n        localStorage.setItem(\"speakerCounter\", JSON.stringify(counter));\n        this.props.updateSpeakers(speakers);\n\n        let blankForm = {...this.state.addSpeakerForm};\n        blankForm.speakerName = \"\";\n        this.setState({addSpeakerForm: blankForm});\n    }\n\n    updateSpeaker(speaker: Speaker) {\n        let speakers = this.props.speakers;\n        const index = speakers.indexOf(speaker);\n        speakers[index] = speaker;\n        this.props.updateSpeakers(speakers);\n    }\n\n    deleteSpeaker(speaker: Speaker) {\n        for(const team of this.props.teams) {\n            if(team.round1.includes(speaker.speakerID) || team.round2.includes(speaker.speakerID) || team.round3.includes(speaker.speakerID)) {\n                window.alert(`This speaker is still part of team ${team.name}. You need to remove them from the team before you can delete them.`);\n                return;\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete speaker ${speaker.name}?`);\n        if(conf) {\n            let speakers = this.props.speakers;\n            const index = speakers.indexOf(speaker);\n            speakers.splice(index, 1);\n            this.props.updateSpeakers(speakers);\n        }\n    }\n\n\n    render() {\n        let table;\n        if(this.props.speakers.length === 0) {\n            table = <p className=\"none-yet\">No speakers yet!</p>;\n        } else {\n            table = (\n                <Table className=\"speaker-table\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>School</th>\n                            <th>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disqualify-info\">\n                                            Disqualified speakers can still be added to teams and receive scores, but won't be listed in the ranking\n                                        </Tooltip>\n                                    }>\n                                    <abbr title=\"\">Disq</abbr>\n                                </OverlayTrigger>\n                            </th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.speakers.map(speaker => {\n                            return (\n                                <SpeakerRow \n                                    key={`speaker-row-${speaker.speakerID}`}\n                                    speaker={speaker}\n                                    updateSpeaker={this.updateSpeaker}\n                                    deleteSpeaker={this.deleteSpeaker} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n            \n            \n        }\n\n        return (\n            <div>\n                <h2>Speakers</h2>\n                <Row>\n                    <Col>\n                    \n                        <Form onSubmit={this.handleAddSpeakerFormSubmit}>\n                            <Form.Row>\n                                <Col md={4}>\n                                    <Form.Control\n                                        name=\"speakerName\"\n                                        type=\"text\"\n                                        placeholder=\"Name\"\n                                        value={this.state.addSpeakerForm.speakerName}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Control\n                                        name=\"school\"\n                                        type=\"text\"\n                                        placeholder=\"School\"\n                                        value={this.state.addSpeakerForm.school}\n                                        onChange={this.handleAddSpeakerFormChange} />\n                                </Col>\n                                <Col>\n                                    <Button\n                                        variant=\"primary\"\n                                        className=\"btn-submit\"\n                                        type=\"submit\">\n                                        Add speaker\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={10} xl={8} className=\"table-col\">\n                        {table}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Speakers;","import React, { ChangeEvent } from 'react';\nimport { Speaker } from '../types/Speaker';\n\n\ntype TeamCellProps = {\n    type: string,\n    speaker: Speaker,\n    round: number,\n    fn: (speaker: Speaker, no: number, value: number) => void\n}\n\ntype TeamCellState = {\n    value: string\n}\n\nclass TeamCell extends React.Component<TeamCellProps, TeamCellState> {\n    constructor(props: TeamCellProps) {\n        super(props);\n\n        this.state = {\n            value: this.props.type === \"score\" ? this.props.speaker.scores[this.props.round].toString() : this.props.speaker.ranks[this.props.round].toString()\n        }\n\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n\n\n    handleEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({value: event.target.value});\n    }\n\n    handleUpdate(event: ChangeEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        let value: string = this.state.value;\n        if(!value || isNaN(Number(value))) {\n            value = \"0\";\n        }\n        this.props.fn(this.props.speaker, this.props.round, Number(value));\n    }\n\n\n    render() {\n        return (\n            <textarea\n                rows={1}\n                cols={this.props.type === \"score\" ? 2 : 1}\n                maxLength={this.props.type === \"score\" ? 2 : 1}\n                autoComplete=\"off\"\n                value={this.state.value}\n                onChange={this.handleEdit}\n                onBlur={this.handleUpdate} />\n        );\n    }\n}\n\nexport default TeamCell;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamSpeakerSelectProps = {\n    team: Team,\n    speakerPos: number,\n    round: number,\n    value: Array<number[]>,\n    handleUpdateTeamFormChange: (value: number, speaker: number, round: number) => void,\n    speakerPicker: JSX.Element[]\n}\n\ntype TeamSpeakerSelectState = {\n    value: number\n}\n\nclass TeamSpeakerSelect extends React.Component<TeamSpeakerSelectProps, TeamSpeakerSelectState> {\n    constructor(props: TeamSpeakerSelectProps) {\n        super(props);\n\n        let roundKey: keyof Team;\n        if(this.props.round === 1) {\n            roundKey = \"round1\";\n        } else if(this.props.round === 2) {\n            roundKey = \"round2\";\n        } else {\n            roundKey = \"round3\";\n        }\n\n        this.state = {\n            value: this.props.team[roundKey][this.props.speakerPos]\n        }\n\n        this.handleFormChange = this.handleFormChange.bind(this);\n    }\n\n\n    handleFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const value = parseInt(event.target.value);\n        this.setState({value: value});\n        this.props.handleUpdateTeamFormChange(value, this.props.speakerPos, this.props.round);\n    }\n\n\n    render() {\n        return (\n            <Col>\n                <Form.Group controlId={`form-update-team-${this.props.team.teamID}-speaker-${this.props.speakerPos}-round-${this.props.round}`}>\n                    <Form.Label>Round {this.props.round}</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        name={`speaker-${this.props.speakerPos}-round-${this.props.round}`}\n                        value={this.state.value}\n                        onChange={this.handleFormChange}>\n                            {this.props.speakerPos === 2 ? <option value={-1}>[averaged third speaker]</option> : \"\"}\n                            {this.props.speakerPicker}\n                    </Form.Control>\n                </Form.Group>\n            </Col>\n        );\n    }\n}\n\nexport default TeamSpeakerSelect;","import React, { ChangeEvent } from 'react';\nimport { Team } from '../types/Team';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamWinSelectorProps = {\n    team: Team,\n    round: number,\n    updateTeam: (team: Team) => void\n}\n\ntype TeamWinSelectorState = {\n    win: boolean\n}\n\nclass TeamWinSelector extends React.Component<TeamWinSelectorProps, TeamWinSelectorState> {\n    constructor(props: TeamWinSelectorProps){\n        super(props);\n\n        this.state = {\n            win: this.props.team.wins[this.props.round - 1]\n        }\n\n        this.handleWinFormUpdate = this.handleWinFormUpdate.bind(this);\n    }\n\n\n    handleWinFormUpdate(event: ChangeEvent<HTMLInputElement>) {\n        let team = this.props.team;\n\n        if(event.target.value === \"true\") {\n            team.wins[this.props.round - 1] = true;\n            team.totalWins += 1;\n            this.setState({win: true});\n        } else {\n            team.wins[this.props.round - 1] = false;\n            team.totalWins -= 1;\n            this.setState({win: false});\n        }\n\n        this.props.updateTeam(team);\n    }\n\n\n    render() {\n        return (\n            <Form>\n                <Form.Control\n                    as=\"select\"\n                    name={`win-form-${this.props.team.teamID}-round-${this.props.round}`}\n                    value={this.state.win.toString()}\n                    onChange={this.handleWinFormUpdate}>\n                        <option value=\"true\">Win</option>\n                        <option value=\"false\">Loss</option>\n                </Form.Control>\n            </Form>\n        );\n    }\n}\n\nexport default TeamWinSelector;","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { InfoCircle } from 'react-bootstrap-icons';\n\nclass TwoPersonTeamTooltip extends React.Component {\n    render() {\n        return (\n            <OverlayTrigger\n                placement=\"top\"\n                overlay={\n                    <Popover className=\"popover-explainer\" id=\"tooltip-totalspeakerpoints\">\n                        <Popover.Content>\n                            There are two ways to handle two-person teams. When choosing \"averaged third speaker\",\n                            the points and ranks for both speakers will be averaged. If instead you want the speeches\n                            of one team member to count double, create a new \"ghost\" speaker in the Speakers tab,\n                            disqualify them, and add them here.\n                        </Popover.Content>\n                    </Popover>\n                }>    \n                <InfoCircle className=\"icon-info\" />\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TwoPersonTeamTooltip;","import { Team } from '../types/Team';\n\nexport function getDistinctSpeakers(team: Team) {\n    let sp = []\n    for(let s = 0; s < 3; s++) {\n        sp.push(team.round1[s]);\n        sp.push(team.round2[s]);\n        sp.push(team.round3[s]);\n    }\n    return [...new Set(sp)];\n}","import React, { FormEvent, ChangeEvent, FocusEvent } from 'react';\nimport TeamCell from './TeamCell';\nimport TeamSpeakerSelect from './TeamSpeakerSelect';\nimport TeamWinSelector from './TeamWinSelector';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Trash, TrashFill, People, PeopleFill } from 'react-bootstrap-icons';\n\n\ntype TeamRowProps = {\n    team: Team,\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void,\n    speakerPicker: JSX.Element[]\n}\n\ntype TeamRowState = {\n    name: string,\n    speakers: number[],\n    updateTeamForm: Array<number[]>,\n    showModal: boolean,\n    showWarning: boolean,\n    trashFill: boolean,\n    peopleFill: boolean\n}\n\nclass TeamRow extends React.Component<TeamRowProps, TeamRowState> {\n    constructor(props: TeamRowProps) {\n        super(props);\n        \n        this.state = {\n            name: this.props.team.name,\n            speakers: getDistinctSpeakers(this.props.team),\n            updateTeamForm: [\n                [this.props.team.round1[0], this.props.team.round2[0], this.props.team.round3[0]],\n                [this.props.team.round1[1], this.props.team.round2[1], this.props.team.round3[1]],\n                [this.props.team.round1[2], this.props.team.round2[2], this.props.team.round3[2]]\n            ],\n            showModal: false,\n            showWarning: false,\n            trashFill: false,\n            peopleFill: false\n        }\n\n        this.handleTeamNameEdit = this.handleTeamNameEdit.bind(this);\n        this.handleTeamNameUpdate = this.handleTeamNameUpdate.bind(this);\n        this.setScore = this.setScore.bind(this);\n        this.setRank = this.setRank.bind(this);\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleUpdateTeamFormChange = this.handleUpdateTeamFormChange.bind(this);\n        this.handleTeamUpdate = this.handleTeamUpdate.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n        this.peopleOnMouseEnter = this.peopleOnMouseEnter.bind(this);\n        this.peopleOnMouseLeave = this.peopleOnMouseLeave.bind(this);\n    }\n\n\n    handleTeamNameEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        this.setState({name: event.target.value});\n    }\n    \n    handleTeamNameUpdate(event: FocusEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        const name = this.state.name;\n        const team = this.props.team;\n        team.name = name;\n        this.props.updateTeam(team);\n    }\n    \n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n    \n    setScore(speaker: Speaker, no: number, value: number) {\n        let speakers = this.props.speakers;\n        speakers\n            .find(el => el.speakerID.toString() === speaker.speakerID.toString())!\n            .scores[no] = value;\n\n        this.props.updateSpeakers(speakers);\n    }\n\n    setRank(speaker: Speaker, no: number, value: number) {\n        let speakers = this.props.speakers;\n        speakers\n            .find(el => el.speakerID.toString() === speaker.speakerID.toString())!\n            .ranks[no] = value;\n        \n        this.props.updateSpeakers(speakers);\n    }\n\n    handleUpdateTeamFormChange(value: number, speakerPos: number, round: number) {\n        let updateTeamFormState = this.state.updateTeamForm;\n        updateTeamFormState[speakerPos][round - 1] = value;\n        this.setState({updateTeamForm: updateTeamFormState});\n    }\n\n    handleTeamUpdate(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const newTeam = [...this.state.updateTeamForm];\n        if((newTeam[0][0] === newTeam[1][0] || newTeam[0][0] === newTeam[2][0] || newTeam[1][0] === newTeam[2][0])\n            || (newTeam[0][1] === newTeam[1][1] || newTeam[0][1] === newTeam[2][1] || newTeam[1][1] === newTeam[2][1])\n            || (newTeam[0][2] === newTeam[1][2] || newTeam[0][2] === newTeam[2][2] || newTeam[1][2] === newTeam[2][2])) {\n                this.setState({showWarning: true});\n                return false;\n            }\n\n        let team = this.props.team;\n        team.round1 = [newTeam[0][0], newTeam[1][0], newTeam[2][0]];\n        team.round2 = [newTeam[0][1], newTeam[1][1], newTeam[2][1]];\n        team.round3 = [newTeam[0][2], newTeam[1][2], newTeam[2][2]];\n\n        this.props.updateTeam(team);\n        this.setState({speakers: getDistinctSpeakers(this.props.team)});\n        this.setState({showWarning: false});\n        this.modalHide();\n    }\n\n    trashOnMouseEnter() { this.setState({trashFill: true}); }\n    trashOnMouseLeave() { this.setState({trashFill: false}); }\n    peopleOnMouseEnter() { this.setState({peopleFill: true}); }\n    peopleOnMouseLeave() { this.setState({peopleFill: false}); }\n\n\n    render() {\n        const team = this.props.team;\n        const speakers = this.state.speakers.map(sp => {\n            if(sp === -1) {\n                return null;\n            } else {\n                return this.props.speakers.find(el => el.speakerID === sp)!;\n            }\n        });\n        \n        // Calculate average scores\n        if(speakers.includes(null)) {\n            const index = speakers.indexOf(null);\n\n            speakers[index] = {\n                speakerID: -1,\n                name: \"[averaged third speaker]\",\n                school: \"\",\n                scores: [\n                    (speakers[0]!.scores[0] + speakers[1]!.scores[0]) / 2,\n                    (speakers[0]!.scores[1] + speakers[1]!.scores[1]) / 2,\n                    (speakers[0]!.scores[2] + speakers[1]!.scores[2]) / 2\n                ],\n                ranks: [\n                    (speakers[0]!.ranks[0] + speakers[1]!.ranks[0]) / 2,\n                    (speakers[0]!.ranks[1] + speakers[1]!.ranks[1]) / 2,\n                    (speakers[0]!.ranks[2] + speakers[1]!.ranks[2]) / 2\n                ],\n                wins: 0,\n                disqualified: true\n            }\n        }\n\n        // Generate the table rows\n        const speakerRows = speakers.map(speaker => {\n            speaker = speaker!\n\n            if(speaker.speakerID === -1) {\n                return <tr key={`${team.teamID}-average-third`}></tr>;\n            }\n\n            const isInR1 = this.props.team.round1.includes(speaker.speakerID);\n            const isInR2 = this.props.team.round2.includes(speaker.speakerID);\n            const isInR3 = this.props.team.round3.includes(speaker.speakerID);\n\n            let totalScores = 0;\n            if (isInR1) totalScores += speaker.scores[0];\n            if (isInR2) totalScores += speaker.scores[1];\n            if (isInR3) totalScores += speaker.scores[2];\n\n            let totalRanks = 0;\n            if (isInR1) totalRanks += speaker.ranks[0];\n            if (isInR2) totalRanks += speaker.ranks[1];\n            if (isInR3) totalRanks += speaker.ranks[2];\n\n            return (\n                <tr key={`${speaker.name}-${this.props.div}-row`}>\n                    <td>{speaker.name}</td>\n                    {\n                        [isInR1, isInR2, isInR3].map((isInR, i) => {\n                            return [\"score\", \"rank\"].map(t => {\n                                return (\n                                    <td className={isInR ? \"editable\" : \"disabled\"}>\n                                        <TeamCell\n                                            key={`teamcell-${speaker!.speakerID}-${i}-${t}`}\n                                            type={t}\n                                            speaker={speaker!}\n                                            round={i}\n                                            fn={t === \"score\" ? this.setScore : this.setRank} />\n                                    </td>\n                                );\n                            })\n                        })\n                    }\n                    <td>{totalScores}</td>\n                    <td>{totalRanks}</td>\n                </tr>\n            );\n        });\n\n        // Calculate total scores\n        let scores1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                scores1 += speaker!.scores[0]\n            }\n        });\n        let scores2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                scores2 += speaker!.scores[1]\n            }\n        });\n        let scores3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                scores3 += speaker!.scores[2]\n            }\n        });\n\n        // Calculate total ranks\n        let ranks1 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round1.includes(speaker!.speakerID)) {\n                ranks1 += speaker!.ranks[0]\n            }\n        });\n        let ranks2 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round2.includes(speaker!.speakerID)) {\n                ranks2 += speaker!.ranks[1]\n            }\n        });\n        let ranks3 = 0;\n        speakers.forEach(speaker => {\n            if(this.props.team.round3.includes(speaker!.speakerID)) {\n                ranks3 += speaker!.ranks[2]\n            }\n        });\n\n\n        // Update team scores\n        team.totalPoints = scores1 + scores2 + scores3;\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => {\n            return el.teamID === team.teamID;\n        });\n        teams[index] = team;\n        if(this.props.div === 1) {\n            localStorage.setItem(\"teamsOne\", JSON.stringify(teams));\n        } else {\n            localStorage.setItem(\"teamsTwo\", JSON.stringify(teams));\n        }\n\n        // Update the people selection picker\n        const teamSpeakerSelects = [0, 1, 2].map(speakerPos => {\n            return (\n                <div key={`teamSpeakerSelectRow-team-${team.teamID}-speaker-${speakerPos}`} className=\"form-update-team-speaker\">\n                    <p>Speaker {speakerPos + 1}</p>\n                    {speakerPos === 2 ? <TwoPersonTeamTooltip /> : \"\"}\n                    <Form.Row>\n                        {\n                            [1, 2, 3].map(round => {\n                                return (\n                                    <TeamSpeakerSelect\n                                        key={`teamSpeakerSelect-team-${team.teamID}-speaker-${round}-round-${round}`}\n                                        team={team}\n                                        speakerPos={speakerPos}\n                                        round={round}\n                                        value={this.state.updateTeamForm}\n                                        handleUpdateTeamFormChange={this.handleUpdateTeamFormChange}\n                                        speakerPicker={this.props.speakerPicker} />\n                                );\n                            })\n                        }\n                    </Form.Row>\n                </div>\n            );\n        });\n\n\n        return (\n            <tbody>\n                <tr>\n                    <td rowSpan={this.state.speakers.length + 3} className=\"cell-teamname\">\n                        <textarea\n                            className=\"cell-valupdate\"\n                            rows={1}\n                            cols={this.state.name.length > 8 ? this.state.name.length : 8}\n                            autoComplete=\"off\"\n                            spellCheck=\"false\"\n                            value={this.state.name}\n                            onChange={this.handleTeamNameEdit}\n                            onBlur={this.handleTeamNameUpdate} />\n                        <br />\n                        {this.state.peopleFill ?\n                            <PeopleFill\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.peopleOnMouseEnter}\n                                onMouseLeave={this.peopleOnMouseLeave}\n                                onClick={this.modalShow} />\n                            :\n                            <People\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.peopleOnMouseEnter}\n                                onMouseLeave={this.peopleOnMouseLeave}\n                                onClick={this.modalShow} />\n                        }\n                        {this.state.trashFill ? \n                            <TrashFill\n                                role=\"button\"\n                                className=\"icon red\"\n                                onMouseEnter={this.trashOnMouseEnter}\n                                onMouseLeave={this.trashOnMouseLeave}\n                                onClick={() => this.props.deleteTeam(team)} />\n                            :\n                            <Trash\n                                role=\"button\"\n                                className=\"icon\"\n                                onMouseEnter={this.trashOnMouseEnter}\n                                onMouseLeave={this.trashOnMouseLeave}\n                                onClick={() => this.props.deleteTeam(team)} />\n                        }\n                    </td>\n                </tr>\n                {speakerRows}\n                <tr className=\"row-total\">\n                    <td>Team total</td>\n                    <td>{scores1}</td>\n                    <td>{ranks1}</td>\n                    <td>{scores2}</td>\n                    <td>{ranks2}</td>\n                    <td>{scores3}</td>\n                    <td>{ranks3}</td>\n                    <td>{scores1 + scores2 + scores3}</td>\n                    <td>{ranks1 + ranks2 + ranks3}</td>\n                </tr>\n                <tr className=\"row-wins\">\n                    <td>Team wins</td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={1} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={2} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2}>\n                        <TeamWinSelector team={this.props.team} round={3} updateTeam={this.props.updateTeam} />\n                    </td>\n                    <td colSpan={2} className=\"cell-totalwins\">\n                        Total wins: {team.totalWins}\n                    </td>\n                </tr>\n\n                <Modal show={this.state.showModal} size=\"lg\" onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Specify team members per round</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleTeamUpdate}>\n                            {teamSpeakerSelects}\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to the same round more than once!\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Save\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </tbody>\n        );\n    }\n}\n\nexport default TeamRow;","import React from 'react';\nimport './TeamTable.scss';\nimport TeamRow from './TeamRow';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Table from 'react-bootstrap/Table';\n\n\ntype TeamTableProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeam: (team: Team) => void,\n    deleteTeam: (team: Team) => void,\n    speakerPicker: JSX.Element[]\n}\n\nclass TeamTable extends React.Component<TeamTableProps> {\n    render() {\n        return (\n            <Table hover className=\"team-table table-no-top-margin\">\n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Speakers</th>\n                        <th>R1 Score</th>\n                        <th>R1 Rank</th>\n                        <th>R2 Score</th>\n                        <th>R2 Rank</th>\n                        <th>R3 Score</th>\n                        <th>R3 Rank</th>\n                        <th>Total Score</th>\n                        <th>Total Rank</th>\n                    </tr>\n                </thead>\n                {this.props.teams.map(team => {\n                    return <TeamRow\n                                key={`${team.name}-row`}\n                                team={team}\n                                div={this.props.div}\n                                speakers={this.props.speakers}\n                                teams={this.props.teams}\n                                updateSpeakers={this.props.updateSpeakers}\n                                updateTeam={this.props.updateTeam}\n                                deleteTeam={this.props.deleteTeam}\n                                speakerPicker={this.props.speakerPicker} />;\n                })}\n            </Table>\n        );\n    }\n}\n\nexport default TeamTable;","import React, { ChangeEvent, FormEvent } from 'react';\nimport TeamTable from './TeamTable';\nimport TwoPersonTeamTooltip from './TwoPersonTeamTooltip';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\n\ntype TeamsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\ntype TeamsState = {\n    addTeamForm: {\n        teamName: string,\n        speaker1: number,\n        speaker2: number,\n        speaker3: number,\n        [key: string]: string|number\n    },\n    showModal: boolean,\n    showWarning: boolean\n}\n\nclass Teams extends React.Component<TeamsProps, TeamsState> {\n    constructor(props: TeamsProps) {\n        super(props);\n\n        this.state = {\n            addTeamForm: {\n                teamName: \"\",\n                speaker1: 0,\n                speaker2: 0,\n                speaker3: 0\n            },\n            showModal: false,\n            showWarning: false\n        }\n\n        this.modalShow = this.modalShow.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n        this.handleAddTeamFormChange = this.handleAddTeamFormChange.bind(this);\n        this.handleAddTeamFormSubmit = this.handleAddTeamFormSubmit.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n        this.deleteTeam = this.deleteTeam.bind(this);\n    }\n\n\n    modalShow() {\n        this.setState({showModal: true});\n    }\n\n    modalHide() {\n        this.setState({showModal: false});\n    }\n\n    handleAddTeamFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const name = event.target.name;\n        let value: string|number = event.target.value;\n        if(name !== \"teamName\") value = Number(value);\n        let addTeamFormState = {...this.state.addTeamForm};\n        addTeamFormState[name] = value;\n        this.setState({addTeamForm: addTeamFormState});\n    }\n\n    handleAddTeamFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        const team = {...this.state.addTeamForm}\n        if (team.speaker1 === team.speaker2 || team.speaker1 === team.speaker3 || team.speaker2 === team.speaker3) {\n            this.setState({showWarning: true});\n            return false;\n        }\n\n        let teams = this.props.teams;\n        let counter = JSON.parse(localStorage.getItem(\"teamCounter\")!);\n\n        const memberList = [team.speaker1, team.speaker2, team.speaker3]\n        const newTeam: Team = {\n            teamID: counter++,\n            name: team.teamName,\n            round1: memberList,\n            round2: memberList,\n            round3: memberList,\n            totalPoints: 0,\n            wins: [false, false, false],\n            totalWins: 0\n            };\n        teams.push(newTeam);\n\n        localStorage.setItem(\"teamCounter\", JSON.stringify(counter));\n        this.props.updateTeams(teams);\n\n        this.setState({showWarning: false});\n        this.modalHide();\n    }\n\n    updateTeam(team: Team) {\n        let teams = this.props.teams;\n        const index = teams.findIndex(el => el.teamID === team.teamID);\n        teams[index] = team;\n        this.props.updateTeams(teams);\n    }\n\n    deleteTeam(team: Team) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        for (const round in draws) {\n            let rooms;\n\n            if(this.props.div === 1) rooms = draws[round].roomsOne;\n            else rooms = draws[round].roomsTwo;\n\n            for (const pair of rooms) {\n                if(pair.prop === team.teamID || pair.opp === team.teamID) {\n                    alert(\"This team has already started the tournament. You can't delete it anymore. You can still replace its speakers.\");\n                    return;\n                }\n            }\n        }\n\n        const conf = window.confirm(`Are you sure you want to delete team ${team.name}?`);\n        if(conf) {\n            let teams = this.props.teams;\n            teams = teams.filter(el => el.teamID !== team.teamID);  \n            this.props.updateTeams(teams);\n        }\n    }\n\n    \n    render() {\n        let noTeams = false;\n        if(this.props.teams.length === 0) {\n            noTeams = true;\n        }\n\n        let speakerPicker = this.props.speakers.map(speaker => {\n            return (\n                <option value={speaker.speakerID} key={`option-${speaker.speakerID}`}>{speaker.name}</option>\n            );\n        });\n\n        let teamTable;\n        if(noTeams) {\n            teamTable = <p className=\"none-yet\">No teams yet!</p>;\n        } else {\n            teamTable = <TeamTable\n                            div={this.props.div}\n                            speakers={this.props.speakers}\n                            teams={this.props.teams}\n                            updateSpeakers={this.props.updateSpeakers}\n                            updateTeam={this.updateTeam}\n                            deleteTeam={this.deleteTeam}\n                            speakerPicker={speakerPicker} />\n        }\n\n        return (\n            <div>\n                <h2>\n                    Teams\n                    <Button onClick={this.modalShow}>Add team</Button>\n                    <div className={`hint-add-team ${noTeams ? \"\" : \"hidden\"}`}>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                        <span>&gt;</span>\n                    </div>\n                </h2>\n                {teamTable}\n\n                <Modal show={this.state.showModal} onHide={this.modalHide}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add a team</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form onSubmit={this.handleAddTeamFormSubmit}>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-name`}>\n                                <Form.Label>Team name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"teamName\"\n                                    value={this.state.addTeamForm.teamName}\n                                    onChange={this.handleAddTeamFormChange} />\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-1`}>\n                                <Form.Label>Speaker 1</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker1\"\n                                    value={this.state.addTeamForm.speaker1}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-2`}>\n                                <Form.Label>Speaker 2</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker2\"\n                                    value={this.state.addTeamForm.speaker2}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId={`form-add-team-${this.props.div}-speaker-3`}>\n                                <Form.Label>Speaker 3</Form.Label>\n                                <TwoPersonTeamTooltip />\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"speaker3\"\n                                    value={this.state.addTeamForm.speaker3}\n                                    onChange={this.handleAddTeamFormChange}>\n                                        <option>-- pick a speaker --</option>\n                                        <option value=\"avg\">[averaged third speaker]</option>\n                                        {speakerPicker}\n                                </Form.Control>\n                            </Form.Group>\n                            <p className={`red ${this.state.showWarning ? \"\" : \"hidden\"}`}>\n                                You can't add a speaker to a team more than once!\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"btn-submit\"\n                                type=\"submit\">\n                                Add\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Teams;","import React from 'react';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { getDistinctSpeakers } from '../utils/getDistinctSpeakers';\n\n\ntype RankingProps = {\n    speakers: Speaker[],\n    teams: Team[]\n}\n\nclass Ranking extends React.Component<RankingProps> {\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n\n        const speakers_ranked = speakers\n                                .slice(0)\n                                .filter(el => el.disqualified === false)\n                                .sort((a, b) => {\n            // First sort on total speaker scores\n            const a_sum = a.scores.reduce((x, y) => x + y, 0);\n            const b_sum = b.scores.reduce((x, y) => x + y, 0);\n\n            if(a_sum > b_sum) {\n                return -1;\n            } else if(a_sum < b_sum) {\n                return 1;\n            } else {\n                // Secondly sort on speaker ranks\n                const a_ranks = a.ranks.reduce((x, y) => x + y, 0);\n                const b_ranks = b.ranks.reduce((x, y) => x + y, 0);\n\n                if(a_ranks < b_ranks) {\n                    return -1;\n                } else if(a_ranks > b_ranks) {\n                    return 1;\n                } else {\n                    // Thirdly sort on team wins\n                    const a_team = teams.find(el => el.round1.includes(a.speakerID));\n                    const b_team = teams.find(el => el.round1.includes(b.speakerID));\n                    const a_wins = a_team === undefined ? 0 : a_team.totalWins;\n                    const b_wins = b_team === undefined ? 0 : b_team.totalWins;\n\n                    if(a_wins > b_wins) {\n                        return -1;\n                    } else if(a_wins < b_wins) {\n                        return 1;\n                    } else {\n                        // Fourthly sort on team points\n                        const a_tpoints = a_team === undefined ? 0 : a_team.totalPoints;\n                        const b_tpoints = b_team === undefined ? 0 : b_team.totalPoints;\n\n                        if(a_tpoints > b_tpoints) {\n                            return -1;\n                        } else if(a_tpoints < b_tpoints) {\n                            return 1;\n                        } else {\n                            return 1;\n                        }\n                    }\n                }\n            }\n        });\n\n        const speaker_ranking = speakers_ranked.map((speaker, index) => {\n            let team = teams.find(el => el.round1.includes(speaker.speakerID));\n            if (team === undefined) {\n                team = {\n                    teamID: -1,\n                    name: \"\",\n                    round1: [],\n                    round2: [],\n                    round3: [],\n                    totalPoints: 0,\n                    wins: [],\n                    totalWins: 0\n                }\n            }\n            return (\n                <tr key={`speaker-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>{speaker.name}</td>\n                    <td>{speaker.school}</td>\n                    <td>{speaker.scores.reduce((x, y) => x + y, 0)}</td>\n                    <td>{speaker.ranks.reduce((x, y) => x + y, 0)}</td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n\n\n        const teams_ranked = teams.slice(0).sort((a, b) => {\n            // First sort on team wins\n            const a_wins = a.totalWins;\n            const b_wins = b.totalWins;\n\n            if(a_wins > b_wins) {\n                return -1;\n            } else if(a_wins < b_wins) {\n                return 1;\n            } else {\n                // Secondlyly sort on team points\n                const a_tpoints = a.totalPoints;\n                const b_tpoints = b.totalPoints;\n\n                if(a_tpoints > b_tpoints) {\n                    return -1;\n                } else if(a_tpoints < b_tpoints) {\n                    return 1;\n                } else {\n                    return 1;\n                }\n            }\n        });\n\n        const team_ranking = teams_ranked.map((team, index) => {\n            const speakerIDs = getDistinctSpeakers(team);\n            const speakerNames: string[] = [];\n            for(let speakerID of speakerIDs) {\n                let currSpeaker = speakers.find(sp => sp.speakerID === speakerID);\n                if(currSpeaker === undefined) continue;\n                if(currSpeaker.disqualified === true) continue;\n                speakerNames.push(currSpeaker.name);\n            }\n            const speakerElements = speakerNames.map((speaker, index) => {\n                if(index < speakerNames.length - 1) {\n                    return <>{speaker}, </>;\n                } else {\n                    return <>{speaker}</>;\n                }\n            });\n\n            return (\n                <tr key={`team-rank-${index + 1}`}>\n                    <td>{index + 1}</td>\n                    <td>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            overlay={\n                                <Tooltip id={`tooltip-rank-teamName-${index + 1}`}>\n                                    {speakerElements}\n                                </Tooltip>\n                            }>\n                            <abbr title=\"\">{team.name}</abbr>\n                        </OverlayTrigger>\n                    </td>\n                    <td>{team.totalWins}</td>\n                    <td>{team.totalPoints}</td>\n                </tr>\n            );\n        });\n        \n\n        return (\n            <div>\n                <h2>Ranking</h2>\n                <Row>\n                    <Col lg={7} className=\"table-col\">\n                        <h3>Speakers</h3>\n                        <Table striped className=\"speaker-ranking-table table-no-top-margin table-less-bottom-margin-sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>School</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerpoints\">\n                                                    Total speaker points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣSP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalspeakerranks\">\n                                                    Total speaker ranks<br />(lower is better)\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣSR</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {speaker_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col lg={5} className=\"table-col table-col-margin-lg\">\n                        <h3>Teams</h3>\n                        <Table striped className=\"table-no-top-margin\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteamwins\">\n                                                    Total team wins\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTW</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                    <th>\n                                        <OverlayTrigger\n                                            placement=\"top\"\n                                            overlay={\n                                                <Tooltip id=\"tooltip-totalteampoints\">\n                                                    Total team points\n                                                </Tooltip>\n                                            }>\n                                            <abbr title=\"\">ΣTP</abbr>\n                                        </OverlayTrigger>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {team_ranking}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Ranking;","import React from 'react';\nimport Speakers from './Speakers';\nimport Teams from './Teams';\nimport Ranking from './Ranking';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { PersonFill, PeopleFill, Trophy } from 'react-bootstrap-icons';\n\n\ntype ParticipantsProps = {\n    div: number,\n    speakers: Speaker[],\n    teams: Team[],\n    updateSpeakers: (speakers: Speaker[]) => void,\n    updateTeams: (teams: Team[]) => void\n}\n\nclass Participants extends React.Component<ParticipantsProps> {\n    render() {\n        return (\n            <Tab.Container id={`part-view-${this.props.div}`} defaultActiveKey=\"speakers\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"speakers\" className=\"sub-nav-link\">\n                                    <PersonFill className=\"btn-icon\" />\n                                    Speakers\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"teams\" className=\"sub-nav-link\">\n                                    <PeopleFill className=\"btn-icon\" />\n                                    Teams\n                                </Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"ranking\" className=\"sub-nav-link\">\n                                    <Trophy className=\"btn-icon\" />\n                                    Ranking\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"speakers\">\n                                <Speakers\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"teams\">\n                                <Teams\n                                    div={this.props.div}\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams}\n                                    updateSpeakers={this.props.updateSpeakers}\n                                    updateTeams={this.props.updateTeams} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"ranking\">\n                                <Ranking\n                                    speakers={this.props.speakers}\n                                    teams={this.props.teams} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Participants;","import React, { ChangeEvent, FocusEvent } from 'react';\nimport { Judge } from '../types/Judge';\nimport Form from 'react-bootstrap/Form';\nimport { Trash, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgeRowProps = {\n    judge: Judge,\n    updateJudge: (judge: Judge) => void,\n    deleteJudge: (judge: Judge) => void\n}\n\ntype JudgeRowState = {\n    name: string,\n    school: string,\n    canChair: boolean,\n    atRound1: boolean,\n    atRound2: boolean,\n    atRound3: boolean,\n    trashFill: boolean,\n    [key: string]: string|boolean\n}\n\nclass JudgeRow extends React.Component<JudgeRowProps, JudgeRowState> {\n    constructor(props: JudgeRowProps) {\n        super(props);\n\n        this.state = {\n            name: this.props.judge.name,\n            school: this.props.judge.school,\n            canChair: this.props.judge.canChair,\n            atRound1: this.props.judge.atRound1,\n            atRound2: this.props.judge.atRound2,\n            atRound3: this.props.judge.atRound3,\n            trashFill: false\n        }\n\n        this.handleTextEdit = this.handleTextEdit.bind(this);\n        this.handleTextUpdate = this.handleTextUpdate.bind(this);\n        this.handleJudgeToggle = this.handleJudgeToggle.bind(this);\n        this.trashOnMouseEnter = this.trashOnMouseEnter.bind(this);\n        this.trashOnMouseLeave = this.trashOnMouseLeave.bind(this);\n    }\n\n    handleTextEdit(event: ChangeEvent<HTMLTextAreaElement>) {\n        const {name, value} = event.target;\n        let state = {...this.state};\n        state[name] = value;\n        this.setState(state);\n    }\n\n    handleTextUpdate(event: FocusEvent<HTMLTextAreaElement>) {\n        event.preventDefault();\n        const name = event.target.name;\n        const value = this.state[name];\n        const judge = this.props.judge;\n        judge[name] = value;\n        this.props.updateJudge(judge);\n    }\n\n    handleJudgeToggle(event: ChangeEvent<HTMLInputElement>) {\n        const {name, checked} = event.target;\n        const judge = this.props.judge;\n\n        judge[name] = checked;\n        this.setState({[name]: checked});\n\n        this.props.updateJudge(judge);\n    }\n\n    trashOnMouseEnter() {\n        this.setState({trashFill: true});\n    }\n\n    trashOnMouseLeave() {\n        this.setState({trashFill: false});\n    }\n\n    \n    render() {\n        const judge = this.props.judge;\n\n        return (\n            <tr>\n                <td className=\"judge-table-name editable\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        name=\"name\"\n                        rows={1}\n                        cols={this.state.name.length > 8 ? this.state.name.length : 8}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.name}\n                        onChange={this.handleTextEdit}\n                        onBlur={this.handleTextUpdate} />\n                </td>\n                <td className=\"judge-table-school editable\">\n                <textarea\n                        className=\"cell-valupdate\"\n                        name=\"school\"\n                        rows={1}\n                        cols={this.state.school.length > 8 ? this.state.school.length : 8}\n                        autoComplete=\"off\"\n                        spellCheck=\"false\"\n                        value={this.state.school}\n                        onChange={this.handleTextEdit}\n                        onBlur={this.handleTextUpdate} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-canchair-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"canChair\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.canChair}\n                        className={this.state.canChair ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r1-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound1\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound1}\n                        className={this.state.atRound1 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r2-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound2\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound2}\n                        className={this.state.atRound2 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"judge-table-toggle cell-low-padding\">\n                    <Form.Check\n                        id={`judge-r3-${judge.judgeID}`}\n                        type=\"switch\"\n                        name=\"atRound3\"\n                        label=\"\"\n                        onChange={this.handleJudgeToggle}\n                        checked={this.state.atRound3}\n                        className={this.state.atRound3 ? \"on\" : \"off\"} />\n                </td>\n                <td className=\"table-delete\">\n                    {this.state.trashFill ? \n                        <TrashFill\n                            role=\"button\"\n                            className=\"icon red\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteJudge(judge)} />\n                        :\n                        <Trash\n                            role=\"button\"\n                            className=\"icon\"\n                            onMouseEnter={this.trashOnMouseEnter}\n                            onMouseLeave={this.trashOnMouseLeave}\n                            onClick={() => this.props.deleteJudge(judge)} />\n                    }\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default JudgeRow;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Judges.scss';\nimport JudgeRow from './JudgeRow';\nimport { Judge } from '../types/Judge';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { AwardFill, TrashFill } from 'react-bootstrap-icons';\n\n\ntype JudgesProps = {\n    judges: Judge[],\n    updateJudges: (judges: Judge[]) => void,\n    getTotalTeams: () => number\n}\n\ntype JudgesState = {\n    addJudgeForm: {\n        judgeName: string,\n        school: string,\n        [key: string]: string\n    }\n}\n\nclass Judges extends React.Component<JudgesProps, JudgesState> {\n    constructor(props: JudgesProps) {\n        super(props);\n\n        this.state = {\n            addJudgeForm: {\n                judgeName: \"\",\n                school: \"\"\n            }\n        }\n\n        this.handleAddJudgeFormChange = this.handleAddJudgeFormChange.bind(this);\n        this.handleAddJudgeFormSubmit = this.handleAddJudgeFormSubmit.bind(this);\n        this.updateJudge = this.updateJudge.bind(this);\n        this.deleteJudge = this.deleteJudge.bind(this);\n    }\n\n\n    handleAddJudgeFormChange(event: ChangeEvent<HTMLInputElement>) {\n        const {name, value} = event.target;\n        let judgeAddFormState = {...this.state.addJudgeForm};\n        judgeAddFormState[name] = value;\n        this.setState({addJudgeForm: judgeAddFormState});\n    }\n\n    handleAddJudgeFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        let judges = this.props.judges;\n        let counter = JSON.parse(localStorage.getItem(\"judgeCounter\")!);\n\n        const newJudge: Judge = {\n            judgeID: counter++,\n            name: this.state.addJudgeForm.judgeName,\n            school: this.state.addJudgeForm.school,\n            canChair: false,\n            atRound1: true, atRound2: true, atRound3: true\n        }\n        judges.push(newJudge);\n\n        this.props.updateJudges(judges);\n        localStorage.setItem(\"judgeCounter\", JSON.stringify(counter));\n\n        let blankForm = {...this.state.addJudgeForm};\n        blankForm.name = \"\";\n        this.setState({addJudgeForm: blankForm});\n    }\n\n    updateJudge(judge: Judge) {\n        let judges = this.props.judges;\n\n        const index = judges.indexOf(judge);\n        judges[index] = judge;\n\n        this.props.updateJudges(judges);\n    }\n\n    deleteJudge(judge: Judge) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        \n        // Check if the judge has already been part of a round\n        let inRound = false;\n        for (const round of draws) {\n            for(const pair of round.roomsOne) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n            for(const pair of round.roomsTwo) {\n                if(pair.chair === judge.judgeID || pair.wings.includes(judge.judgeID)) {\n                    inRound = true;\n                }\n            }\n        }\n        if(inRound) {\n            alert(\"This judge has already taken part in a round. You can't delete them anymore. You can still change their availability for each round.\");\n            return false;\n        }\n\n        // Confirm deletion\n        const conf = window.confirm(`Are you sure you want to delete judge ${judge.name}?`);\n        if(conf) {\n            let judges = this.props.judges;\n\n            const index = judges.indexOf(judge);\n            judges.splice(index, 1);\n\n            this.props.updateJudges(judges);\n        }\n    }\n\n\n    render() {\n        const judges = this.props.judges;\n\n        let table;\n        if(this.props.judges.length !== 0) {\n            table = (\n                <Table className=\"judge-table table-no-top-margin\" hover bordered>\n                    <thead>\n                        <tr>\n                            <th className=\"judge-table-name\">Name</th>\n                            <th>School</th>\n                            <th className=\"judge-table-toggle\">Chair?</th>\n                            <th className=\"judge-table-toggle\">Round 1?</th>\n                            <th className=\"judge-table-toggle\">Round 2?</th>\n                            <th className=\"judge-table-toggle\">Round 3?</th>\n                            <th className=\"table-delete\">\n                                <TrashFill className=\"icon\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.judges.map(judge => {\n                            return (\n                                <JudgeRow\n                                    key={`judge-row-${judge.name}`}\n                                    judge={judge}\n                                    updateJudge={this.updateJudge}\n                                    deleteJudge={this.deleteJudge} />\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            );\n        }\n\n        const totalRooms = Math.round(this.props.getTotalTeams() / 2);\n        const chairsR1 = judges.filter(el => el.canChair && el.atRound1).length;\n        const chairsR2 = judges.filter(el => el.canChair && el.atRound2).length;\n        const chairsR3 = judges.filter(el => el.canChair && el.atRound3).length;\n\n        return (\n            <Tab.Container id={`judges-view`} defaultActiveKey=\"judges\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav no-show-sm\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" className=\"sub-nav-link\">\n                                    <AwardFill className=\"btn-icon\" />\n                                    Judges\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"judges\">\n                                <h2>Judges</h2>\n                                <Row>\n                                    <Col>\n                                        <Form onSubmit={this.handleAddJudgeFormSubmit}>\n                                            <Form.Row>\n                                                <Col md={4}>\n                                                    <Form.Control\n                                                        name=\"judgeName\"\n                                                        type=\"text\"\n                                                        placeholder=\"Name\"\n                                                        value={this.state.addJudgeForm.judgeName}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col md={4}>\n                                                    <Form.Control\n                                                        name=\"school\"\n                                                        type=\"text\"\n                                                        placeholder=\"School\"\n                                                        value={this.state.addJudgeForm.school}\n                                                        onChange={this.handleAddJudgeFormChange} />\n                                                </Col>\n                                                <Col>\n                                                    <Button\n                                                        variant=\"primary\"\n                                                        className=\"btn-submit\"\n                                                        type=\"submit\">\n                                                        Add judge\n                                                    </Button>\n                                                </Col>\n                                            </Form.Row>\n                                        </Form>\n                                        <div id=\"total-judges\">\n                                            <p>\n                                                Total judges each round: {this.props.judges.filter(el => el.atRound1).length} &middot; {this.props.judges.filter(el => el.atRound2).length} &middot; {this.props.judges.filter(el => el.atRound3).length}\n                                                <br />\n                                                Total chairs each round: {chairsR1} &middot; {chairsR2} &middot; {chairsR3}\n                                                <br />\n                                                <span className={(totalRooms > chairsR1 || totalRooms > chairsR2 || totalRooms > chairsR3) ? \"red\" : \"\"}>\n                                                    Total chairs needed: {totalRooms}\n                                                </span>\n                                            </p>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col lg={10} xl={9} className=\"table-col\">\n                                        {table}\n                                    </Col>\n                                </Row>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Judges;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Team } from '../types/Team';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype TeamPillProps = {\n    team: Team,\n    hasConflict: boolean,\n    teams: Team[],\n    updateRoom: (thisTeamID: number, swapTeamID: number) => void\n}\n\ntype TeamPillState = {\n    swapTeamID: number\n}\n\nclass TeamPill extends React.Component<TeamPillProps, TeamPillState> {\n    constructor(props: TeamPillProps) {\n        super(props);\n\n        this.state = {\n            swapTeamID: this.props.team.teamID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({swapTeamID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.team.teamID, this.state.swapTeamID);\n        document.body.click();\n    }\n\n\n    render() {\n        const popover = (\n            <Popover id=\"teampill-popover\">\n                <Popover.Title as=\"h3\">Switch teams</Popover.Title>\n                <Popover.Content>\n                    <Form onSubmit={this.handleRoomFormSubmit}>\n                        {this.props.teams.map((team, index) => {\n                            return (\n                                <Form.Check custom\n                                    key={`team-check-${index}`}\n                                    id={`team-check-${team.teamID}-${index}`}\n                                    name=\"room\"\n                                    type=\"radio\"\n                                    label={team.name}\n                                    value={team.teamID}\n                                    checked={this.state.swapTeamID === team.teamID}\n                                    onChange={this.handleRoomFormChange} />\n                            );\n                        })}\n                        <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">Change</Button>\n                    </Form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                <div className={`pill ${this.props.hasConflict ? \"orange\" : \"\"}`}>\n                    {this.props.team.name}\n                </div>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default TeamPill;","import React, { ChangeEvent, FormEvent } from 'react';\nimport './Pill.scss';\nimport { Judge } from '../types/Judge';\nimport { Room } from '../types/Room';\nimport { Draw } from '../types/Draw';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\ntype JudgePillProps = {\n    judge: Judge,\n    isChair: boolean,\n    hasConflict: boolean,\n    hasChairedBefore: boolean,\n    room: Room,\n    draw: Draw,\n    updateRoom: (judgeID: number, isChair: boolean, newRoomID: number) => void\n}\n\ntype JudgePillState = {\n    roomID: number\n}\n\nclass JudgePill extends React.Component<JudgePillProps, JudgePillState> {\n    constructor(props: JudgePillProps) {\n        super(props);\n\n        this.state = {\n            roomID: this.props.room.roomID\n        }\n\n        this.handleRoomFormChange = this.handleRoomFormChange.bind(this);\n        this.handleRoomFormSubmit = this.handleRoomFormSubmit.bind(this);\n    }\n\n\n    handleRoomFormChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({roomID: parseInt(event.target.value)});\n    }\n\n    handleRoomFormSubmit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.updateRoom(this.props.judge.judgeID, this.props.isChair, this.state.roomID);\n        document.body.click();\n    }\n\n\n    render() {\n        const popover = (\n            <Popover id=\"judgepill-popover\">\n                <Popover.Title as=\"h3\">Switch rooms</Popover.Title>\n                <Popover.Content>\n                    {(this.props.draw.roomsOne.map(room => room.name).includes(\"\") ||\n                      this.props.draw.roomsTwo.map(room => room.name).includes(\"\") )\n                        ?\n                        <p>You need to assign each debate to a room before you can switch judges.</p>\n                        :\n                        <Form onSubmit={this.handleRoomFormSubmit}>\n                            {this.props.draw.roomsOne.map((room, index) => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${index}`}\n                                        id={`room-check-one-${room.roomID}-${index}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            {this.props.draw.roomsTwo.map((room, index) => {\n                                return (\n                                    <Form.Check custom\n                                        key={`room-check-${index}`}\n                                        id={`room-check-two-${room.roomID}-${index}`}\n                                        name=\"room\"\n                                        type=\"radio\"\n                                        label={room.name}\n                                        value={room.roomID}\n                                        checked={this.state.roomID === room.roomID}\n                                        onChange={this.handleRoomFormChange} />\n                                );\n                            })}\n                            <Button className=\"btn-popover\" variant=\"primary\" type=\"submit\">Change</Button>\n                        </Form>}\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                <div className={`\n                    pill\n                    ${this.props.hasConflict ? \"red\" : \"\"}\n                    ${this.props.hasChairedBefore ? \"orange\" : \"\"}\n                `}>\n                    {this.props.judge.name}{this.props.isChair ? \"\\u00A9\" : \"\"}\n                </div>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default JudgePill;","import React, { ChangeEvent } from 'react';\nimport TeamPill from './TeamPill';\nimport JudgePill from './JudgePill';\nimport { Room } from '../types/Room';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\n\n\ntype RoundRowProps = {\n    room: Room,\n    div: number,\n    round: number,\n    speakers: Speaker[],\n    teams: Team[],\n    judges: Judge[],\n    draws: Draw[],\n    updateRooms: (room: Room, div: number) => void\n}\n\ntype RoundRowState = {\n    roomName: string\n}\n\nclass RoundRow extends React.Component<RoundRowProps, RoundRowState> {\n    constructor(props: RoundRowProps) {\n        super(props);\n\n        this.state = {\n            roomName: this.props.room.name\n        }\n\n        this.handleRoomChange = this.handleRoomChange.bind(this);\n        this.updateRoomTeam = this.updateRoomTeam.bind(this);\n        this.updateRoomJudge = this.updateRoomJudge.bind(this);\n    }\n\n    componentDidUpdate(prevProps: RoundRowProps) {\n        if(this.props.room.name !== prevProps.room.name) {\n            this.setState({roomName: this.props.room.name});\n        }\n    }\n\n\n    handleRoomChange(event: ChangeEvent<HTMLTextAreaElement>) {\n        const value = event.target.value;\n        const room = this.props.room;\n        this.setState({roomName: value});\n        room.name = value;\n        this.props.updateRooms(room, this.props.div);\n    }\n\n    updateRoomTeam(thisTeamID: number, swapTeamID: number) {\n        const div = this.props.div;\n        const round = this.props.round - 1;\n        let draw = this.props.draws[round];\n        let thisRoom = this.props.room;\n\n        let rooms;\n        if(div === 1) rooms = draw.roomsOne;\n        else rooms = draw.roomsTwo;\n\n        let thisTeamPos = \"prop\";\n        if(thisRoom.opp === thisTeamID) thisTeamPos = \"opp\";\n\n        let newRoom: Room;\n        for(let checkRoom of rooms) {\n            if(checkRoom.prop === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.prop] = [checkRoom.prop, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.prop] = [checkRoom.prop, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n\n            } else if(checkRoom.opp === swapTeamID) {\n                if(thisTeamPos === \"prop\") [thisRoom.prop, checkRoom.opp] = [checkRoom.opp, thisRoom.prop];\n                else [thisRoom.opp, checkRoom.opp] = [checkRoom.opp, thisRoom.opp];\n                newRoom = checkRoom;\n                break;\n            }\n        }\n\n        newRoom = newRoom!;\n        this.props.updateRooms(newRoom, div);\n        this.props.updateRooms(thisRoom, div);\n    }\n\n    updateRoomJudge(judgeID: number, isChair: boolean, newRoomID: number) {\n        const round = this.props.round - 1;\n        let room = this.props.room;\n        let draw = this.props.draws[round];\n        const roomlistOne = draw.roomsOne.map(r => r.roomID);\n        const nextDiv = roomlistOne.includes(newRoomID) ? 1 : 2;\n\n        let rooms;\n        if(nextDiv === 1) rooms = draw.roomsOne;\n        else rooms = draw.roomsTwo;\n\n        const newRoom = rooms.findIndex(r => r.roomID === newRoomID);\n\n        if(!isChair) {\n            rooms[newRoom].wings.push(judgeID);\n            const oldIndex = room.wings.indexOf(judgeID);\n            room.wings.splice(oldIndex, 1);\n        } else {\n            const swapChairID = rooms[newRoom].chair;\n            if(swapChairID === judgeID) return false;\n\n            const conf = window.confirm(`You are about to swap the chairs ${this.props.judges.find(j => j.judgeID === judgeID)!.name} and ${this.props.judges.find(j => j.judgeID === swapChairID)!.name}. Do you wish to continue?`);\n            if(conf) {\n                rooms[newRoom].chair = judgeID;\n                room.chair = swapChairID;\n            } else return false;\n        }\n        this.props.updateRooms(rooms[newRoom], nextDiv);\n        this.props.updateRooms(room, this.props.div);\n    }\n\n\n    render() {\n        const speakers = this.props.speakers;\n        const teams = this.props.teams;\n        const judges = this.props.judges;\n        const room = this.props.room;\n        const round = this.props.round;\n        const draws = this.props.draws;\n        const div = this.props.div;\n\n        const prop = teams.find(el => el.teamID === room.prop)!;\n        const opp = teams.find(el => el.teamID === room.opp)!;\n        const chair = judges.find(el => el.judgeID === room.chair)!;\n\n\n        // Compile a list of speakers' schools for determining judge conflicts\n        let speakersInTeams: Speaker[] = [];\n        if(round === 1) {\n            prop.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round1.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else if(round === 2) {\n            prop.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round2.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        } else {\n            prop.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n            opp.round3.forEach(sp => speakersInTeams.push(speakers.find(el => el.speakerID === sp)!));\n        }\n        let speakerSchools: string[] = [];\n        speakersInTeams\n            .filter(sp => sp !== undefined)\n            .forEach(sp => speakerSchools.push(sp.school));\n\n\n        // Initialize values for next checks\n        let roomNum: string;\n        if(div === 1) roomNum = \"roomsOne\";\n        else roomNum = \"roomsTwo\";\n\n\n        // Check whether the teams have met before\n        let teamConflict = false;\n        if(round === 2 || round === 3) {\n            let propsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            propsR1 = rooms.map(r => r.prop);\n\n            if(propsR1.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n        if(round === 3) {\n            let propsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            propsR2 = rooms.map(r => r.prop);\n\n            if(propsR2.includes(prop.teamID)) {\n                const roomR1 = rooms.find(r => r.prop === prop.teamID)!;\n                if(roomR1.opp === opp.teamID) teamConflict = true;\n            } else {\n                const roomR1 = rooms.find(r => r.opp === prop.teamID)!;\n                if(roomR1.prop === opp.teamID) teamConflict = true;\n            }\n        }\n\n\n        // Check whether the chair has chaires the teams before\n        let hasChairedBefore = false;\n        if(round === 2 || round === 3) {\n            let chairsR1: number[];\n\n            const rooms: Room[] = draws[0][roomNum] as Room[];\n            chairsR1 = rooms.map(r => r.chair);\n\n            if(chairsR1.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n        if(round === 3) {\n            let chairsR2: number[];\n\n            const rooms: Room[] = draws[1][roomNum] as Room[];\n            chairsR2 = rooms.map(r => r.chair);\n\n            if(chairsR2.includes(chair.judgeID)) {\n                const roomR1 = rooms.find(r => r.chair === chair.judgeID)!;\n                if(roomR1.prop === prop.teamID || roomR1.prop === opp.teamID\n                    || roomR1.opp === prop.teamID || roomR1.opp === opp.teamID) {\n                        hasChairedBefore = true;\n                }\n            }\n        }\n\n\n        return (\n            <tr>\n                <td className=\"editable draw-table-room-cell\">\n                    <textarea\n                        className=\"cell-valupdate\"\n                        rows={1}\n                        cols={this.state.roomName.length > 8 ? this.state.roomName.length : 8}\n                        autoComplete=\"off\"\n                        placeholder=\"room\"\n                        value={this.state.roomName}\n                        onChange={this.handleRoomChange} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={prop}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td className=\"draw-table-team-cell\">\n                    <TeamPill \n                        team={opp}\n                        hasConflict={teamConflict}\n                        teams={this.props.teams}\n                        updateRoom={this.updateRoomTeam} />\n                </td>\n                <td>\n                    <div className=\"judgepill-container\">\n                        <JudgePill\n                            judge={chair}\n                            isChair={true}\n                            hasConflict={speakerSchools.includes(chair.school)}\n                            hasChairedBefore={hasChairedBefore}\n                            room={room}\n                            draw={draws[round - 1]}\n                            updateRoom={this.updateRoomJudge} />\n                    </div>\n                    {room.wings.length !== 0 ? \",\\u00A0\" : \"\"}\n                    {room.wings.map((el, index) => {\n                        let wing = judges.find(j => j.judgeID === el)!;\n                        return (\n                            <div key={`judgepil-${index}`} className=\"judgepill-container\">\n                                <JudgePill\n                                    judge={wing}\n                                    isChair={false}\n                                    hasConflict={speakerSchools.includes(wing.school)}\n                                    hasChairedBefore={false}\n                                    room={room}\n                                    draw={draws[round - 1]}\n                                    updateRoom={this.updateRoomJudge} />\n                                {index < room.wings.length - 1 ? \",\\u00A0\" : \"\"}\n                            </div>\n                        );\n                    })}\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default RoundRow;","import React from 'react';\nimport './Round.scss';\nimport RoundRow from './RoundRow';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport { Room } from '../types/Room';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport { Bullseye, ArrowRepeat, Trash, ArrowsAngleExpand, InfoCircle } from 'react-bootstrap-icons';\n\n\ntype RoundProps = {\n    round: number,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\ntype RoundState = {\n    generated: boolean,\n    roomsOne: Room[],\n    roomsTwo: Room[],\n    fullScreen: boolean\n}\n\nclass Round extends React.Component<RoundProps, RoundState> {\n    constructor(props: RoundProps) {\n        super(props);\n\n        const pairings = this.props.draws[this.props.round - 1];\n\n        this.state = {\n            generated: pairings.generated,\n            roomsOne: pairings.roomsOne,\n            roomsTwo: pairings.roomsTwo,\n            fullScreen: false\n        }\n\n        this.generateDraw = this.generateDraw.bind(this);\n        this.deleteDraw = this.deleteDraw.bind(this);\n        this.updateRooms = this.updateRooms.bind(this);\n        this.fullScreenDraw = this.fullScreenDraw.bind(this);\n        this.modalHide = this.modalHide.bind(this);\n    }\n\n\n    generateDraw() {\n        const round = this.props.round;\n        let draws = this.props.draws;\n\n        // Check whether previous or next draws have happened\n        if(round === 1) {\n            if(draws[1].generated || draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 2) {\n            if(!draws[0].generated) {\n                alert(\"You can't generate the draw for round 2 before generating the draw for round 1.\");\n                return false;\n            } else if(draws[2].generated) {\n                alert(\"You can't regenerate a draw after you've generated the next one.\");\n                return false;\n            }\n        } else if(round === 3) {\n            if(!draws[0].generated || !draws[1].generated) {\n                alert(\"You can't generate the draw for round 3 before generating the draws for rounds 1 and 2.\");\n                return false;\n            }\n        }\n\n        // Check if regenerating\n        if(this.state.generated) {\n            const confGen = window.confirm(\"Do you really want to regenerate the draw?\");\n            if(!confGen) {\n                return false;\n            }\n        }\n\n        // Initialize values\n        let teamsOne = this.props.teamsOne;\n        let teamsTwo = this.props.teamsTwo;\n        let judges = this.props.judges;\n        const len1 = teamsOne.length;\n        const len2 = teamsTwo.length;\n\n        // Don't run the draw if division one has no teams\n        if(len1 === 0) {\n            alert(\"Add some teams to generate the draw.\");\n            return;\n        }\n\n        // Check for an even number of teams\n        if(len1 % 2 !== 0 && len2 % 2 !== 0) {\n            alert(\"Both divisions have an odd number of teams. A team from one division debating a team from the other division is not currently supported. Please add or remove a team to/from both in order to continue.\")\n            return false;\n        } else if(len1 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![0]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        } else if(len2 % 2 !== 0) {\n            alert(`There is an odd number of ${this.props.config.numDivisions === 2 ? `${this.props.config.divisionNames![1]} ` : \"\"}teams\\u2014add or remove a team to generate the draw.`);\n            return false;\n        }\n\n        // Select only the judges that are available this round\n        let availableJudges: Judge[];\n        if(round === 1) {\n            availableJudges = judges.filter(el => el.atRound1 === true);\n        } else if(round === 2) {\n            availableJudges = judges.filter(el => el.atRound2 === true);\n        } else {\n            availableJudges = judges.filter(el => el.atRound3 === true);\n        }\n\n        // Split chairs and wings\n        const chairs = availableJudges.filter(el => el.canChair === true);\n        let wings = availableJudges.filter(el => el.canChair === false);\n\n        // Check whether there are enough chairs\n        const totalTeams = len1 + len2;\n        if(chairs.length < totalTeams / 2) {\n            alert(\"There are not enough chairs to adjudicate every room. Please add some more.\");\n            return false;\n        }\n\n        // Shuffle chairs for random picking\n        for (let i = chairs.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [chairs[i], chairs[j]] = [chairs[j], chairs[i]];\n        }\n\n        // Select chairs and put the rest as wings\n        while(chairs.length > totalTeams / 2) {\n            wings.push(chairs.pop()!);\n        }\n\n        // Generate pairings\n        let roomCounter = JSON.parse(localStorage.getItem(\"roomCounter\")!);\n        let roomsOne = [];\n        let roomsTwo = [];\n        let t1 = teamsOne.slice(0);\n        let t2 = teamsTwo.slice(0);\n\n        if(round === 1) {\n            // Generate lists of teams in random order\n            for (let i = len1 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t1[i], t1[j]] = [t1[j], t1[i]];\n            }\n            for (let i = len2 - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [t2[i], t2[j]] = [t2[j], t2[i]];\n            }\n        } else {\n            // Generate lists of teams in order of team wins, then total team points\n            t1.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n            t2.sort((a, b) => {\n                if(a.totalWins < b.totalWins) {\n                    return 1;\n                } else if(a.totalWins > b.totalWins) {\n                    return -1;\n                } else {\n                    if(a.totalPoints < b.totalPoints) {\n                        return 1;\n                    } else if(a.totalPoints > b.totalPoints) {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                }\n            });\n        }\n\n        // For round 2, make sure everyone is on another side\n        if(round === 2) {\n            const roundOneRoomsOne = draws[0].roomsOne;\n            const roundOneRoomsTwo = draws[0].roomsTwo;\n            const propsOne = roundOneRoomsOne.map(r => r.prop);\n            const propsTwo = roundOneRoomsTwo.map(r => r.opp);\n\n            t1.forEach((team, index) => {\n                let wasProp = false;\n                if(propsOne.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len1; i++) {\n                        let iWasProp = false;\n                        if(propsOne.includes(t1[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t1[index], t1[i]] = [t1[i], t1[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n            t2.forEach((team, index) => {\n                let wasProp = false;\n                if(propsTwo.includes(team.teamID)) wasProp = true;\n\n                if(index % 2 === 0 && wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(!iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                } else if(index % 2 === 1 && !wasProp) {\n                    for(let i = index + 1; i < len2; i++) {\n                        let iWasProp = false;\n                        if(propsTwo.includes(t2[i].teamID)) iWasProp = true;\n                        if(iWasProp) {\n                            [t2[index], t2[i]] = [t2[i], t2[index]];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n\n        // Distribute teams and chairs\n        let currPropID, currOppID, currChair, currChairID;\n        for (let i = 0; i < len1; i += 2) {\n            currPropID = t1[i].teamID;\n            currOppID = t1[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsOne[i / 2] = newRoom;\n        }\n        for (let i = 0; i < len2; i += 2) {\n            currPropID = t2[i].teamID;\n            currOppID = t2[i + 1].teamID;\n\n            currChair = chairs.pop()!;\n            currChairID = currChair.judgeID;\n\n            const newRoom: Room = {\n                roomID: roomCounter++,\n                name: \"\",\n                prop: currPropID,\n                opp: currOppID,\n                chair: currChairID,\n                wings: []\n            }\n            roomsTwo[i / 2] = newRoom;\n        }\n\n        // Add wings\n        while(wings.length > 0) {\n            for (let i = 0; i < roomsOne.length; i++) {\n                roomsOne[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n            if(wings.length === 0) {\n                break;\n            }\n            for (let i = 0; i < roomsTwo.length; i++) {\n                roomsTwo[i].wings.push(wings.pop()!.judgeID);\n                if(wings.length === 0) {\n                    break;\n                }\n            }\n        }\n\n        // Randomize row order\n        for (let i = roomsOne.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsOne[i], roomsOne[j]] = [roomsOne[j], roomsOne[i]];\n        }\n        for (let i = roomsTwo.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [roomsTwo[i], roomsTwo[j]] = [roomsTwo[j], roomsTwo[i]];\n        }\n\n        // Save in storage\n        const drawr: Draw = {\n            generated: true,\n            roomsOne: roomsOne,\n            roomsTwo: roomsTwo\n        }\n        if(round === 1) {\n            draws[0] = drawr;\n        } else if(round === 2) {\n            draws[1] = drawr;\n        } else {\n            draws[2] = drawr;\n        }\n        localStorage.setItem(\"draws\", JSON.stringify(draws));\n\n        // Update local state\n        this.setState({roomsOne: roomsOne});\n        this.setState({roomsTwo: roomsTwo});\n        this.setState({generated: true});\n\n        localStorage.setItem(\"roomCounter\", JSON.stringify(roomCounter));\n    }\n\n    deleteDraw() {\n        const round = this.props.round;\n        let draws = this.props.draws;\n\n        if(round === 1 && (draws[1].generated || draws[2].generated)) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        } else if(round === 2 && draws[2].generated) {\n            alert(\"You can't delete a draw after you've generated the next one.\");\n            return false;\n        }\n\n        let conf = window.confirm(`Are you sure you want to delete the draw for round ${round}?`);\n        if(!conf) return false;\n\n        const draw: Draw = {\n            generated: false,\n            roomsOne: [],\n            roomsTwo: []\n        }\n        if(round === 1) {\n            draws[0] = draw;\n        } else if(round === 2) {\n            draws[1] = draw;\n        } else {\n            draws[2] = draw;\n        }\n        localStorage.setItem(\"draws\", JSON.stringify(draws));\n\n        this.setState({roomsOne: []});\n        this.setState({roomsTwo: []});\n        this.setState({generated: false});\n    }\n\n\n    updateRooms(room: Room, div: number) {\n        const draws = JSON.parse(localStorage.getItem(\"draws\")!);\n        let rooms;\n        if(div === 1) {\n            rooms = this.state.roomsOne;\n        } else {\n            rooms = this.state.roomsTwo;\n        }\n\n        const index = rooms.findIndex(r => r.roomID === room.roomID);\n        rooms[index] = room;\n\n        if(div === 1) {\n            this.setState({roomsOne: rooms});\n            draws[this.props.round - 1].roomsOne = rooms;\n        } else {\n            this.setState({roomsTwo: rooms});\n            draws[this.props.round - 1].roomsTwo = rooms;\n        }\n        localStorage.setItem(\"draws\", JSON.stringify(draws));\n    }\n\n\n    fullScreenDraw() {\n        this.setState({fullScreen: true});\n        document.documentElement.requestFullscreen();\n    }\n\n    modalHide() {\n        this.setState({fullScreen: false});\n        if(document.fullscreenElement !== null) {\n            document.exitFullscreen();\n        }\n    }\n\n\n    render() {\n        let tables;\n        if(!this.state.generated) {\n            tables = <div className=\"draw-placeholder\"></div>;\n        } else {\n            tables = (\n                <div>\n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![0] : \"Draw\"}</h3>\n                    <Table className=\"table-no-top-margin draw-table-one\" hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roomsOne.map((room, index) => {\n                                    return <RoundRow \n                                            key={`one-room-${index}`}\n                                            room={room}\n                                            div={1}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersOne}\n                                            teams={this.props.teamsOne}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                    \n                    <h3>{this.props.config.numDivisions === 2 ? this.props.config.divisionNames![1] : \"\"}</h3>\n                    <Table className={`table-no-top-margin ${this.props.config.numDivisions === 1 ? \"hidden\" : \"\"}`} hover striped>\n                        <thead>\n                            <tr>\n                                <th>Room</th>\n                                <th className=\"draw-table-team-cell\">Proposition</th>\n                                <th className=\"draw-table-team-cell\">Opposition</th>\n                                <th>Judges</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roomsTwo.map((room, index) => {\n                                    return <RoundRow \n                                            key={`two-room-${index}`}\n                                            room={room}\n                                            div={2}\n                                            round={this.props.round}\n                                            speakers={this.props.speakersTwo}\n                                            teams={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws}\n                                            updateRooms={this.updateRooms} />;\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <h2>Round {this.props.round}</h2>\n                <Row className=\"draw-header\">\n                    <Col>\n                        <Button\n                            onClick={this.generateDraw}\n                            className={this.state.generated ? \"hidden\" : \"\"}>\n                            <Bullseye className=\"btn-icon\"/>\n                            Generate draw\n                        </Button>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={this.generateDraw}\n                            className={!this.state.generated ? \"hidden\" : \"\"}>\n                            <ArrowRepeat className=\"btn-icon\" />\n                            Regenerate draw\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={this.deleteDraw}\n                            className={!this.state.generated ? \"hidden\" : \"\"}>\n                            <Trash className=\"btn-icon\" />\n                            Delete draw\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.fullScreenDraw}\n                            className={!this.state.generated ? \"hidden\" : \"\"}>\n                            <ArrowsAngleExpand className=\"btn-icon\" />\n                            Display fullscreen\n                        </Button>\n                        <div className={`draw-legend ${!this.state.generated ? \"hidden\" : \"\"}`}>\n                            <OverlayTrigger\n                                placement=\"bottom-start\"\n                                overlay={\n                                    <Popover className=\"popover-explainer\" id=\"draw-legend-popover\">\n                                        <Popover.Content>\n                                            Teams in <span className=\"orange\">orange</span> have already debated each other before.<br />\n                                            Chairs in <span className=\"orange\">orange</span> have already chaired one of the teams in their room before.<br />\n                                            Judges in <span className=\"red\">red</span> clash with one of the teams in their room.<br />\n                                            Note that these colors do not show up when the draw is displayed fullscreen.\n                                        </Popover.Content>\n                                    </Popover>\n                                } \n                                rootClose>\n                                <abbr title=\"\"><p>\n                                    <InfoCircle className=\"icon-info\" />\n                                    &nbsp;&nbsp;<span>Legend</span>\n                                </p></abbr>\n                            </OverlayTrigger>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={10} xl={9} className=\"table-col\">\n                        {tables}\n                    </Col>\n                </Row>\n\n                <Modal\n                    show={this.state.fullScreen}\n                    onHide={this.modalHide}\n                    backdrop=\"static\"\n                    size=\"xl\"\n                    className=\"draw-modal\"\n                    dialogClassName=\"draw-modal-dialog\"\n                    backdropClassName=\"draw-modal-backdrop\">\n                    <Modal.Header closeButton>\n                        Draw Round {this.props.round}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"draw-modal-table\">\n                            {tables}\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Round;","import React from 'react';\nimport Round from './Round';\nimport { Config } from '../types/Config';\nimport { Speaker } from '../types/Speaker';\nimport { Team } from '../types/Team';\nimport { Judge } from '../types/Judge';\nimport { Draw } from '../types/Draw';\nimport Tab from 'react-bootstrap/Tab';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport { CircleHalf } from 'react-bootstrap-icons';\n\n\ntype DrawsProps = {\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nclass Draws extends React.Component<DrawsProps> {\n    render() {\n        return (\n            <Tab.Container id={`draw-view`} defaultActiveKey=\"round-1\" transition={false}>\n                <Row>\n                    <Col md={3} lg={2}>\n                        <Nav variant=\"pills\" className=\"sub-nav\">\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Nav.Item key={`draw-nav-${round}`}>\n                                        <Nav.Link eventKey={`round-${round}`} className=\"sub-nav-link\">\n                                            <CircleHalf className=\"btn-icon\" />\n                                            Round {round}\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                );\n                            })}\n                        </Nav>\n                    </Col>\n                    <Col md={9} lg={10}>\n                        <Tab.Content>\n                            {[1, 2, 3].map(round => {\n                                return (\n                                    <Tab.Pane key={`draw-pane-${round}`} eventKey={`round-${round}`}>\n                                        <Round\n                                            round={round}\n                                            config={this.props.config}\n                                            speakersOne={this.props.speakersOne}\n                                            speakersTwo={this.props.speakersTwo}\n                                            teamsOne={this.props.teamsOne}\n                                            teamsTwo={this.props.teamsTwo}\n                                            judges={this.props.judges}\n                                            draws={this.props.draws} />\n                                    </Tab.Pane>\n                                )\n                            })}\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport default Draws;","import React from 'react';\nimport './App.scss';\nimport logo from './images/logo.svg';\nimport pkg from '../package.json';\nimport SetupScreen from './setup/SetupScreen';\nimport Home from './home/Home';\nimport Participants from './participants/Participants';\nimport Judges from './judges/Judges';\nimport Draws from './draws/Draws';\nimport { Speaker } from './types/Speaker';\nimport { Team } from './types/Team';\nimport { Judge } from './types/Judge';\nimport { Draw } from './types/Draw';\nimport { Config } from './types/Config';\nimport Container from 'react-bootstrap/Container';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Collapse from 'react-bootstrap/Collapse';\nimport { List } from 'react-bootstrap-icons';\n\n\ntype AppProps = {}\n\ntype AppState = {\n    showMenu: boolean,\n    init: boolean,\n    tournamentName: string,\n    config: Config,\n    speakersOne: Speaker[],\n    speakersTwo: Speaker[],\n    teamsOne: Team[],\n    teamsTwo: Team[],\n    judges: Judge[],\n    draws: Draw[]\n}\n\nconst s = JSON.stringify;\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        if(!localStorage.getItem(\"init\")) {\n            localStorage.setItem(\"init\", s(false));\n        }\n        if(!localStorage.getItem(\"tournamentName\")) {\n            localStorage.setItem(\"tournamentName\", s(\"New tournament\"));\n        }\n        if(!localStorage.getItem(\"config\")) {\n            localStorage.setItem(\"config\", s({version: pkg.version, numDivisions: 0}));\n        }\n        if(!localStorage.getItem(\"speakersOne\")) {\n            localStorage.setItem(\"speakersOne\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsOne\")) {\n            localStorage.setItem(\"teamsOne\", s([]));\n        }\n        if(!localStorage.getItem(\"speakersTwo\")) {\n            localStorage.setItem(\"speakersTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"teamsTwo\")) {\n            localStorage.setItem(\"teamsTwo\", s([]));\n        }\n        if(!localStorage.getItem(\"speakerCounter\")) {\n            localStorage.setItem(\"speakerCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"teamCounter\")) {\n            localStorage.setItem(\"teamCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"judges\")) {\n            localStorage.setItem(\"judges\", s([]));\n        }\n        if(!localStorage.getItem(\"judgeCounter\")) {\n            localStorage.setItem(\"judgeCounter\", s(0));\n        }\n        if(!localStorage.getItem(\"draws\")) {\n            localStorage.setItem(\"draws\", s([\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []},\n                {generated: false, roomsOne: [], roomsTwo: []}\n            ]));\n        }\n        if(!localStorage.getItem(\"roomCounter\")) {\n            localStorage.setItem(\"roomCounter\", s(0));\n        }\n\n        this.state = {\n            showMenu: false,\n            init: JSON.parse(localStorage.getItem(\"init\")!),\n            tournamentName: JSON.parse(localStorage.getItem(\"tournamentName\")!),\n            config: JSON.parse(localStorage.getItem(\"config\")!),\n            speakersOne: JSON.parse(localStorage.getItem(\"speakersOne\")!),\n            speakersTwo: JSON.parse(localStorage.getItem(\"speakersTwo\")!),\n            teamsOne: JSON.parse(localStorage.getItem(\"teamsOne\")!),\n            teamsTwo: JSON.parse(localStorage.getItem(\"teamsTwo\")!),\n            judges: JSON.parse(localStorage.getItem(\"judges\")!),\n            draws: JSON.parse(localStorage.getItem(\"draws\")!)\n        }\n\n        this.toggleMenu = this.toggleMenu.bind(this);\n\n        this.updateStorage = this.updateStorage.bind(this);\n        this.updateTournamentName = this.updateTournamentName.bind(this);\n        this.updateInit = this.updateInit.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n        this.updateSpeakersOne = this.updateSpeakersOne.bind(this);\n        this.updateSpeakersTwo = this.updateSpeakersTwo.bind(this);\n        this.updateTeamsOne = this.updateTeamsOne.bind(this);\n        this.updateTeamsTwo = this.updateTeamsTwo.bind(this);\n        this.updateJudges = this.updateJudges.bind(this);\n\n        this.initializeTournament = this.initializeTournament.bind(this);\n        this.getTotalTeams = this.getTotalTeams.bind(this);\n\n        document.title = `${JSON.parse(localStorage.getItem(\"tournamentName\")!)} - TacoTab`;\n    }\n\n\n    // Toggle menu\n    toggleMenu() {\n        if(this.state.showMenu) {\n            this.setState({ showMenu: false });\n        } else {\n            this.setState({ showMenu: true });\n        }\n    }\n\n\n    // Global methods to update local storage and state\n    updateStorage = (key: string) => {\n        return (value: any) => {\n            localStorage.setItem(key, JSON.stringify(value));\n            this.setState<never>({ [key]: value })\n        }\n    };\n\n    updateTournamentName = (name: string) => {\n        this.updateStorage(\"tournamentName\")(name)\n        document.title = `${name} - TacoTab`;\n    }\n\n    updateInit = this.updateStorage(\"init\");\n    updateConfig = this.updateStorage(\"config\");\n    updateSpeakersOne = this.updateStorage(\"speakersOne\");\n    updateSpeakersTwo = this.updateStorage(\"speakersTwo\");\n    updateTeamsOne = this.updateStorage(\"teamsOne\");\n    updateTeamsTwo = this.updateStorage(\"teamsTwo\");\n    updateJudges = this.updateStorage(\"judges\");\n\n\n    // Global helper methods\n    initializeTournament = (\n        tournamentName: string,\n        numDivisions: number,\n        divisionNames: string[]) => {\n\n            this.updateTournamentName(tournamentName);\n            \n            let config: Config = {\n                version: pkg.version,\n                numDivisions: numDivisions\n            }\n            if(numDivisions !== 1) {\n                config.divisionNames = [...divisionNames];\n            }\n            this.updateConfig(config);\n\n            this.updateInit(true);\n    }\n\n    getTotalTeams() {\n        return this.state.teamsOne.length + this.state.teamsTwo.length;\n    }\n\n\n\n    render() {\n        let participants_nav, participants_panes;\n        if(this.state.config.numDivisions !== 2) {\n            participants_nav = (\n                <Nav.Item>\n                    <Nav.Link eventKey=\"participants\" title=\"Participants\">Participants</Nav.Link>\n                </Nav.Item>\n            );\n            participants_panes = (\n                <Tab.Pane eventKey=\"participants\">\n                    <Participants\n                        div={1}\n                        speakers={this.state.speakersOne}\n                        teams={this.state.teamsOne}\n                        updateSpeakers={this.updateSpeakersOne}\n                        updateTeams={this.updateTeamsOne} />\n                </Tab.Pane>\n            );\n        } else {\n            participants_nav = (\n                <>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divone\" title={this.state.config.divisionNames![0]}>{this.state.config.divisionNames![0]}</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"divtwo\" title={this.state.config.divisionNames![1]}>{this.state.config.divisionNames![1]}</Nav.Link>\n                    </Nav.Item>\n                </>\n            );\n            participants_panes = (\n                <>\n                    <Tab.Pane eventKey=\"divone\">\n                        <Participants\n                            div={1}\n                            speakers={this.state.speakersOne}\n                            teams={this.state.teamsOne}\n                            updateSpeakers={this.updateSpeakersOne}\n                            updateTeams={this.updateTeamsOne} />\n                    </Tab.Pane>\n                    <Tab.Pane eventKey=\"divtwo\">\n                        <Participants\n                            div={2}\n                            speakers={this.state.speakersTwo}\n                            teams={this.state.teamsTwo}\n                            updateSpeakers={this.updateSpeakersTwo}\n                            updateTeams={this.updateTeamsTwo} />\n                    </Tab.Pane>\n                </>\n            );\n        }\n\n\n        return (\n            <>\n            <Container fluid className=\"app\">\n                <div id=\"logo\">\n                    <img src={logo} alt=\"TacoTab logo\" />\n                    <h1>TacoTab</h1>\n                </div>\n\n                <div id=\"hamburger\">\n                    <List \n                        onClick={this.toggleMenu}\n                        role=\"button\"\n                        aria-controls=\"app-nav\"\n                        aria-expanded={this.state.showMenu} />\n                </div>\n\n                <Tab.Container id=\"app-nav\" defaultActiveKey=\"home\" transition={false}>\n                    <Collapse in={this.state.showMenu}>\n                        <Nav className=\"main-nav\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"home\" title=\"Home\">Home</Nav.Link>\n                            </Nav.Item>\n                            {participants_nav}\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"judges\" title=\"Judges\">Judges</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"draw\" title=\"Draw\">Draw</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Collapse>\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"home\">\n                            <Home\n                                tournamentName={this.state.tournamentName}\n                                config={this.state.config}\n                                updateTournamentName={this.updateTournamentName}\n                                updateConfig={this.updateConfig} />\n                        </Tab.Pane>\n                        {participants_panes}\n                        <Tab.Pane eventKey=\"judges\">\n                            <Judges\n                                judges={this.state.judges}\n                                updateJudges={this.updateJudges}\n                                getTotalTeams={this.getTotalTeams} />\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"draw\">\n                            <Draws\n                                config={this.state.config}\n                                speakersOne={this.state.speakersOne}\n                                speakersTwo={this.state.speakersTwo}\n                                teamsOne={this.state.teamsOne}\n                                teamsTwo={this.state.teamsTwo}\n                                judges={this.state.judges}\n                                draws={this.state.draws} />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Tab.Container>\n            </Container>\n\n            <SetupScreen\n                init={this.state.init}\n                initializeTournament={this.initializeTournament} />\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}